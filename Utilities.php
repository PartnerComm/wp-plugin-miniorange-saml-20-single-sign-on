<?php


include_once "\170\155\x6c\x73\x65\143\154\x69\142\163\x2e\x70\150\160";
use RobRichards\XMLSecLibs\XMLSecurityKey;
use RobRichards\XMLSecLibs\XMLSecurityDSig;
use RobRichards\XMLSecLibs\XMLSecEnc;
class SAMLSPUtilities
{
    public static function generateID()
    {
        return "\137" . self::stringToHex(self::generateRandomBytes(21));
    }
    public static function stringToHex($qC)
    {
        $tH = '';
        $Eh = 0;
        xA:
        if (!($Eh < strlen($qC))) {
            goto Yb;
        }
        $tH .= sprintf("\45\x30\x32\170", ord($qC[$Eh]));
        ji:
        $Eh++;
        goto xA;
        Yb:
        return $tH;
    }
    public static function generateRandomBytes($eq, $Lu = TRUE)
    {
        return openssl_random_pseudo_bytes($eq);
    }
    public static function createAuthnRequest($Ii, $e8, $qd, $b8 = "\146\x61\x6c\x73\145", $yF = "\x48\x74\164\160\122\145\x64\151\x72\x65\143\x74", $ml = '')
    {
        $ml = "\x75\162\x6e\72\157\141\163\x69\x73\x3a\156\x61\x6d\x65\163\72\x74\143\72\x53\x41\115\114\72" . $ml;
        $yT = "\x3c\x3f\x78\x6d\x6c\40\x76\x65\x72\x73\x69\x6f\x6e\75\x22\61\56\60\x22\x20\145\156\x63\x6f\x64\x69\x6e\x67\75\42\x55\124\106\x2d\70\x22\x3f\76" . "\74\163\141\155\154\x70\x3a\101\165\164\x68\x6e\122\x65\161\165\x65\163\164\x20\170\x6d\x6c\156\x73\x3a\x73\141\155\x6c\x70\x3d\42\165\x72\x6e\x3a\157\141\163\151\163\72\156\141\155\x65\x73\72\x74\x63\72\123\x41\x4d\x4c\72\x32\x2e\60\x3a\x70\x72\157\164\x6f\143\x6f\x6c\x22\x20\x78\x6d\154\156\x73\75\42\x75\x72\156\x3a\x6f\x61\163\151\x73\72\156\141\x6d\x65\x73\72\164\x63\x3a\x53\101\115\114\72\62\x2e\60\72\x61\163\163\x65\162\164\x69\x6f\x6e\x22\40\x49\104\75\42" . self::generateID() . "\x22\40\126\x65\162\163\x69\x6f\156\x3d\x22\62\56\x30\42\x20\x49\x73\163\165\x65\x49\156\x73\x74\x61\156\164\75\x22" . self::generateTimestamp() . "\42";
        if (!($b8 == "\164\162\165\145")) {
            goto M4;
        }
        $yT .= "\40\106\x6f\x72\x63\x65\x41\165\164\x68\x6e\75\x22\x74\162\x75\145\42";
        M4:
        $yT .= "\x20\x50\162\157\x74\157\x63\157\x6c\x42\151\156\x64\151\156\147\75\x22\165\162\156\72\x6f\x61\163\x69\163\72\156\141\155\x65\x73\72\164\143\72\x53\x41\115\114\72\x32\56\60\72\x62\151\x6e\144\151\x6e\x67\163\x3a\110\124\124\120\55\120\x4f\x53\124\42\x20\x41\x73\x73\x65\162\164\151\157\x6e\x43\157\x6e\163\165\x6d\x65\162\123\145\162\x76\x69\143\145\125\x52\x4c\75\42" . $Ii . "\42\40\x44\145\163\x74\x69\x6e\141\164\x69\157\156\x3d\x22" . htmlspecialchars($qd) . "\42\x3e\74\163\x61\155\154\72\111\x73\x73\x75\x65\162\40\170\x6d\154\156\x73\72\163\x61\x6d\x6c\x3d\42\x75\162\x6e\72\157\141\163\151\x73\x3a\x6e\x61\155\x65\x73\72\x74\x63\x3a\x53\101\115\114\x3a\x32\56\60\72\x61\x73\x73\145\162\164\151\x6f\156\42\x3e" . $e8 . "\x3c\x2f\x73\x61\x6d\x6c\72\111\x73\163\x75\x65\162\x3e\x3c\163\141\x6d\x6c\x70\x3a\x4e\x61\155\145\x49\x44\x50\x6f\154\x69\143\x79\x20\x41\154\154\x6f\x77\103\x72\145\x61\x74\x65\x3d\42\164\162\165\x65\x22\x20\x46\157\162\x6d\141\x74\x3d\x22" . $ml . "\42\15\12\40\x20\40\x20\x20\x20\x20\x20\40\40\x20\40\x20\x20\40\x20\x20\x20\40\40\x20\x20\40\x20\x2f\76\74\x2f\x73\141\x6d\x6c\160\x3a\101\165\x74\x68\x6e\122\145\161\x75\145\163\164\x3e";
        if (empty($yF) || $yF == "\x48\x74\164\160\x52\x65\x64\151\162\145\143\x74") {
            goto hB;
        }
        $LE = gzdeflate($yT);
        $JH = base64_encode($LE);
        update_option("\x6d\157\137\x73\141\155\x6c\x5f\162\x65\161\x75\x65\x73\x74", $JH);
        goto f1;
        hB:
        $LE = gzdeflate($yT);
        $JH = base64_encode($LE);
        update_option("\155\157\137\163\x61\155\154\x5f\162\145\161\x75\x65\163\164", $JH);
        $KP = urlencode($JH);
        $yT = $KP;
        f1:
        return $yT;
    }
    public static function createLogoutRequest($t0, $e8, $qd, $vq = '', $Ds = "\x48\x74\x74\160\122\145\x64\x69\x72\x65\143\164")
    {
        $yT = "\x3c\x3f\170\x6d\x6c\x20\166\x65\x72\163\151\x6f\x6e\x3d\42\x31\x2e\60\42\x20\145\156\x63\157\144\x69\x6e\147\x3d\x22\x55\124\x46\x2d\x38\42\77\76" . "\74\x73\x61\x6d\x6c\160\x3a\x4c\x6f\x67\157\x75\x74\x52\x65\x71\165\145\163\164\40\x78\155\154\x6e\x73\x3a\163\141\x6d\154\160\x3d\x22\x75\x72\x6e\72\x6f\x61\x73\151\163\x3a\x6e\141\x6d\145\x73\x3a\164\143\72\x53\x41\115\x4c\72\x32\x2e\x30\72\x70\162\x6f\164\x6f\x63\157\154\x22\40\x78\x6d\154\x6e\x73\72\163\x61\x6d\154\75\42\x75\162\156\x3a\157\x61\x73\151\163\72\x6e\141\155\x65\x73\72\164\x63\x3a\123\x41\115\x4c\72\x32\x2e\60\72\x61\x73\x73\x65\162\x74\151\157\x6e\42\x20\x49\104\75\42" . self::generateID() . "\42\x20\111\163\x73\165\145\111\x6e\x73\164\141\x6e\x74\x3d\x22" . self::generateTimestamp() . "\x22\40\126\x65\x72\163\151\157\x6e\x3d\42\x32\56\x30\42\40\x44\145\163\x74\x69\x6e\x61\164\x69\157\x6e\75\42" . htmlspecialchars($qd) . "\x22\76\xd\xa\11\x9\x9\11\x9\x9\x3c\163\x61\155\x6c\72\x49\x73\163\x75\145\x72\x20\170\155\x6c\x6e\x73\x3a\163\141\x6d\154\75\42\165\162\x6e\72\x6f\141\163\x69\163\72\x6e\141\x6d\x65\163\x3a\164\x63\72\x53\x41\x4d\x4c\72\x32\56\60\x3a\141\x73\163\145\162\164\x69\157\x6e\42\76" . $e8 . "\74\57\163\x61\x6d\154\x3a\111\163\163\165\145\x72\x3e\15\12\11\11\11\11\x9\x9\x3c\x73\x61\x6d\154\72\116\x61\155\x65\111\104\x20\170\155\x6c\x6e\163\72\x73\x61\155\x6c\75\x22\165\x72\x6e\x3a\157\x61\x73\151\x73\72\x6e\141\x6d\145\x73\72\x74\143\x3a\x53\x41\x4d\114\72\x32\x2e\60\72\141\163\x73\x65\x72\x74\x69\157\x6e\x22\x3e" . $t0[0] . "\74\x2f\163\141\155\x6c\72\116\x61\x6d\145\x49\x44\x3e";
        if (empty($vq)) {
            goto fl;
        }
        $yT .= "\x3c\x73\x61\155\x6c\x70\72\123\x65\163\163\x69\157\156\111\x6e\144\x65\x78\76" . $vq[0] . "\x3c\x2f\x73\141\155\154\160\72\x53\x65\x73\163\151\157\x6e\111\156\144\x65\x78\x3e";
        fl:
        $yT .= "\x3c\x2f\163\141\x6d\x6c\160\x3a\x4c\x6f\x67\x6f\x75\x74\122\x65\x71\x75\145\163\x74\76";
        if (!(empty($Ds) || $Ds == "\110\164\164\x70\122\x65\144\x69\x72\x65\143\164")) {
            goto Sk;
        }
        $LE = gzdeflate($yT);
        $JH = base64_encode($LE);
        $KP = urlencode($JH);
        $yT = $KP;
        Sk:
        return $yT;
    }
    public static function createLogoutResponse($ZK, $e8, $qd, $Ds = "\110\x74\x74\x70\x52\x65\x64\x69\162\145\x63\x74")
    {
        $yT = "\74\77\170\155\154\40\166\145\x72\163\151\157\x6e\x3d\42\x31\56\60\x22\x20\145\x6e\143\157\144\151\156\x67\75\x22\125\x54\x46\x2d\x38\x22\77\x3e" . "\74\163\x61\x6d\x6c\x70\72\114\x6f\147\157\165\164\122\x65\x73\x70\157\156\163\145\40\x78\x6d\x6c\x6e\x73\x3a\163\x61\x6d\x6c\x70\x3d\42\x75\x72\x6e\72\x6f\x61\x73\151\x73\x3a\156\x61\155\145\163\72\x74\x63\x3a\123\101\x4d\x4c\72\62\x2e\60\72\160\162\157\164\157\143\x6f\x6c\x22\40\x78\x6d\x6c\156\163\72\x73\141\155\154\75\42\165\x72\x6e\72\x6f\141\x73\151\163\x3a\156\141\155\x65\x73\x3a\x74\x63\x3a\123\101\115\x4c\x3a\x32\x2e\x30\x3a\x61\x73\163\x65\162\164\x69\157\156\42\40" . "\x49\104\x3d\42" . self::generateID() . "\42\x20" . "\126\x65\x72\163\x69\157\x6e\75\x22\x32\x2e\x30\42\40\x49\x73\x73\165\145\x49\156\163\x74\141\x6e\x74\x3d\x22" . self::generateTimestamp() . "\x22\x20" . "\104\145\163\164\151\x6e\x61\164\151\157\x6e\x3d\42" . $qd . "\x22\40" . "\111\x6e\122\x65\163\160\157\156\x73\145\x54\157\75\42" . $ZK . "\42\76" . "\74\163\x61\x6d\x6c\x3a\111\x73\x73\x75\x65\x72\40\170\x6d\154\x6e\x73\x3a\x73\x61\155\154\x3d\x22\x75\x72\156\x3a\x6f\x61\x73\151\x73\x3a\156\x61\155\145\163\x3a\164\143\x3a\x53\x41\115\x4c\x3a\x32\56\x30\72\141\163\x73\145\x72\164\151\x6f\156\x22\x3e" . $e8 . "\x3c\57\163\141\155\154\72\111\x73\163\x75\145\162\x3e" . "\74\163\141\x6d\154\160\72\123\164\x61\x74\x75\163\76\x3c\163\141\155\154\160\72\x53\x74\x61\x74\x75\x73\103\157\x64\145\x20\126\x61\154\165\x65\75\42\165\x72\156\x3a\157\141\163\x69\163\x3a\156\141\x6d\145\x73\x3a\164\x63\x3a\123\101\x4d\114\x3a\62\56\60\x3a\x73\164\x61\x74\x75\x73\x3a\123\165\x63\143\x65\x73\163\x22\x2f\x3e\74\57\x73\141\x6d\x6c\160\72\123\x74\x61\x74\x75\x73\76\x3c\x2f\x73\x61\x6d\x6c\160\72\114\157\x67\157\165\x74\122\x65\x73\x70\157\x6e\x73\x65\x3e";
        if (!(empty($Ds) || $Ds == "\110\164\164\x70\122\x65\144\x69\x72\x65\143\x74")) {
            goto gr;
        }
        $LE = gzdeflate($yT);
        $JH = base64_encode($LE);
        $KP = urlencode($JH);
        $yT = $KP;
        gr:
        return $yT;
    }
    public static function generateTimestamp($aG = NULL)
    {
        if (!($aG === NULL)) {
            goto PO;
        }
        $aG = time();
        PO:
        return gmdate("\x59\x2d\155\x2d\144\134\x54\110\72\x69\72\163\134\x5a", $aG);
    }
    public static function xpQuery(DOMNode $gC, $mr)
    {
        static $OR = NULL;
        if ($gC instanceof DOMDocument) {
            goto W9;
        }
        $rq = $gC->ownerDocument;
        goto g3;
        W9:
        $rq = $gC;
        g3:
        if (!($OR === NULL || !$OR->document->isSameNode($rq))) {
            goto nz;
        }
        $OR = new DOMXPath($rq);
        $OR->registerNamespace("\x73\157\141\160\55\145\x6e\x76", "\x68\164\164\x70\x3a\57\x2f\x73\143\x68\x65\155\x61\x73\x2e\x78\x6d\x6c\x73\x6f\141\x70\56\x6f\162\x67\57\x73\x6f\x61\x70\x2f\145\156\x76\145\154\157\x70\x65\57");
        $OR->registerNamespace("\163\x61\x6d\154\137\x70\162\x6f\x74\x6f\143\x6f\154", "\x75\162\156\72\157\141\x73\151\163\72\x6e\141\155\x65\163\72\164\143\x3a\123\101\x4d\x4c\72\x32\x2e\x30\x3a\160\x72\157\164\x6f\143\x6f\x6c");
        $OR->registerNamespace("\163\141\155\154\137\141\163\x73\x65\x72\164\x69\x6f\156", "\x75\x72\156\x3a\157\141\x73\x69\x73\x3a\x6e\x61\x6d\145\x73\72\x74\143\x3a\x53\x41\115\x4c\x3a\x32\x2e\x30\72\141\x73\163\145\162\164\151\x6f\156");
        $OR->registerNamespace("\163\141\x6d\x6c\x5f\x6d\x65\x74\141\x64\x61\x74\141", "\x75\x72\156\72\157\141\163\151\x73\72\x6e\141\x6d\x65\163\x3a\x74\143\x3a\123\x41\x4d\114\x3a\x32\x2e\x30\x3a\x6d\145\164\141\x64\x61\x74\141");
        $OR->registerNamespace("\144\x73", "\x68\164\164\x70\x3a\x2f\57\x77\x77\167\x2e\x77\x33\x2e\x6f\162\147\57\62\60\x30\x30\57\60\x39\x2f\x78\155\154\x64\x73\x69\x67\43");
        $OR->registerNamespace("\x78\x65\156\x63", "\x68\164\164\x70\72\x2f\x2f\167\167\x77\56\x77\63\56\x6f\x72\x67\x2f\62\60\60\61\57\x30\x34\x2f\170\x6d\x6c\x65\156\x63\x23");
        nz:
        $nj = $OR->query($mr, $gC);
        $tH = array();
        $Eh = 0;
        pm:
        if (!($Eh < $nj->length)) {
            goto mw;
        }
        $tH[$Eh] = $nj->item($Eh);
        k6:
        $Eh++;
        goto pm;
        mw:
        return $tH;
    }
    public static function parseNameId(DOMElement $DG)
    {
        $tH = array("\126\x61\154\x75\145" => trim($DG->textContent));
        foreach (array("\x4e\141\155\145\x51\x75\141\154\x69\x66\151\x65\x72", "\x53\x50\x4e\141\x6d\145\x51\x75\141\x6c\151\x66\151\145\162", "\106\x6f\x72\155\141\x74") as $yD) {
            if (!$DG->hasAttribute($yD)) {
                goto wr;
            }
            $tH[$yD] = $DG->getAttribute($yD);
            wr:
            F7:
        }
        P2:
        return $tH;
    }
    public static function xsDateTimeToTimestamp($lw)
    {
        $gG = array();
        $zv = "\x2f\x5e\x28\134\144\x5c\144\x5c\144\x5c\x64\x29\x2d\x28\x5c\144\x5c\144\51\x2d\50\x5c\x64\x5c\144\x29\x54\x28\x5c\x64\134\x64\x29\72\x28\134\144\134\x64\51\72\x28\x5c\x64\134\x64\x29\50\x3f\x3a\134\x2e\134\x64\53\x29\77\132\44\57\x44";
        if (!(preg_match($zv, $lw, $gG) == 0)) {
            goto Pt;
        }
        echo sprintf("\156\x76\x61\x6c\151\x64\40\123\101\x4d\114\62\40\x74\151\x6d\x65\163\x74\x61\155\160\40\160\x61\x73\163\x65\144\40\164\157\x20\170\163\x44\141\164\145\124\x69\155\x65\124\157\124\151\155\x65\x73\164\141\155\x70\72\40" . $lw);
        die;
        Pt:
        $a_ = intval($gG[1]);
        $gW = intval($gG[2]);
        $bA = intval($gG[3]);
        $q7 = intval($gG[4]);
        $du = intval($gG[5]);
        $Cz = intval($gG[6]);
        $vE = gmmktime($q7, $du, $Cz, $gW, $bA, $a_);
        return $vE;
    }
    public static function extractStrings(DOMElement $sT, $El, $rk)
    {
        $tH = array();
        $gC = $sT->firstChild;
        Hd:
        if (!($gC !== NULL)) {
            goto HR;
        }
        if (!($gC->namespaceURI !== $El || $gC->localName !== $rk)) {
            goto RM;
        }
        goto iS;
        RM:
        $tH[] = trim($gC->textContent);
        iS:
        $gC = $gC->nextSibling;
        goto Hd;
        HR:
        return $tH;
    }
    public static function validateElement(DOMElement $Kg)
    {
        $H8 = new XMLSecurityDSig();
        $H8->idKeys[] = "\x49\x44";
        $A3 = self::xpQuery($Kg, "\x2e\x2f\x64\x73\72\x53\x69\x67\x6e\141\164\165\x72\145");
        if (count($A3) === 0) {
            goto oP;
        }
        if (count($A3) > 1) {
            goto Aj;
        }
        goto yP;
        oP:
        return FALSE;
        goto yP;
        Aj:
        echo sprintf("\130\x4d\x4c\x53\x65\x63\72\x20\155\157\162\145\40\x74\x68\x61\156\40\x6f\x6e\145\x20\163\x69\x67\x6e\x61\x74\165\x72\x65\x20\145\x6c\145\155\145\156\x74\40\151\x6e\40\162\157\157\x74\x2e");
        die;
        yP:
        $A3 = $A3[0];
        $H8->sigNode = $A3;
        $H8->canonicalizeSignedInfo();
        if ($H8->validateReference()) {
            goto yj;
        }
        echo sprintf("\x58\x4d\x4c\x73\145\143\72\40\x64\x69\147\145\x73\x74\x20\x76\141\x6c\x69\x64\141\164\x69\157\x6e\40\146\141\x69\x6c\x65\x64");
        die;
        yj:
        $KC = FALSE;
        foreach ($H8->getValidatedNodes() as $tO) {
            if ($tO->isSameNode($Kg)) {
                goto EZ;
            }
            if ($Kg->parentNode instanceof DOMDocument && $tO->isSameNode($Kg->ownerDocument)) {
                goto a0;
            }
            goto YU;
            EZ:
            $KC = TRUE;
            goto bs;
            goto YU;
            a0:
            $KC = TRUE;
            goto bs;
            YU:
            yR:
        }
        bs:
        if ($KC) {
            goto et;
        }
        echo sprintf("\x58\115\114\123\x65\143\72\40\x54\150\145\x20\162\x6f\x6f\164\40\x65\x6c\145\155\145\x6e\164\x20\x69\163\x20\156\157\x74\40\163\151\147\156\145\x64\x2e");
        die;
        et:
        $VZ = array();
        foreach (self::xpQuery($A3, "\x2e\x2f\144\163\x3a\113\145\171\111\156\146\x6f\x2f\x64\163\x3a\130\65\x30\x39\104\141\164\141\57\144\x73\72\130\65\x30\x39\103\145\x72\x74\x69\x66\151\143\141\x74\x65") as $gD) {
            $T9 = trim($gD->textContent);
            $T9 = str_replace(array("\xd", "\12", "\x9", "\x20"), '', $T9);
            $VZ[] = $T9;
            dW:
        }
        d9:
        $tH = array("\x53\x69\x67\156\141\164\x75\162\145" => $H8, "\x43\145\x72\164\151\146\151\x63\x61\164\x65\x73" => $VZ);
        return $tH;
    }
    public static function validateSignature(array $Da, XMLSecurityKey $Ej)
    {
        $H8 = $Da["\123\151\147\x6e\141\x74\x75\x72\x65"];
        $wj = self::xpQuery($H8->sigNode, "\x2e\x2f\x64\163\72\x53\x69\147\156\x65\144\x49\x6e\146\157\57\144\163\x3a\123\x69\x67\156\x61\x74\x75\162\145\x4d\145\164\x68\x6f\x64");
        if (!empty($wj)) {
            goto e_;
        }
        echo sprintf("\x4d\x69\x73\x73\151\156\147\x20\x53\x69\147\156\x61\x74\165\x72\x65\x4d\x65\164\150\157\x64\x20\145\154\145\x6d\x65\x6e\x74");
        die;
        e_:
        $wj = $wj[0];
        if ($wj->hasAttribute("\101\154\147\x6f\x72\151\164\x68\155")) {
            goto KP;
        }
        echo sprintf("\x4d\151\x73\163\151\x6e\x67\40\x41\x6c\147\157\x72\x69\x74\150\155\x2d\141\164\164\162\151\x62\165\x74\145\x20\x6f\156\x20\123\151\x67\x6e\x61\x74\165\162\145\x4d\145\164\150\157\x64\x20\145\154\x65\x6d\x65\156\x74\x2e");
        die;
        KP:
        $lM = $wj->getAttribute("\x41\x6c\147\157\x72\x69\164\150\x6d");
        if (!($Ej->type === XMLSecurityKey::RSA_SHA1 && $lM !== $Ej->type)) {
            goto pP;
        }
        $Ej = self::castKey($Ej, $lM);
        pP:
        if ($H8->verify($Ej)) {
            goto l1;
        }
        echo sprintf("\125\x6e\141\142\154\x65\40\x74\157\40\x76\x61\x6c\x69\144\141\164\145\x20\x53\151\147\x6e\x61\x74\x75\162\145");
        die;
        l1:
    }
    public static function castKey(XMLSecurityKey $Ej, $uK, $dQ = "\x70\165\142\x6c\151\x63")
    {
        if (!($Ej->type === $uK)) {
            goto cy;
        }
        return $Ej;
        cy:
        $X3 = openssl_pkey_get_details($Ej->key);
        if (!($X3 === FALSE)) {
            goto WE_;
        }
        echo sprintf("\x55\156\x61\142\x6c\145\40\x74\x6f\40\x67\x65\164\x20\153\x65\x79\40\144\145\164\141\x69\154\x73\x20\146\x72\157\x6d\x20\x58\115\114\x53\x65\143\165\162\x69\x74\171\x4b\145\x79\x2e");
        die;
        WE_:
        if (isset($X3["\x6b\145\171"])) {
            goto Ktp;
        }
        echo sprintf("\115\x69\163\163\151\156\147\x20\153\145\x79\x20\x69\156\40\x70\165\142\154\151\143\40\x6b\145\x79\x20\144\x65\164\141\151\x6c\x73\56");
        die;
        Ktp:
        $t8 = new XMLSecurityKey($uK, array("\x74\171\x70\x65" => $dQ));
        $t8->loadKey($X3["\153\x65\171"]);
        return $t8;
    }
    public static function processResponse($tJ, $f6, $ca, SAML2SPResponse $gj, $p3, $cL)
    {
        $pt = current($gj->getAssertions());
        $lc = $pt->getNotBefore();
        if (!($lc !== NULL && $lc > time() + 60)) {
            goto vdd;
        }
        wp_die("\x52\145\x63\145\x69\x76\x65\144\x20\141\x6e\40\141\x73\x73\145\x72\x74\151\157\x6e\40\x74\x68\141\x74\40\x69\163\x20\166\141\x6c\x69\144\x20\151\x6e\40\164\150\x65\40\146\165\164\x75\162\145\56\x20\103\x68\x65\143\x6b\40\x63\x6c\157\143\153\x20\x73\171\x6e\x63\x68\x72\157\x6e\151\172\141\164\151\x6f\x6e\40\157\x6e\40\x49\144\x50\40\141\x6e\144\x20\x53\120\56");
        vdd:
        $uC = $pt->getNotOnOrAfter();
        if (!($uC !== NULL && $uC <= time() - 60)) {
            goto poQ;
        }
        wp_die("\122\145\x63\145\151\x76\x65\144\x20\141\156\x20\x61\x73\163\x65\x72\x74\151\x6f\x6e\40\164\150\141\164\x20\150\x61\163\40\145\170\x70\151\x72\x65\144\56\40\x43\150\x65\x63\153\x20\143\154\x6f\x63\x6b\x20\163\171\x6e\143\150\x72\157\x6e\x69\172\x61\164\x69\157\156\x20\157\x6e\x20\111\144\x50\x20\x61\x6e\144\40\x53\x50\x2e");
        poQ:
        $pb = $pt->getSessionNotOnOrAfter();
        if (!($pb !== NULL && $pb <= time() - 60)) {
            goto ixL;
        }
        wp_die("\122\x65\x63\145\x69\166\145\x64\40\x61\x6e\40\141\x73\163\x65\162\x74\x69\x6f\156\40\x77\151\164\150\x20\141\40\163\145\163\x73\151\157\x6e\40\x74\150\x61\x74\x20\150\x61\x73\40\145\x78\160\x69\x72\x65\x64\56\40\103\150\x65\x63\153\x20\x63\x6c\x6f\143\x6b\x20\163\171\156\143\x68\x72\x6f\x6e\x69\172\141\x74\x69\157\x6e\x20\x6f\x6e\x20\x49\x64\120\x20\141\x6e\144\40\x53\x50\56");
        ixL:
        $M_ = $gj->getDestination();
        if (!(substr($M_, -1) == "\57")) {
            goto fDU;
        }
        $M_ = substr($M_, 0, -1);
        fDU:
        if (!(substr($tJ, -1) == "\x2f")) {
            goto SlC;
        }
        $tJ = substr($tJ, 0, -1);
        SlC:
        if (!($M_ !== NULL && $M_ !== $tJ)) {
            goto pon;
        }
        echo "\104\145\163\164\x69\x6e\x61\164\x69\x6f\156\x20\x69\x6e\x20\162\x65\x73\x70\x6f\x6e\163\145\40\144\157\145\x73\156\x27\x74\x20\155\x61\x74\x63\150\x20\x74\150\x65\40\x63\165\162\162\x65\156\x74\x20\125\122\114\56\x20\x44\145\x73\164\151\x6e\141\x74\x69\x6f\x6e\x20\x69\163\x20\x22" . htmlspecialchars($M_) . "\42\54\40\x63\165\162\x72\145\x6e\164\40\x55\122\x4c\x20\151\163\40\42" . htmlspecialchars($tJ) . "\x22\56";
        die;
        pon:
        $hc = self::checkSign($f6, $ca, $p3, $cL);
        return $hc;
    }
    public static function checkSign($f6, $ca, $p3, $cL)
    {
        $VZ = $ca["\x43\x65\162\164\x69\x66\151\143\141\164\145\x73"];
        if (count($VZ) === 0) {
            goto MV1;
        }
        $o4 = array();
        $o4[] = $f6;
        $oO = self::findCertificate($o4, $VZ, $cL);
        if (!($oO == false)) {
            goto yRq;
        }
        return false;
        yRq:
        goto klQ;
        MV1:
        $fl = maybe_unserialize(get_option("\163\x61\x6d\154\137\170\65\60\x39\x5f\x63\x65\x72\x74\151\146\x69\x63\141\x74\x65"));
        $oO = $fl[$p3];
        klQ:
        $vv = NULL;
        $Ej = new XMLSecurityKey(XMLSecurityKey::RSA_SHA1, array("\x74\171\x70\145" => "\160\x75\142\x6c\x69\x63"));
        $Ej->loadKey($oO);
        try {
            self::validateSignature($ca, $Ej);
            return TRUE;
        } catch (Exception $L2) {
            $vv = $L2;
        }
        if ($vv !== NULL) {
            goto tev;
        }
        return FALSE;
        goto wH6;
        tev:
        throw $vv;
        wH6:
    }
    public static function validateIssuerAndAudience($am, $VB, $Jt, $cL)
    {
        $e8 = current($am->getAssertions())->getIssuer();
        $pt = current($am->getAssertions());
        $tF = $pt->getValidAudiences();
        if (strcmp($Jt, $e8) === 0) {
            goto q1G;
        }
        if ($cL == "\x74\145\163\x74\x56\141\154\x69\144\141\x74\145" or $cL == "\x74\145\x73\164\116\x65\167\103\145\162\x74\151\x66\151\x63\x61\164\x65") {
            goto aAF;
        }
        wp_die("\127\145\40\143\x6f\x75\154\144\40\156\157\164\40\x73\151\147\156\x20\171\x6f\165\x20\151\x6e\56\x20\120\x6c\x65\141\163\145\40\x63\x6f\156\164\141\143\x74\x20\x79\157\165\162\40\x41\x64\155\151\x6e\x69\163\x74\162\141\x74\157\162", "\105\x72\162\x6f\162\40\72\111\x73\x73\x75\145\x72\x20\x63\x61\x6e\156\157\x74\x20\x62\x65\x20\x76\145\x72\x69\x66\151\145\144");
        goto s_M;
        aAF:
        ob_end_clean();
        $w0 = mo_options_error_constants::Error_issuer_not_verfied;
        $OF = mo_options_error_constants::Cause_issuer_not_verfied;
        echo "\x3c\144\151\x76\40\x73\164\x79\154\145\75\42\x66\157\156\164\55\x66\x61\155\x69\x6c\x79\72\x43\141\154\151\142\x72\151\73\160\141\144\144\151\156\x67\72\x30\x20\63\45\x3b\42\x3e";
        echo "\74\x64\x69\166\x20\163\x74\x79\x6c\x65\75\x22\143\x6f\x6c\157\x72\72\40\43\141\71\x34\x34\64\62\73\142\x61\x63\x6b\x67\162\157\x75\156\144\x2d\143\157\154\x6f\x72\x3a\40\x23\x66\x32\x64\145\x64\145\73\x70\x61\144\144\151\156\x67\72\x20\x31\x35\160\x78\73\155\x61\162\147\x69\x6e\x2d\142\157\x74\164\x6f\x6d\x3a\x20\x32\60\x70\x78\73\164\145\170\x74\55\x61\x6c\x69\147\156\x3a\143\x65\x6e\164\x65\x72\x3b\x62\x6f\x72\x64\145\x72\72\61\160\170\40\163\x6f\154\151\x64\40\43\105\x36\102\63\x42\x32\x3b\x66\x6f\156\164\55\x73\151\x7a\x65\x3a\x31\x38\160\164\73\42\x3e\40\x45\122\122\x4f\122\x3c\x2f\144\151\x76\76\15\12\11\11\11\40\74\144\x69\x76\40\163\164\171\x6c\145\x3d\42\x63\157\154\x6f\x72\x3a\40\x23\x61\71\64\x34\x34\x32\73\x66\157\x6e\164\55\x73\x69\172\145\72\x31\64\x70\x74\73\x20\155\x61\x72\x67\x69\156\x2d\x62\157\x74\x74\157\x6d\72\x32\x30\x70\x78\x3b\x22\76\x3c\160\76\74\163\164\x72\x6f\156\x67\x3e\x45\162\162\x6f\x72\x3a\x20\x3c\x2f\163\164\162\x6f\x6e\x67\76\x49\163\x73\x75\145\x72\40\143\x61\x6e\x6e\157\164\x20\142\x65\40\x76\145\162\x69\x66\151\x65\144\56\74\57\x70\x3e\xd\xa\11\11\11\x20\74\x70\76\x50\x6c\x65\x61\x73\145\40\x63\x6f\x6e\164\x61\143\164\40\x79\157\165\x72\x20\141\144\x6d\x69\x6e\x69\163\164\x72\x61\x74\x6f\x72\40\141\x6e\144\x20\x72\x65\160\157\162\x74\40\164\150\145\40\146\x6f\154\154\x6f\167\151\x6e\x67\40\x65\x72\162\157\162\72\x3c\57\x70\76\xd\xa\x9\x9\11\x20\74\x70\x3e\74\x73\164\x72\157\156\147\76\x50\157\x73\x73\x69\x62\x6c\x65\40\103\x61\165\163\x65\x3a\x20\x3c\57\x73\x74\x72\157\x6e\147\76\111\x64\x50\x20\105\x6e\x74\151\164\x79\40\x49\104\40\x63\x6f\x6e\x66\151\147\x75\x72\145\x64\x20\151\156\40\164\x68\145\40\x70\154\x75\147\x69\x6e\x20\151\x73\40\151\156\x63\157\162\162\145\143\164\x3c\57\x70\76\15\xa\x9\11\11\x20\x3c\160\x3e\x3c\163\164\x72\x6f\x6e\x67\76\x45\156\164\151\x74\x79\x20\111\x44\40\151\x6e\x20\x53\x41\x4d\114\x20\x52\145\x73\160\157\156\163\x65\72\x20\x3c\x2f\x73\164\162\x6f\x6e\x67\x3e" . $e8 . "\74\160\x3e\xd\12\x9\11\x9\40\x3c\160\x3e\x3c\163\164\162\157\156\147\x3e\x45\x6e\164\151\x74\x79\x20\x49\104\x20\143\157\x6e\x66\151\x67\x75\162\145\x64\x20\151\156\40\x74\150\x65\40\160\x6c\x75\x67\x69\156\x3a\40\74\57\x73\x74\162\157\156\147\76" . $Jt . "\x3c\57\x70\76\15\xa\11\11\11\40\x3c\160\x3e\x3c\163\x74\162\157\156\147\x3e\123\157\x6c\165\164\151\x6f\156\x3a\x3c\57\x73\164\162\x6f\x6e\x67\76\x3c\x2f\x70\76\xd\xa\11\11\x9\x9\74\x6f\154\76\xd\12\x9\11\x9\x9\x9\74\x6c\x69\76\103\157\160\171\40\x74\x68\x65\40\x45\x6e\164\151\x74\x79\x20\111\x44\x20\x6f\146\40\x53\101\115\114\40\x52\x65\163\x70\157\x6e\163\x65\40\x66\162\157\155\x20\x61\142\157\x76\x65\40\141\x6e\144\40\x70\x61\163\164\145\40\x69\x74\40\x69\x6e\x20\105\156\x74\x69\x74\171\x20\111\x44\x20\157\162\x20\111\163\x73\165\145\x72\40\146\x69\145\154\x64\40\165\x6e\x64\x65\162\x20\x53\145\x72\x76\x69\x63\145\x20\x50\x72\157\x76\x69\x64\x65\162\40\123\x65\x74\x75\160\40\x74\141\x62\x2e\74\x2f\154\x69\x3e\xd\12\x9\x9\11\x9\x3c\x2f\157\154\76\15\12\11\x9\x9\x20\x3c\x2f\x64\x69\x76\x3e\xd\xa\11\x9\11\40\74\x64\151\166\40\x73\164\171\x6c\145\x3d\42\x6d\x61\162\147\151\156\72\63\45\x3b\144\151\163\160\x6c\x61\x79\72\x62\154\157\x63\153\73\x74\145\x78\164\55\141\154\151\x67\156\72\x63\145\x6e\164\x65\162\x3b\42\x3e\xd\xa\x9\x9\11\40\74\144\x69\x76\40\x73\164\x79\154\x65\x3d\42\155\x61\162\x67\x69\156\72\63\45\73\x64\151\163\x70\154\x61\x79\x3a\142\x6c\x6f\x63\x6b\73\164\145\x78\164\55\141\x6c\x69\x67\156\x3a\x63\x65\156\164\145\x72\x3b\x22\x3e\74\151\x6e\160\x75\164\x20\x73\164\171\x6c\145\x3d\x22\x70\x61\x64\144\151\x6e\147\72\x31\45\x3b\x77\151\144\x74\x68\72\61\x30\60\x70\170\x3b\x62\141\143\x6b\x67\x72\x6f\x75\x6e\x64\72\40\x23\x30\x30\x39\x31\x43\104\x20\x6e\x6f\x6e\x65\x20\x72\145\x70\x65\141\164\x20\163\x63\162\157\154\154\40\60\45\x20\60\x25\x3b\143\x75\x72\163\157\x72\x3a\x20\x70\x6f\151\x6e\x74\x65\162\x3b\146\157\x6e\x74\55\x73\151\x7a\x65\72\61\x35\160\170\73\142\157\x72\144\x65\162\55\167\151\144\x74\150\x3a\40\x31\x70\170\x3b\142\x6f\x72\x64\x65\x72\55\x73\164\x79\x6c\145\x3a\x20\163\157\154\x69\x64\x3b\x62\157\x72\144\145\x72\55\x72\141\144\151\165\x73\x3a\x20\x33\160\x78\73\x77\x68\151\164\x65\x2d\163\160\141\x63\145\72\x20\x6e\157\167\162\x61\x70\73\142\157\x78\x2d\x73\151\x7a\x69\x6e\x67\x3a\40\x62\157\162\x64\x65\162\x2d\x62\x6f\x78\73\142\157\162\x64\145\x72\x2d\143\157\x6c\157\x72\72\40\x23\60\x30\x37\x33\x41\101\73\x62\157\x78\55\163\x68\141\144\x6f\x77\72\x20\x30\160\170\40\61\160\x78\x20\60\160\x78\40\x72\x67\142\x61\x28\x31\62\60\x2c\x20\62\60\x30\54\x20\x32\x33\x30\54\x20\x30\56\x36\x29\x20\151\x6e\x73\145\164\x3b\143\x6f\x6c\x6f\x72\x3a\40\x23\106\106\x46\x3b\x22\164\171\x70\145\75\42\x62\165\164\x74\157\156\42\x20\x76\141\x6c\165\x65\75\42\104\157\x6e\x65\42\40\x6f\x6e\103\x6c\x69\143\x6b\75\42\163\x65\x6c\x66\x2e\x63\x6c\157\163\145\x28\x29\x3b\42\x3e\74\x2f\144\151\x76\76";
        mo_saml_download_logs($w0, $OF);
        die;
        s_M:
        goto mTd;
        q1G:
        if (empty($tF)) {
            goto vlz;
        }
        if (in_array($VB, $tF, TRUE)) {
            goto RGw;
        }
        if ($cL == "\x74\x65\163\x74\126\141\x6c\151\x64\141\x74\x65" or $cL == "\x74\x65\163\164\x4e\x65\x77\103\145\162\164\x69\146\151\x63\x61\x74\145") {
            goto dd4;
        }
        wp_die("\127\x65\40\x63\x6f\165\x6c\x64\x20\x6e\x6f\164\40\x73\151\147\x6e\40\171\x6f\165\40\x69\x6e\56\40\120\x6c\x65\x61\x73\x65\40\143\157\x6e\164\141\x63\x74\x20\171\157\165\x72\x20\101\x64\155\x69\x6e\151\x73\164\162\141\x74\157\162", "\105\x72\162\x6f\162\40\x3a\111\x6e\x76\x61\154\x69\144\x20\101\165\x64\151\145\x6e\143\x65\40\125\x52\111");
        goto N8X;
        dd4:
        $w0 = mo_options_error_constants::Error_invalid_audience;
        $OF = mo_options_error_constants::Cause_invalid_audience;
        ob_end_clean();
        echo "\74\x64\151\166\x20\x73\164\171\154\x65\x3d\x22\146\x6f\x6e\x74\x2d\x66\141\x6d\151\x6c\171\x3a\x43\141\154\151\142\x72\151\73\x70\141\144\144\x69\x6e\x67\72\x30\x20\63\45\x3b\x22\76";
        echo "\x3c\144\151\x76\x20\163\x74\171\x6c\x65\x3d\42\x63\157\154\x6f\x72\72\x20\x23\141\x39\64\x34\64\62\x3b\142\141\143\x6b\x67\x72\x6f\165\156\144\x2d\143\x6f\x6c\x6f\x72\x3a\40\x23\146\x32\144\x65\144\x65\73\160\x61\144\144\x69\x6e\147\72\40\61\65\160\x78\x3b\x6d\x61\x72\147\151\x6e\55\x62\x6f\164\x74\x6f\x6d\72\x20\x32\x30\x70\x78\x3b\x74\145\170\x74\55\x61\154\x69\x67\x6e\72\143\x65\156\164\145\x72\73\142\x6f\x72\x64\145\162\72\x31\160\170\x20\x73\157\154\151\x64\40\x23\105\x36\102\63\x42\x32\x3b\x66\157\156\x74\55\x73\x69\x7a\x65\x3a\61\70\160\164\73\42\x3e\x20\105\122\x52\117\x52\74\57\144\151\x76\x3e\15\12\40\x20\x20\40\40\x20\40\x20\40\x20\x20\40\x20\40\x20\40\40\40\40\40\74\144\x69\x76\x20\x73\164\x79\154\x65\75\x22\143\157\x6c\157\x72\72\40\x23\141\71\x34\x34\x34\62\73\x66\x6f\x6e\164\x2d\163\x69\172\145\72\x31\x34\160\164\x3b\x20\155\x61\162\x67\151\x6e\x2d\142\x6f\x74\164\157\155\72\62\60\x70\170\73\x22\x3e\74\x70\76\x3c\x73\x74\162\x6f\156\147\x3e\x45\162\162\x6f\162\72\x20\x3c\x2f\x73\x74\x72\157\156\x67\x3e\x49\x6e\x76\x61\x6c\151\144\x20\101\x75\x64\x69\x65\x6e\143\x65\40\x55\122\x49\x2e\x3c\57\160\76\xd\xa\40\40\40\40\x20\x20\x20\x20\x20\40\40\40\x20\x20\40\40\40\x20\x20\x20\x3c\160\76\120\154\x65\141\x73\145\x20\143\x6f\x6e\164\141\x63\x74\x20\171\157\x75\x72\40\141\x64\x6d\x69\x6e\x69\163\164\x72\141\x74\x6f\162\40\141\156\x64\x20\162\145\160\x6f\162\x74\40\x74\x68\145\x20\x66\157\x6c\154\x6f\x77\x69\156\x67\x20\145\x72\x72\157\162\72\x3c\x2f\160\76\xd\xa\40\40\40\x20\x20\x20\40\40\40\40\x20\40\40\x20\40\40\40\x20\x20\x20\74\160\76\74\163\x74\x72\157\156\x67\76\x50\x6f\163\163\x69\142\154\145\40\x43\141\165\x73\x65\72\40\x3c\x2f\163\164\162\x6f\x6e\147\76\x54\x68\145\x20\166\141\154\x75\x65\x20\157\x66\40\x27\101\165\x64\151\x65\156\x63\x65\x20\125\122\x49\47\40\x66\x69\x65\x6c\x64\x20\157\156\x20\111\x64\x65\156\x74\x69\164\x79\40\x50\x72\x6f\x76\151\144\x65\162\47\x73\x20\163\x69\x64\145\40\151\x73\x20\x69\x6e\143\x6f\x72\x72\x65\x63\x74\74\57\160\x3e\15\12\x20\x20\x20\40\40\40\40\40\40\40\40\x20\40\40\x20\40\x20\40\40\40\74\160\76\105\x78\x70\x65\143\164\x65\x64\40\x6f\x6e\145\40\x6f\x66\40\x74\x68\x65\40\101\x75\144\x69\145\x6e\x63\145\163\40\164\x6f\40\x62\x65\x3a\x20" . $VB . "\x3c\x70\76\xd\xa\x9\x9\11\11\11\74\x70\x3e\74\163\164\x72\x6f\x6e\147\76\x53\x6f\154\x75\x74\151\x6f\156\x3a\x3c\57\x73\x74\162\157\x6e\x67\x3e\x3c\57\x70\76\xd\12\11\11\11\11\x9\x3c\157\x6c\76\xd\12\11\11\x9\x9\x9\11\74\x6c\x69\x3e\103\157\160\171\x20\x74\x68\x65\x20\105\x78\x70\145\x63\164\x65\x64\40\101\165\x64\151\145\156\x63\145\40\x55\x52\111\x20\146\x72\157\x6d\x20\141\142\157\x76\145\x20\x61\156\x64\x20\160\141\x73\164\x65\x20\x69\164\40\151\x6e\40\x74\150\x65\x20\101\165\144\x69\x65\156\x63\145\40\125\x52\111\40\146\151\145\154\144\40\141\164\40\x49\144\x65\156\164\151\164\171\x20\120\x72\x6f\166\151\144\x65\x72\40\x73\151\144\145\x2e\74\x2f\x6c\151\x3e\15\12\x9\11\11\x9\11\74\x2f\x6f\154\x3e\xd\12\x9\11\11\11\x9\74\x2f\144\151\166\x3e\15\12\40\x20\x20\x20\x20\x20\40\x20\40\x20\x20\x20\40\40\x20\x20\40\x20\x20\x20\x3c\x64\x69\x76\x20\x73\x74\171\x6c\145\x3d\42\155\141\162\147\151\x6e\x3a\63\x25\73\x64\151\x73\x70\x6c\x61\171\x3a\142\x6c\157\143\153\x3b\x74\x65\170\164\x2d\141\154\x69\147\156\72\x63\x65\156\164\145\162\73\42\x3e\xd\xa\40\x20\x20\40\x20\40\x20\40\40\x20\x20\x20\40\40\40\40\40\x20\40\40\x3c\x64\151\166\40\163\164\x79\x6c\x65\x3d\x22\155\x61\x72\x67\151\156\x3a\63\45\73\x64\151\x73\160\x6c\x61\171\x3a\x62\x6c\x6f\143\x6b\x3b\x74\145\x78\x74\55\141\154\151\147\156\72\143\x65\156\164\x65\162\x3b\x22\76\74\x69\x6e\160\x75\x74\40\x73\164\171\x6c\145\75\42\160\x61\x64\144\x69\156\147\72\x31\x25\73\167\151\144\164\150\x3a\x31\x30\x30\160\170\73\x62\141\x63\x6b\147\162\x6f\x75\x6e\x64\72\40\43\x30\x30\x39\x31\x43\104\40\x6e\x6f\x6e\x65\40\x72\x65\x70\x65\x61\x74\x20\163\x63\162\x6f\154\x6c\40\60\45\40\x30\x25\73\143\x75\162\163\157\162\72\40\160\x6f\x69\156\x74\145\162\x3b\x66\157\x6e\164\x2d\x73\151\172\x65\72\x31\65\160\170\x3b\x62\x6f\162\x64\x65\162\x2d\x77\151\x64\164\x68\72\40\x31\160\x78\73\x62\x6f\x72\144\x65\x72\55\163\x74\171\x6c\x65\72\40\163\157\154\x69\144\x3b\x62\157\x72\144\x65\x72\55\x72\x61\x64\x69\x75\x73\x3a\40\x33\160\170\x3b\x77\x68\151\164\145\x2d\x73\x70\141\x63\145\x3a\40\x6e\157\167\162\141\160\73\x62\x6f\x78\55\163\151\x7a\x69\156\147\x3a\40\x62\x6f\162\x64\x65\x72\55\x62\157\170\73\x62\x6f\162\144\x65\162\x2d\x63\x6f\154\x6f\x72\72\40\43\x30\60\x37\x33\x41\x41\x3b\142\157\x78\55\163\x68\x61\x64\x6f\167\x3a\40\60\160\170\x20\x31\x70\x78\x20\x30\160\x78\40\x72\x67\x62\x61\x28\61\x32\x30\x2c\40\x32\x30\x30\x2c\40\x32\63\60\54\x20\x30\x2e\66\x29\40\x69\156\163\x65\x74\x3b\143\x6f\154\x6f\x72\72\x20\43\x46\106\106\x3b\x22\164\x79\x70\x65\x3d\42\142\x75\164\x74\157\156\x22\x20\x76\141\x6c\x75\145\x3d\42\104\157\156\x65\42\40\x6f\x6e\103\154\151\x63\x6b\75\x22\x73\x65\154\146\x2e\143\154\157\163\x65\50\x29\x3b\x22\76\74\x2f\x64\151\166\x3e";
        die;
        mo_saml_download_logs($w0, $OF);
        N8X:
        goto CH5;
        RGw:
        return TRUE;
        CH5:
        vlz:
        mTd:
    }
    private static function findCertificate(array $Ue, array $VZ, $cL)
    {
        $q1 = array();
        foreach ($VZ as $Km) {
            $gv = strtolower(sha1(base64_decode($Km)));
            if (in_array($gv, $Ue, TRUE)) {
                goto Zta;
            }
            $q1[] = $gv;
            return false;
            Zta:
            $do = "\55\x2d\55\55\x2d\x42\x45\107\x49\x4e\40\x43\x45\122\x54\111\x46\x49\103\101\x54\x45\x2d\x2d\x2d\55\x2d\xa" . chunk_split($Km, 64) . "\55\55\x2d\55\55\x45\116\x44\x20\x43\x45\x52\124\x49\x46\x49\103\x41\x54\x45\x2d\55\55\55\55\xa";
            return $do;
            IKz:
        }
        L6X:
        if ($cL == "\164\x65\163\164\126\141\154\151\144\x61\164\x65" or $cL == "\x74\x65\163\x74\116\145\167\x43\x65\162\164\x69\x66\151\x63\x61\164\145") {
            goto D9r;
        }
        wp_die("\127\145\40\143\157\165\x6c\144\40\156\x6f\x74\40\163\x69\x67\x6e\40\171\x6f\x75\40\x69\156\x2e\x20\x50\154\145\141\163\145\40\x63\x6f\x6e\x74\x61\x63\164\40\171\157\x75\x72\x20\101\144\155\151\156\x69\163\x74\162\141\164\157\x72", "\105\162\x72\157\162\40\72\x43\x65\x72\164\x69\x66\151\143\141\x74\x65\40\x6e\157\x74\x20\x66\x6f\165\x6e\x64");
        goto Rkc;
        D9r:
        $do = "\x2d\x2d\55\x2d\55\x42\x45\x47\x49\x4e\x20\x43\105\x52\x54\111\x46\x49\x43\101\x54\x45\55\x2d\55\x2d\x2d\x3c\142\162\x3e" . chunk_split($Km, 64) . "\74\142\x72\76\x2d\x2d\55\x2d\55\x45\116\104\40\x43\105\x52\124\x49\106\x49\103\101\124\105\55\x2d\x2d\x2d\x2d";
        echo "\x3c\144\x69\166\40\163\164\x79\154\145\x3d\x22\x66\x6f\x6e\x74\x2d\x66\141\x6d\151\154\171\x3a\103\141\x6c\x69\x62\162\151\73\160\x61\x64\144\x69\x6e\147\x3a\60\x20\x33\45\73\42\76";
        echo "\74\x64\x69\x76\x20\x73\164\x79\x6c\145\75\x22\143\x6f\154\x6f\x72\x3a\40\x23\141\x39\64\64\x34\x32\73\142\141\x63\x6b\x67\x72\x6f\165\156\x64\x2d\143\x6f\x6c\157\162\x3a\40\43\146\x32\144\x65\x64\x65\x3b\160\x61\x64\144\151\x6e\x67\72\x20\x31\65\x70\170\73\155\x61\x72\x67\151\x6e\x2d\142\x6f\164\x74\x6f\155\72\40\x32\x30\x70\x78\73\164\145\170\x74\x2d\x61\154\x69\x67\x6e\x3a\143\145\x6e\164\145\x72\73\142\x6f\162\144\145\162\72\x31\x70\170\x20\163\x6f\154\151\x64\40\43\x45\66\102\63\x42\62\73\146\157\156\x74\x2d\163\x69\x7a\145\x3a\61\70\x70\164\x3b\x22\76\x20\x45\x52\122\x4f\x52\x3c\x2f\144\151\x76\x3e\xd\xa\11\11\x9\x3c\x64\x69\166\40\163\164\171\154\145\x3d\42\x63\157\154\x6f\162\72\40\x23\141\x39\64\64\64\x32\73\146\x6f\x6e\164\x2d\163\x69\x7a\x65\x3a\61\64\160\x74\73\40\x6d\x61\x72\x67\x69\x6e\55\x62\157\164\x74\x6f\155\x3a\62\x30\x70\170\73\x22\x3e\74\x70\x3e\74\x73\164\162\x6f\x6e\147\x3e\105\162\162\x6f\x72\72\x20\74\57\163\x74\162\x6f\x6e\x67\76\x55\156\141\142\154\145\40\164\x6f\x20\x66\151\156\144\x20\x61\40\143\145\x72\x74\151\146\151\143\x61\164\x65\40\x6d\x61\164\x63\150\151\156\x67\x20\x74\x68\145\x20\x63\x6f\156\x66\151\147\x75\x72\x65\144\40\x66\151\x6e\x67\x65\162\x70\x72\151\x6e\164\56\74\57\160\76\15\12\11\x9\x9\x3c\x70\x3e\x50\154\x65\x61\163\145\40\x63\157\156\x74\x61\x63\164\x20\x79\x6f\165\x72\x20\x61\144\155\151\x6e\x69\163\164\162\141\164\157\x72\40\141\x6e\x64\40\x72\145\x70\x6f\x72\x74\40\x74\150\x65\40\x66\x6f\154\x6c\157\x77\151\156\x67\x20\x65\x72\x72\x6f\x72\72\74\x2f\x70\76\15\xa\11\11\x9\74\160\76\x3c\163\164\162\x6f\156\x67\x3e\120\x6f\163\163\151\x62\x6c\145\x20\x43\141\x75\163\x65\x3a\40\x3c\57\x73\x74\x72\x6f\156\x67\76\x27\130\56\65\x30\x39\40\x43\145\162\x74\151\x66\151\143\x61\164\x65\47\40\146\x69\145\154\144\x20\x69\x6e\40\x70\x6c\165\147\x69\156\40\144\157\145\163\x20\156\157\164\x20\155\141\164\143\150\x20\164\150\145\40\143\x65\x72\x74\x69\x66\151\143\141\164\145\40\146\x6f\165\156\x64\40\x69\156\x20\123\101\x4d\114\40\x52\145\x73\x70\x6f\156\163\145\x2e\x3c\57\x70\76\15\12\x9\11\11\x3c\x70\76\x3c\163\x74\x72\x6f\156\147\x3e\x43\145\162\164\x69\146\151\x63\141\x74\145\x20\x66\157\165\x6e\144\40\151\x6e\x20\123\101\x4d\114\40\122\x65\x73\x70\157\x6e\163\x65\x3a\x20\x3c\x2f\x73\x74\x72\x6f\x6e\x67\x3e\x3c\142\x72\76\x3c\142\x72\x3e" . $do . "\74\57\160\x3e\xd\12\11\11\x9\x9\x9\74\57\144\x69\166\x3e\15\xa\x9\x9\x9\11\11\74\x64\x69\x76\x20\x73\x74\x79\154\145\x3d\x22\x6d\x61\162\147\x69\x6e\x3a\x33\45\73\144\x69\163\160\x6c\x61\x79\72\142\154\x6f\143\153\73\164\145\170\x74\x2d\x61\154\x69\147\156\72\x63\x65\156\164\145\x72\73\42\x3e\15\xa\11\11\11\x9\11\74\x64\151\x76\40\163\x74\x79\x6c\x65\x3d\42\155\x61\x72\147\151\156\x3a\x33\x25\73\144\x69\163\x70\x6c\x61\x79\72\142\x6c\x6f\143\x6b\x3b\164\x65\x78\164\55\x61\x6c\x69\x67\x6e\72\143\145\x6e\x74\x65\162\73\42\76\x3c\x69\156\160\x75\x74\40\163\164\x79\154\145\75\x22\160\x61\x64\144\x69\156\x67\x3a\61\45\73\x77\151\144\164\x68\x3a\x31\x30\x30\160\x78\x3b\142\141\143\x6b\147\162\157\x75\156\144\x3a\40\43\60\x30\71\61\103\x44\40\x6e\x6f\156\x65\x20\162\145\x70\145\141\x74\x20\x73\143\x72\x6f\x6c\x6c\40\x30\x25\x20\60\x25\x3b\143\165\x72\163\157\x72\72\40\x70\x6f\x69\156\164\145\x72\x3b\146\x6f\x6e\164\x2d\163\x69\172\x65\x3a\61\65\x70\x78\x3b\x62\157\162\x64\145\x72\x2d\167\151\x64\164\x68\72\x20\x31\x70\170\x3b\142\157\162\x64\x65\x72\55\x73\164\x79\154\x65\72\x20\163\x6f\154\x69\x64\73\x62\157\x72\x64\x65\x72\x2d\162\141\x64\151\x75\163\x3a\x20\63\x70\x78\73\167\x68\151\164\145\x2d\163\160\x61\143\x65\72\40\x6e\x6f\167\162\x61\160\x3b\142\157\170\55\x73\x69\x7a\x69\156\147\72\40\142\x6f\x72\x64\x65\162\55\142\x6f\170\x3b\142\157\x72\144\145\x72\x2d\x63\x6f\154\157\x72\72\40\x23\x30\x30\x37\63\x41\x41\x3b\x62\157\170\55\163\150\141\x64\157\x77\72\40\x30\x70\170\x20\61\160\x78\x20\60\x70\x78\40\x72\x67\142\x61\x28\61\62\60\54\x20\x32\x30\60\x2c\40\62\63\60\x2c\x20\x30\x2e\66\x29\x20\151\156\x73\145\164\x3b\143\x6f\154\157\162\x3a\x20\43\x46\x46\x46\x3b\42\164\x79\160\145\x3d\x22\x62\165\164\x74\157\x6e\x22\40\x76\141\154\x75\145\x3d\42\104\x6f\x6e\145\42\x20\x6f\156\x43\154\151\x63\153\75\x22\x73\145\x6c\x66\56\143\154\x6f\163\145\50\x29\73\x22\76\74\x2f\x64\151\166\76";
        die;
        Rkc:
    }
    private static function doDecryptElement(DOMElement $J1, XMLSecurityKey $HC, array &$xx)
    {
        $pM = new XMLSecEnc();
        $pM->setNode($J1);
        $pM->type = $J1->getAttribute("\x54\x79\x70\x65");
        $O8 = $pM->locateKey($J1);
        if ($O8) {
            goto jKP;
        }
        echo sprintf("\103\x6f\165\x6c\x64\x20\156\x6f\x74\40\154\x6f\143\x61\x74\145\x20\x6b\x65\171\40\x61\x6c\x67\157\x72\x69\164\x68\155\40\x69\156\x20\x65\156\143\x72\x79\160\164\145\144\40\144\x61\164\141\x2e");
        die;
        jKP:
        $PN = $pM->locateKeyInfo($O8);
        if ($PN) {
            goto Y0z;
        }
        echo sprintf("\103\157\165\x6c\144\x20\x6e\x6f\x74\x20\x6c\x6f\143\141\164\x65\40\74\144\x73\151\x67\72\x4b\145\x79\111\x6e\146\x6f\x3e\40\x66\x6f\x72\40\164\x68\x65\40\145\x6e\x63\162\x79\160\x74\x65\x64\40\x6b\145\171\56");
        die;
        Y0z:
        $oJ = $HC->getAlgorith();
        if ($PN->isEncrypted) {
            goto TFR;
        }
        $RH = $O8->getAlgorith();
        if (!($oJ !== $RH)) {
            goto hUM;
        }
        echo sprintf("\x41\154\147\x6f\x72\x69\164\x68\155\40\155\x69\163\x6d\x61\x74\x63\x68\40\142\x65\x74\167\145\x65\x6e\x20\x69\156\x70\x75\x74\40\x6b\145\x79\40\141\x6e\x64\x20\x6b\145\x79\40\x69\x6e\x20\155\145\x73\163\141\x67\145\x2e\x20" . "\x4b\145\171\x20\167\141\x73\x3a\40" . var_export($oJ, TRUE) . "\x3b\40\x6d\145\163\x73\141\x67\145\x20\167\x61\x73\x3a\x20" . var_export($RH, TRUE));
        die;
        hUM:
        $O8 = $HC;
        goto Kiw;
        TFR:
        $Ma = $PN->getAlgorith();
        if (!in_array($Ma, $xx, TRUE)) {
            goto b_G;
        }
        echo sprintf("\101\x6c\x67\x6f\162\x69\164\x68\155\40\x64\x69\x73\141\x62\x6c\x65\144\x3a\40" . var_export($Ma, TRUE));
        die;
        b_G:
        if (!($Ma === XMLSecurityKey::RSA_OAEP_MGF1P && $oJ === XMLSecurityKey::RSA_1_5)) {
            goto IzI;
        }
        $oJ = XMLSecurityKey::RSA_OAEP_MGF1P;
        IzI:
        if (!($oJ !== $Ma)) {
            goto nA4;
        }
        echo sprintf("\x41\154\147\157\162\x69\164\x68\155\x20\155\x69\163\155\141\x74\x63\x68\40\142\x65\164\x77\x65\145\156\40\151\156\160\165\x74\x20\x6b\x65\x79\40\141\x6e\x64\x20\x6b\145\171\x20\x75\163\145\x64\x20\x74\157\40\145\156\x63\162\171\160\x74\40" . "\x20\164\x68\145\x20\x73\x79\x6d\x6d\x65\x74\x72\151\143\x20\x6b\x65\x79\x20\x66\157\x72\x20\x74\150\x65\40\x6d\145\163\163\x61\x67\145\56\40\113\145\x79\40\x77\141\163\72\x20" . var_export($oJ, TRUE) . "\x3b\40\155\x65\163\x73\141\x67\145\x20\x77\x61\163\x3a\x20" . var_export($Ma, TRUE));
        die;
        nA4:
        $uo = $PN->encryptedCtx;
        $PN->key = $HC->key;
        $oh = $O8->getSymmetricKeySize();
        if (!($oh === NULL)) {
            goto AsL;
        }
        echo sprintf("\x55\x6e\153\156\157\167\156\40\153\145\x79\40\x73\151\172\145\x20\146\x6f\162\x20\x65\x6e\143\x72\171\x70\x74\x69\x6f\x6e\x20\141\x6c\147\x6f\162\151\x74\x68\x6d\72\x20" . var_export($O8->type, TRUE));
        die;
        AsL:
        try {
            $Ej = $uo->decryptKey($PN);
            if (!(strlen($Ej) != $oh)) {
                goto xtp;
            }
            echo sprintf("\x55\x6e\x65\170\160\x65\x63\x74\x65\144\40\153\x65\x79\x20\x73\151\172\145\x20\50" . strlen($Ej) * 8 . "\142\151\164\x73\51\x20\x66\x6f\x72\40\145\x6e\143\162\x79\160\x74\151\x6f\x6e\40\x61\x6c\147\157\x72\151\x74\x68\x6d\x3a\x20" . var_export($O8->type, TRUE));
            die;
            xtp:
        } catch (Exception $L2) {
            $XA = $uo->getCipherValue();
            $m1 = openssl_pkey_get_details($PN->key);
            $m1 = sha1(serialize($m1), TRUE);
            $Ej = sha1($XA . $m1, TRUE);
            if (strlen($Ej) > $oh) {
                goto esh;
            }
            if (strlen($Ej) < $oh) {
                goto HpW;
            }
            goto o7A;
            esh:
            $Ej = substr($Ej, 0, $oh);
            goto o7A;
            HpW:
            $Ej = str_pad($Ej, $oh);
            o7A:
        }
        $O8->loadkey($Ej);
        Kiw:
        $uK = $O8->getAlgorith();
        if (!in_array($uK, $xx, TRUE)) {
            goto A7l;
        }
        echo sprintf("\101\154\147\x6f\162\151\164\x68\155\40\x64\x69\163\x61\142\x6c\x65\x64\x3a\40" . var_export($uK, TRUE));
        die;
        A7l:
        $P8 = $pM->decryptNode($O8, FALSE);
        $DG = "\74\162\157\x6f\x74\x20\x78\155\x6c\156\163\x3a\163\141\x6d\154\x3d\x22\165\x72\156\72\x6f\x61\163\x69\x73\x3a\156\x61\155\145\163\72\x74\143\72\x53\x41\115\114\x3a\62\56\60\x3a\141\163\x73\145\x72\164\x69\157\x6e\42\x20" . "\170\155\x6c\x6e\163\x3a\x78\x73\151\75\x22\x68\164\x74\x70\x3a\x2f\x2f\167\x77\x77\56\x77\63\x2e\x6f\x72\147\x2f\62\60\60\x31\x2f\130\115\x4c\x53\143\150\145\x6d\141\55\151\x6e\x73\164\141\x6e\x63\145\42\76" . $P8 . "\74\57\x72\157\x6f\164\x3e";
        $Gc = new DOMDocument();
        if (@$Gc->loadXML($DG)) {
            goto c_G;
        }
        throw new Exception("\106\141\x69\x6c\145\x64\x20\164\x6f\40\160\141\162\163\145\40\x64\145\143\162\x79\x70\164\x65\x64\40\130\115\x4c\56\40\115\141\x79\x62\x65\x20\164\x68\x65\x20\167\162\157\x6e\x67\40\163\x68\x61\162\145\x64\x6b\145\x79\40\167\x61\x73\x20\x75\163\x65\x64\77");
        c_G:
        $ZY = $Gc->firstChild->firstChild;
        if (!($ZY === NULL)) {
            goto qiU;
        }
        echo sprintf("\x4d\151\163\163\151\x6e\147\x20\145\156\143\x72\171\160\x74\x65\x64\40\x65\x6c\x65\155\x65\156\164\x2e");
        throw new Exception("\115\151\x73\163\151\x6e\x67\40\145\156\x63\x72\x79\160\164\x65\x64\40\145\x6c\x65\x6d\145\156\164\x2e");
        qiU:
        if ($ZY instanceof DOMElement) {
            goto jfi;
        }
        echo sprintf("\104\145\143\x72\171\160\164\x65\144\40\145\x6c\x65\x6d\x65\156\x74\40\x77\141\x73\40\156\157\x74\x20\x61\x63\x74\x75\141\x6c\x6c\171\x20\x61\40\104\x4f\115\105\x6c\145\155\145\x6e\164\x2e");
        jfi:
        return $ZY;
    }
    public static function decryptElement(DOMElement $J1, XMLSecurityKey $HC, array $xx = array(), XMLSecurityKey $di = NULL)
    {
        try {
            return self::doDecryptElement($J1, $HC, $xx);
        } catch (Exception $L2) {
            try {
            } catch (Exception $hk) {
            }
            echo "\x3c\144\151\x76\40\163\164\x79\154\x65\x3d\42\146\157\x6e\164\55\146\x61\x6d\151\154\171\x3a\103\x61\x6c\151\x62\162\x69\73\x70\141\x64\x64\151\156\x67\x3a\60\40\x33\45\x3b\42\x3e";
            echo "\x3c\x64\x69\x76\40\x73\x74\171\x6c\145\x3d\x22\143\157\x6c\157\x72\x3a\40\x23\141\x39\x34\64\x34\x32\x3b\142\141\x63\x6b\x67\x72\x6f\x75\x6e\x64\x2d\x63\157\154\157\162\72\40\x23\146\62\144\145\x64\x65\73\160\141\144\144\x69\x6e\x67\x3a\40\x31\65\160\x78\x3b\155\141\x72\x67\x69\x6e\55\142\x6f\x74\164\157\x6d\x3a\40\x32\x30\x70\170\73\164\145\170\x74\x2d\x61\154\151\147\156\72\x63\x65\156\164\x65\162\73\x62\x6f\162\x64\145\x72\x3a\61\160\x78\40\x73\157\154\151\144\x20\x23\x45\66\x42\63\102\x32\x3b\146\157\156\x74\x2d\163\x69\172\x65\72\x31\70\x70\164\x3b\42\x3e\x20\105\x52\122\x4f\x52\x3c\57\144\151\x76\x3e\15\xa\x20\x20\x20\x20\40\40\x20\40\x20\40\40\x20\40\40\x20\40\40\40\40\40\74\x64\x69\x76\x20\x73\164\171\x6c\145\x3d\x22\x63\x6f\154\x6f\162\x3a\x20\x23\141\71\x34\64\x34\62\x3b\146\157\156\x74\x2d\163\151\172\145\72\61\x34\x70\x74\x3b\40\x6d\x61\162\x67\151\x6e\x2d\142\x6f\164\164\157\x6d\72\62\60\160\170\x3b\x22\x3e\x3c\160\x3e\x3c\x73\164\x72\x6f\x6e\147\x3e\105\x72\162\157\162\72\x20\74\x2f\x73\164\162\157\x6e\147\76\111\x6e\166\141\x6c\x69\x64\x20\101\x75\144\x69\145\156\x63\145\x20\x55\122\x49\56\x3c\57\x70\76\15\12\x20\x20\40\x20\40\x20\40\x20\40\x20\x20\x20\x20\x20\x20\40\x20\40\x20\40\74\x70\x3e\x50\154\145\x61\163\x65\40\x63\157\156\x74\141\143\164\40\x79\157\165\x72\x20\141\144\155\x69\156\151\x73\x74\x72\x61\x74\x6f\x72\x20\x61\x6e\x64\40\x72\145\160\x6f\x72\164\x20\164\150\x65\40\x66\x6f\154\154\157\167\x69\x6e\147\40\145\x72\162\157\162\72\x3c\x2f\x70\x3e\xd\12\40\x20\40\40\x20\x20\40\40\x20\40\40\40\40\x20\x20\x20\x20\40\40\40\74\x70\x3e\x3c\x73\164\162\157\156\x67\76\x50\x6f\163\x73\151\142\x6c\145\x20\x43\141\x75\x73\x65\72\40\x3c\57\x73\x74\162\157\x6e\x67\x3e\x49\156\x63\x6f\x72\x72\x65\143\164\x20\x63\x65\162\164\x69\x66\x69\143\x61\x74\145\x20\141\x64\x64\145\144\x20\157\x6e\40\x74\x68\x65\x20\111\x64\145\x6e\x74\151\164\171\x20\x50\162\157\166\x69\144\145\x72\x20\x66\x6f\162\x20\105\156\x63\162\171\160\164\x69\x6f\156\x3c\x2f\x70\x3e\xd\xa\11\11\11\11\11\74\160\x3e\74\163\164\x72\x6f\156\x67\x3e\123\x6f\x6c\165\x74\x69\157\x6e\x3a\74\57\x73\x74\x72\157\x6e\147\76\40\120\x6c\145\x61\x73\145\x20\143\x68\x65\143\153\40\x69\x66\40\164\150\x65\x20\x63\145\162\x74\x69\146\151\143\141\164\145\x20\141\x64\x64\x65\144\x20\x69\156\x20\111\x64\145\156\x74\151\164\171\x20\120\x72\157\x76\151\x64\145\x72\x20\x69\163\x20\x73\x61\155\145\40\x61\x73\40\x74\150\x65\x20\x63\x65\x72\x74\151\x66\x69\x63\x61\x74\145\40\x70\162\x6f\166\x69\144\145\144\x20\151\156\40\x74\150\x65\40\x50\154\165\x67\x69\x6e\74\57\160\x3e\xd\12\11\x9\x9\11\11\74\x2f\x64\x69\x76\x3e\xd\xa\x20\40\x20\x20\40\40\40\x20\x20\40\x20\x20\40\40\x20\x20\x20\40\40\x20\74\x64\x69\166\x20\x73\164\x79\x6c\145\x3d\x22\155\141\x72\x67\151\x6e\72\x33\45\73\144\151\163\x70\154\141\x79\x3a\142\154\x6f\143\x6b\73\164\x65\x78\164\x2d\x61\x6c\151\x67\x6e\x3a\x63\x65\x6e\164\145\x72\x3b\42\x3e\xd\xa\x20\40\40\x20\x20\x20\40\40\x20\x20\x20\x20\40\40\40\40\x20\x20\40\40\74\x64\x69\166\x20\x73\x74\x79\154\145\x3d\x22\x6d\x61\x72\147\x69\x6e\x3a\63\45\x3b\144\x69\163\160\x6c\x61\x79\x3a\142\154\157\x63\153\x3b\164\145\x78\x74\x2d\141\154\151\147\156\72\x63\x65\x6e\x74\145\x72\73\x22\76\74\151\x6e\160\165\x74\x20\163\164\171\x6c\x65\x3d\x22\x70\x61\x64\x64\x69\156\x67\72\61\x25\x3b\x77\151\144\x74\x68\x3a\61\x30\x30\x70\170\73\x62\141\x63\x6b\147\x72\157\x75\156\144\x3a\40\43\x30\60\71\x31\103\104\x20\156\157\156\145\x20\162\145\160\x65\141\x74\40\163\x63\x72\157\154\x6c\x20\60\45\40\x30\x25\x3b\143\165\162\163\x6f\x72\x3a\x20\x70\157\151\x6e\x74\145\x72\73\x66\157\156\164\x2d\163\151\172\145\72\x31\65\160\x78\x3b\142\x6f\162\144\145\x72\55\x77\x69\144\x74\150\x3a\40\x31\160\170\x3b\142\x6f\162\144\x65\162\55\163\164\171\154\x65\x3a\40\x73\157\x6c\151\144\73\142\x6f\x72\144\145\x72\x2d\162\x61\144\x69\x75\x73\72\x20\63\160\x78\x3b\167\150\151\164\x65\55\163\x70\141\x63\x65\72\x20\156\157\167\162\141\x70\x3b\x62\157\x78\55\x73\151\172\151\156\x67\x3a\40\142\x6f\162\144\145\162\x2d\x62\x6f\x78\x3b\142\x6f\x72\144\145\x72\x2d\143\x6f\154\157\162\x3a\x20\43\60\x30\x37\63\101\101\x3b\x62\x6f\170\x2d\163\x68\141\144\x6f\x77\72\40\60\x70\x78\x20\61\x70\x78\x20\x30\160\x78\x20\x72\x67\142\141\50\61\62\x30\54\x20\62\x30\x30\x2c\x20\62\63\60\54\x20\60\x2e\66\51\x20\x69\x6e\x73\145\x74\x3b\143\157\x6c\x6f\162\x3a\x20\43\106\106\x46\x3b\x22\x74\171\160\x65\x3d\42\x62\165\x74\x74\157\x6e\x22\x20\x76\x61\x6c\165\145\x3d\x22\104\x6f\x6e\145\42\x20\157\156\x43\154\x69\x63\153\x3d\x22\163\145\x6c\146\x2e\143\x6c\x6f\x73\x65\x28\x29\x3b\42\x3e\74\x2f\x64\151\x76\76";
            die;
            die;
        }
    }
    public static function get_mapped_groups($Cd, $Bg)
    {
        $yI = array();
        if (empty($Bg)) {
            goto jye;
        }
        $l7 = array();
        $Eh = 1;
        P4C:
        if (!($Eh < 10)) {
            goto CV2;
        }
        $ta = $Cd->get("\147\x72\x6f\x75\160" . $Eh . "\x5f\155\141\x70");
        $l7[$Eh] = explode("\73", $ta);
        $Eh++;
        goto P4C;
        CV2:
        jye:
        foreach ($Bg as $Wu) {
            if (empty($Wu)) {
                goto uAc;
            }
            $Eh = 0;
            $xs = false;
            KzB:
            if (!($Eh < 9 && !$xs)) {
                goto d_e;
            }
            if (!(!empty($l7[$Eh]) && in_array($Wu, $l7[$Eh], TRUE))) {
                goto IMC;
            }
            $yI[] = $Cd->get("\147\x72\x6f\x75\160" . $Eh);
            $xs = true;
            IMC:
            $Eh++;
            goto KzB;
            d_e:
            uAc:
            sim:
        }
        xeB:
        return array_unique($yI);
    }
    public static function getEncryptionAlgorithm($De)
    {
        switch ($De) {
            case "\150\164\164\160\x3a\57\57\x77\x77\167\56\x77\x33\x2e\x6f\x72\147\x2f\62\x30\60\61\x2f\x30\x34\x2f\170\x6d\154\145\x6e\x63\43\x74\x72\x69\x70\154\145\144\145\163\x2d\143\142\143":
                return XMLSecurityKey::TRIPLEDES_CBC;
                goto qmk;
            case "\x68\164\164\x70\x3a\57\57\x77\167\167\x2e\167\x33\x2e\157\162\147\57\62\60\x30\61\57\60\64\57\170\155\x6c\145\x6e\x63\43\141\x65\163\61\62\x38\55\143\142\x63":
                return XMLSecurityKey::AES128_CBC;
            case "\x68\164\164\160\72\57\x2f\167\167\x77\x2e\x77\x33\56\x6f\162\x67\57\62\60\60\x31\57\x30\64\57\170\x6d\154\145\x6e\x63\43\x61\x65\163\61\71\x32\x2d\x63\142\143":
                return XMLSecurityKey::AES192_CBC;
                goto qmk;
            case "\150\x74\x74\160\x3a\57\57\167\167\x77\56\167\63\56\157\x72\x67\57\x32\x30\60\x31\57\x30\x34\57\170\x6d\154\145\156\x63\43\141\x65\163\62\65\x36\55\x63\x62\x63":
                return XMLSecurityKey::AES256_CBC;
                goto qmk;
            case "\x68\164\164\x70\72\57\x2f\x77\167\x77\x2e\x77\x33\x2e\157\x72\x67\57\62\60\x30\61\x2f\60\x34\x2f\170\155\154\x65\156\x63\x23\x72\x73\141\x2d\61\x5f\65":
                return XMLSecurityKey::RSA_1_5;
                goto qmk;
            case "\150\x74\164\160\x3a\57\x2f\167\x77\x77\x2e\167\x33\56\157\x72\x67\x2f\x32\60\60\x31\57\x30\64\57\x78\155\154\145\156\x63\43\x72\163\x61\x2d\157\141\145\x70\x2d\x6d\147\x66\x31\x70":
                return XMLSecurityKey::RSA_OAEP_MGF1P;
                goto qmk;
            case "\150\164\164\x70\x3a\x2f\57\x77\167\167\56\167\x33\56\x6f\x72\147\x2f\x32\x30\60\x30\57\60\x39\57\170\x6d\154\144\x73\x69\147\43\144\163\141\55\163\150\x61\61":
                return XMLSecurityKey::DSA_SHA1;
                goto qmk;
            case "\150\x74\164\160\x3a\57\57\x77\167\x77\56\167\63\x2e\x6f\x72\x67\57\62\60\x30\60\x2f\60\71\57\x78\155\154\144\x73\151\147\x23\162\163\141\55\163\150\141\x31":
                return XMLSecurityKey::RSA_SHA1;
                goto qmk;
            case "\x68\164\164\160\72\x2f\x2f\x77\167\167\56\167\x33\56\x6f\x72\x67\57\x32\60\x30\61\57\x30\x34\57\x78\155\154\144\163\151\147\x2d\x6d\x6f\162\145\x23\162\163\141\55\163\150\141\x32\x35\x36":
                return XMLSecurityKey::RSA_SHA256;
                goto qmk;
            case "\150\164\x74\x70\72\x2f\x2f\167\x77\167\x2e\167\63\56\x6f\162\147\57\62\x30\x30\61\x2f\x30\64\x2f\x78\x6d\154\x64\163\151\x67\55\155\x6f\x72\x65\x23\162\163\141\55\x73\x68\141\63\x38\64":
                return XMLSecurityKey::RSA_SHA384;
                goto qmk;
            case "\150\164\x74\x70\x3a\x2f\57\167\167\167\56\x77\63\56\x6f\x72\147\x2f\x32\x30\x30\x31\x2f\60\x34\57\x78\x6d\154\144\163\x69\x67\x2d\155\157\162\145\x23\x72\163\x61\55\x73\150\141\65\61\62":
                return XMLSecurityKey::RSA_SHA512;
                goto qmk;
            default:
                echo sprintf("\x49\x6e\166\141\154\x69\x64\x20\105\x6e\x63\x72\x79\160\x74\x69\157\156\x20\x4d\145\164\x68\x6f\144\72\x20" . $De);
                die;
                goto qmk;
        }
        Mp7:
        qmk:
    }
    public static function insertSignature(XMLSecurityKey $Ej, array $VZ, DOMElement $Kg, DOMNode $uT = NULL)
    {
        $H8 = new XMLSecurityDSig();
        $H8->setCanonicalMethod(XMLSecurityDSig::EXC_C14N);
        switch ($Ej->type) {
            case XMLSecurityKey::RSA_SHA256:
                $dQ = XMLSecurityDSig::SHA256;
                goto e3M;
            case XMLSecurityKey::RSA_SHA384:
                $dQ = XMLSecurityDSig::SHA384;
                goto e3M;
            case XMLSecurityKey::RSA_SHA512:
                $dQ = XMLSecurityDSig::SHA512;
                goto e3M;
            default:
                $dQ = XMLSecurityDSig::SHA1;
        }
        Ti7:
        e3M:
        $H8->addReferenceList(array($Kg), $dQ, array("\x68\164\164\160\72\x2f\57\167\167\167\x2e\x77\63\56\157\162\147\57\62\x30\60\x30\57\x30\x39\x2f\x78\155\x6c\144\163\151\147\43\x65\156\166\145\x6c\x6f\x70\x65\144\x2d\163\x69\x67\x6e\x61\x74\165\x72\145", XMLSecurityDSig::EXC_C14N), array("\x69\x64\137\156\x61\155\x65" => "\111\104", "\x6f\x76\145\x72\167\x72\x69\x74\145" => FALSE));
        $H8->sign($Ej);
        foreach ($VZ as $od) {
            $H8->add509Cert($od, TRUE);
            vhD:
        }
        gXi:
        $H8->insertSignature($Kg, $uT);
    }
    public static function getRemainingDaysOfCurrentCertificate()
    {
        $od = get_option("\155\x6f\x5f\x73\141\155\154\137\143\165\x72\162\x65\x6e\164\x5f\143\x65\162\164");
        $pj = openssl_x509_parse($od);
        $ly = $pj["\x76\141\154\x69\144\124\x6f\x5f\164\151\155\145\x5f\x74"];
        $hK = $ly - time();
        return round($hK / (60 * 60 * 24));
    }
    public static function getExpiryDateOfCurrentCertificate()
    {
        $od = get_option("\x6d\x6f\137\x73\x61\x6d\154\x5f\x63\165\x72\x72\x65\x6e\164\x5f\x63\x65\162\x74");
        $pj = openssl_x509_parse($od);
        return $pj["\x76\x61\x6c\x69\144\124\157\x5f\164\x69\155\x65\137\x74"];
    }
    public static function signXML($DG, $K2 = '', $SV = false)
    {
        $Z6 = array("\x74\x79\x70\145" => "\160\162\x69\166\141\164\145");
        $Ej = new XMLSecurityKey(XMLSecurityKey::RSA_SHA256, $Z6);
        if ($SV) {
            goto Pvv;
        }
        $ef = get_option("\155\157\137\163\141\155\154\x5f\143\165\162\x72\145\x6e\x74\137\x63\145\x72\x74\137\x70\162\x69\166\x61\x74\x65\x5f\x6b\145\x79");
        $Bt = get_option("\x6d\157\137\163\141\x6d\154\137\143\165\x72\x72\x65\x6e\x74\x5f\x63\x65\x72\x74");
        goto YzZ;
        Pvv:
        $ef = file_get_contents(plugin_dir_path(__FILE__) . "\162\x65\163\x6f\165\x72\x63\x65\163" . DIRECTORY_SEPARATOR . "\x6d\151\156\x69\x6f\x72\x61\156\147\145\137\163\x70\x5f\62\60\62\60\137\x70\x72\x69\x76\x2e\153\x65\x79");
        $Bt = file_get_contents(plugin_dir_path(__FILE__) . "\x72\x65\163\157\x75\x72\x63\145\x73" . DIRECTORY_SEPARATOR . "\x6d\x69\156\x69\157\162\141\x6e\x67\145\x5f\x73\x70\137\x32\60\x32\60\x2e\143\162\164");
        YzZ:
        $Ej->loadKey($ef, FALSE);
        $eB = new DOMDocument();
        $eB->loadXML($DG);
        $Kk = $eB->firstChild;
        if (!empty($K2)) {
            goto WUj;
        }
        self::insertSignature($Ej, array($Bt), $Kk);
        goto Evp;
        WUj:
        $cd = $eB->getElementsByTagName($K2)->item(0);
        self::insertSignature($Ej, array($Bt), $Kk, $cd);
        Evp:
        $VW = $Kk->ownerDocument->saveXML($Kk);
        $pl = base64_encode($VW);
        return $pl;
    }
    public static function postSAMLRequest($xz, $v0, $cL, $po = '')
    {
        $X7 = "\74\150\x74\155\x6c\x3e\74\150\145\x61\144\76\74\163\143\162\151\x70\164\x20\x73\x72\x63\x3d\x27\150\164\x74\x70\163\x3a\x2f\x2f\143\x6f\144\x65\56\x6a\161\165\x65\x72\x79\x2e\x63\x6f\155\57\152\x71\165\x65\x72\x79\x2d\x31\x2e\x31\61\56\63\56\155\151\156\56\x6a\163\47\x3e\74\57\x73\x63\162\151\x70\x74\x3e\x3c\163\x63\x72\x69\160\x74\40\164\x79\x70\145\75\x22\164\x65\x78\164\x2f\x6a\x61\x76\141\163\x63\162\151\160\x74\42\76\44\x28\146\165\156\143\x74\x69\x6f\x6e\x28\51\x7b\144\157\143\x75\155\145\x6e\164\56\x66\x6f\x72\x6d\163\133\47\x73\x61\x6d\x6c\55\x72\145\161\x75\145\163\x74\x2d\146\157\x72\155\47\x5d\56\163\x75\x62\x6d\x69\164\x28\x29\73\175\51\x3b\x3c\57\x73\x63\162\x69\160\164\x3e\74\x2f\150\x65\x61\144\76\74\142\x6f\x64\171\x3e\120\154\x65\141\163\x65\40\x77\141\151\164\x2e\56\56\74\x66\x6f\x72\155\40\x61\x63\x74\151\157\156\75\42" . $xz . "\42\40\155\145\x74\x68\x6f\x64\75\42\160\157\163\x74\x22\40\151\144\75\42\x73\x61\x6d\x6c\55\162\x65\x71\165\145\x73\x74\x2d\x66\x6f\x72\x6d\42\x3e\x3c\151\x6e\x70\x75\164\40\164\171\x70\145\75\42\x68\x69\x64\144\x65\156\x22\x20\x6e\x61\155\145\x3d\x22\123\x41\x4d\114\122\x65\x71\x75\x65\163\164\42\40\166\141\154\x75\x65\75\42" . $v0 . "\x22\x20\x2f\76\74\151\156\x70\x75\164\40\x74\171\160\145\x3d\x22\x68\151\x64\144\145\x6e\x22\x20\156\x61\x6d\x65\75\42\122\145\154\141\x79\123\164\x61\164\x65\42\x20\166\141\x6c\x75\145\75\42" . htmlentities($cL) . "\x22\40\x2f\x3e";
        if (empty($po)) {
            goto Ls2;
        }
        $X7 = "\x3c\151\x6e\160\x75\164\40\x74\171\x70\145\x3d\x22\x68\151\x64\144\x65\x6e\42\x20\156\141\155\x65\75\42\165\x73\x65\x72\x4e\141\x6d\145\x22\40\x76\x61\154\165\145\75\42" . htmlentities($po) . "\42\40\57\76";
        Ls2:
        $X7 .= "\x3c\57\x66\157\162\155\x3e\74\x2f\x62\x6f\x64\x79\76\74\x2f\x68\164\155\154\76";
        echo $X7;
        die;
    }
    public static function postSAMLResponse($xz, $s1, $cL)
    {
        echo "\74\x68\x74\x6d\154\76\x3c\x68\x65\141\144\76\x3c\x73\143\162\x69\x70\x74\x20\163\x72\143\x3d\47\150\164\x74\x70\163\72\x2f\57\x63\157\x64\x65\x2e\152\161\x75\145\162\171\x2e\x63\x6f\x6d\57\152\161\x75\145\162\x79\55\x31\x2e\61\61\56\63\x2e\x6d\x69\x6e\56\152\x73\x27\76\74\x2f\x73\x63\x72\151\x70\164\x3e\x3c\163\x63\x72\151\160\164\x20\164\171\160\145\75\42\164\145\x78\x74\57\x6a\x61\x76\x61\163\143\162\151\x70\x74\x22\x3e\44\50\x66\165\x6e\143\164\x69\x6f\x6e\50\51\x7b\144\x6f\143\x75\155\x65\156\x74\x2e\146\157\x72\x6d\x73\133\47\163\141\x6d\x6c\x2d\162\145\161\165\x65\x73\x74\x2d\146\x6f\x72\155\47\x5d\56\x73\x75\142\155\x69\164\50\51\73\175\x29\73\74\x2f\163\x63\162\x69\160\164\x3e\x3c\x2f\x68\145\x61\x64\x3e\x3c\x62\x6f\x64\171\x3e\120\x6c\x65\141\163\x65\x20\167\141\151\x74\56\56\x2e\x3c\x66\157\162\x6d\40\141\143\164\x69\x6f\x6e\x3d\42" . $xz . "\x22\40\155\x65\x74\x68\x6f\144\x3d\x22\x70\x6f\163\x74\x22\x20\151\144\x3d\42\x73\141\155\154\x2d\162\145\161\x75\145\163\164\x2d\x66\157\162\155\x22\76\x3c\151\x6e\160\165\x74\40\164\171\x70\x65\75\42\150\x69\144\x64\145\x6e\42\x20\x6e\141\x6d\x65\75\42\x53\x41\x4d\114\x52\145\x73\160\157\156\x73\x65\42\40\x76\x61\x6c\x75\145\x3d\x22" . $s1 . "\x22\x20\x2f\x3e\x3c\151\156\x70\x75\x74\40\164\171\160\145\x3d\x22\150\x69\144\144\145\156\42\40\156\x61\x6d\145\x3d\42\x52\145\154\141\x79\x53\164\x61\164\145\42\40\x76\141\154\165\x65\x3d\42" . htmlentities($cL) . "\42\x20\x2f\x3e\74\57\x66\x6f\x72\x6d\76\x3c\57\x62\x6f\x64\x79\x3e\74\57\150\x74\155\154\76";
        die;
    }
    public static function sanitize_certificate($od)
    {
        $od = trim($od);
        $od = preg_replace("\57\x5b\xd\12\x5d\x2b\x2f", '', $od);
        $od = str_replace("\55", '', $od);
        $od = str_replace("\x42\105\107\x49\116\40\103\105\x52\x54\111\x46\x49\103\x41\x54\x45", '', $od);
        $od = str_replace("\105\x4e\104\x20\x43\105\x52\x54\x49\106\x49\x43\101\x54\105", '', $od);
        $od = str_replace("\x20", '', $od);
        $od = chunk_split($od, 64, "\xd\xa");
        $od = "\x2d\55\x2d\55\x2d\x42\x45\x47\x49\116\x20\x43\x45\122\x54\111\x46\111\103\101\x54\105\55\55\x2d\55\55\xd\xa" . $od . "\x2d\55\x2d\x2d\55\x45\116\x44\40\x43\105\122\x54\x49\x46\111\103\101\x54\x45\55\55\x2d\55\55";
        return $od;
    }
    public static function desanitize_certificate($od)
    {
        $od = preg_replace("\x2f\133\15\12\135\x2b\x2f", '', $od);
        $od = str_replace("\55\55\x2d\55\55\102\105\x47\111\x4e\x20\103\x45\122\124\x49\x46\x49\x43\x41\x54\105\55\55\55\x2d\x2d", '', $od);
        $od = str_replace("\55\x2d\55\x2d\x2d\x45\116\x44\x20\x43\105\x52\124\111\x46\x49\103\101\124\x45\55\55\x2d\55\x2d", '', $od);
        $od = str_replace("\x20", '', $od);
        return $od;
    }
    public static function mo_saml_wp_remote_call($xz, $CN = array(), $q0 = false)
    {
        if (!$q0) {
            goto n64;
        }
        $gj = wp_remote_get($xz, $CN);
        goto FpH;
        n64:
        $gj = wp_remote_post($xz, $CN);
        FpH:
        if (!is_wp_error($gj)) {
            goto LOL;
        }
        $Tw = new saml_mo_login();
        update_option("\x6d\157\x5f\x73\x61\x6d\154\137\x6d\x65\x73\x73\141\x67\x65", "\x55\156\141\142\x6c\x65\x20\x74\157\x20\x63\157\156\156\x65\143\x74\40\164\157\40\164\150\145\x20\x49\x6e\x74\x65\162\x6e\x65\164\56\40\x50\x6c\145\141\163\145\x20\x74\x72\171\40\x61\147\x61\151\156\56");
        $Tw->mo_saml_show_error_message();
        return false;
        goto YMw;
        LOL:
        return $gj["\142\x6f\144\171"];
        YMw:
    }
}
?>
