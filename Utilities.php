<?php


if (class_exists("\130\x4d\114\123\x65\x63\x75\x72\x69\164\x79\x4b\x65\171")) {
    goto ui;
}
include "\170\x6d\154\x73\x65\143\x6c\x69\x62\163\x2e\x70\150\160";
ui:
class SAMLSPUtilities
{
    public static function generateID()
    {
        return "\137" . self::stringToHex(self::generateRandomBytes(21));
    }
    public static function stringToHex($bl)
    {
        $a6 = '';
        $Qj = 0;
        ZS:
        if (!($Qj < strlen($bl))) {
            goto In;
        }
        $a6 .= sprintf("\45\60\62\170", ord($bl[$Qj]));
        iV:
        $Qj++;
        goto ZS;
        In:
        return $a6;
    }
    public static function generateRandomBytes($IS, $tw = TRUE)
    {
        return openssl_random_pseudo_bytes($IS);
    }
    public static function createAuthnRequest($f3, $Ja, $NE, $f4 = "\146\141\x6c\163\x65", $r_ = "\x48\x74\164\160\x52\145\144\151\162\x65\x63\164")
    {
        $x3 = "\x3c\77\170\155\154\40\x76\145\162\163\x69\x6f\x6e\x3d\42\x31\x2e\x30\x22\x20\x65\x6e\143\157\144\x69\156\x67\75\x22\125\124\106\x2d\70\42\x3f\76" . "\74\163\x61\x6d\x6c\160\72\x41\x75\x74\150\156\x52\x65\x71\165\145\163\x74\40\x78\x6d\x6c\156\163\72\x73\141\x6d\x6c\160\75\42\165\162\x6e\72\157\x61\163\151\163\72\x6e\141\x6d\x65\163\72\164\143\x3a\123\101\x4d\x4c\72\62\56\60\72\160\x72\x6f\164\x6f\x63\157\x6c\42\x20\170\x6d\154\x6e\163\75\x22\x75\162\x6e\x3a\157\x61\x73\x69\x73\x3a\156\141\155\x65\x73\72\x74\143\x3a\123\101\x4d\x4c\72\62\x2e\x30\72\x61\x73\x73\145\x72\164\151\x6f\x6e\42\40\111\104\75\x22" . self::generateID() . "\42\40\126\145\162\163\151\157\156\x3d\42\x32\56\60\x22\x20\x49\163\x73\x75\x65\x49\156\163\x74\x61\x6e\x74\75\x22" . self::generateTimestamp() . "\x22";
        if (!($f4 == "\x74\162\165\145")) {
            goto gy;
        }
        $x3 .= "\40\x46\157\162\x63\145\101\x75\x74\x68\x6e\x3d\x22\164\x72\x75\145\x22";
        gy:
        $x3 .= "\x20\120\162\157\x74\x6f\x63\157\154\x42\x69\x6e\144\x69\156\x67\x3d\x22\165\162\156\72\157\x61\163\x69\x73\72\x6e\141\155\145\x73\72\x74\143\72\123\101\x4d\114\72\x32\x2e\60\x3a\142\x69\x6e\144\151\x6e\147\x73\x3a\x48\124\124\120\x2d\120\117\x53\124\x22\x20\101\x73\x73\x65\x72\164\151\157\156\x43\157\156\x73\165\x6d\145\162\x53\145\x72\166\151\x63\145\x55\122\114\x3d\x22" . $f3 . "\x22\40\104\145\163\x74\x69\x6e\x61\x74\x69\x6f\156\75\42" . $NE . "\42\76\x3c\x73\141\155\154\72\x49\163\163\165\x65\162\x20\170\155\154\x6e\x73\72\163\x61\x6d\154\x3d\x22\165\x72\x6e\x3a\157\x61\x73\x69\x73\72\x6e\141\x6d\x65\163\72\x74\143\x3a\123\x41\115\x4c\72\62\x2e\x30\72\141\x73\x73\145\162\164\x69\157\x6e\x22\76" . $Ja . "\x3c\57\x73\x61\x6d\154\x3a\x49\163\x73\165\145\x72\76\74\x73\141\x6d\154\160\x3a\x4e\x61\x6d\145\111\104\x50\157\x6c\x69\143\171\x20\x41\x6c\154\x6f\167\103\162\x65\x61\164\x65\x3d\42\x74\x72\165\145\42\x20\106\x6f\x72\x6d\x61\x74\x3d\x22\x75\162\156\72\x6f\x61\x73\151\163\x3a\156\x61\x6d\145\x73\72\164\x63\72\x53\x41\115\x4c\72\61\56\x31\x3a\x6e\141\x6d\145\151\x64\x2d\x66\x6f\162\x6d\x61\x74\72\165\x6e\x73\x70\x65\x63\x69\146\151\x65\x64\42\12\40\x20\x20\x20\40\x20\x20\x20\40\40\x20\40\x20\40\x20\40\x20\40\40\40\40\40\40\x20\x2f\76\74\57\163\141\x6d\154\160\x3a\x41\165\x74\150\156\x52\145\161\x75\145\x73\x74\x3e";
        if (!(empty($r_) || $r_ == "\x48\164\164\x70\122\145\x64\151\x72\145\143\x74")) {
            goto KQ;
        }
        $ir = gzdeflate($x3);
        $OQ = base64_encode($ir);
        $cu = urlencode($OQ);
        $x3 = $cu;
        KQ:
        return $x3;
    }
    public static function createLogoutRequest($RM, $yW = '', $Ja, $NE, $T3 = "\x48\x74\164\x70\122\145\x64\151\162\145\x63\164")
    {
        $x3 = "\74\x3f\170\x6d\x6c\40\x76\145\x72\163\151\x6f\x6e\75\42\61\x2e\x30\42\x20\x65\156\143\157\x64\x69\x6e\147\75\x22\125\124\106\x2d\x38\x22\77\x3e" . "\x3c\x73\141\155\x6c\160\x3a\x4c\157\x67\x6f\x75\164\122\145\x71\165\145\163\x74\40\170\155\x6c\156\163\72\163\x61\155\154\160\x3d\x22\165\x72\156\72\157\141\163\151\x73\72\x6e\141\155\x65\163\x3a\164\x63\x3a\x53\x41\x4d\114\72\62\56\60\x3a\x70\162\x6f\x74\x6f\143\x6f\x6c\42\40\x78\155\x6c\156\x73\x3a\x73\x61\x6d\154\75\x22\x75\162\x6e\72\157\141\163\151\x73\72\156\x61\155\x65\x73\72\x74\143\72\x53\101\x4d\114\x3a\x32\56\60\72\x61\x73\163\145\162\x74\x69\x6f\x6e\x22\x20\111\104\x3d\42" . self::generateID() . "\42\x20\x49\163\x73\165\145\x49\156\163\164\x61\156\164\75\42" . self::generateTimestamp() . "\42\x20\x56\x65\162\x73\x69\157\x6e\x3d\42\62\56\60\42\40\x44\x65\163\x74\151\156\x61\164\x69\x6f\156\x3d\42" . $NE . "\x22\x3e\xa\11\11\11\11\x9\11\x3c\x73\141\155\154\x3a\x49\x73\x73\165\145\x72\x20\170\155\x6c\x6e\163\72\163\141\x6d\154\x3d\42\165\x72\x6e\72\x6f\141\163\x69\x73\x3a\156\x61\x6d\145\x73\72\164\x63\72\123\101\115\114\x3a\x32\56\x30\72\141\x73\x73\x65\162\x74\x69\x6f\156\x22\x3e" . $Ja . "\x3c\x2f\163\x61\x6d\154\72\111\163\x73\165\x65\162\x3e\xa\11\x9\x9\11\11\x9\x3c\163\141\x6d\x6c\72\x4e\141\x6d\x65\111\104\40\170\x6d\154\x6e\163\x3a\x73\x61\x6d\154\x3d\x22\165\x72\156\72\157\141\163\151\163\72\156\x61\x6d\145\163\x3a\x74\143\72\123\101\115\x4c\72\62\x2e\x30\x3a\141\163\x73\145\162\x74\x69\157\x6e\42\x3e" . $RM[0] . "\x3c\x2f\163\x61\155\x6c\x3a\x4e\x61\x6d\x65\111\x44\76";
        if (empty($yW)) {
            goto Xv;
        }
        $x3 .= "\74\x73\x61\155\154\160\72\123\x65\163\x73\151\157\156\x49\156\x64\x65\x78\76" . $yW[0] . "\74\57\163\x61\x6d\x6c\x70\72\123\x65\x73\163\151\x6f\156\111\x6e\x64\x65\x78\x3e";
        Xv:
        $x3 .= "\74\57\163\141\x6d\154\x70\x3a\x4c\157\x67\157\165\164\122\145\x71\165\x65\163\164\x3e";
        if (!(empty($T3) || $T3 == "\110\164\x74\x70\x52\145\144\x69\162\145\143\164")) {
            goto zv;
        }
        $ir = gzdeflate($x3);
        $OQ = base64_encode($ir);
        $cu = urlencode($OQ);
        $x3 = $cu;
        zv:
        return $x3;
    }
    public static function createLogoutResponse($I0, $Ja, $NE, $T3 = "\x48\x74\164\160\x52\x65\x64\151\162\145\143\x74")
    {
        $x3 = "\74\77\x78\155\x6c\40\x76\145\x72\x73\x69\x6f\156\75\42\x31\x2e\60\42\40\145\x6e\x63\157\144\151\156\147\75\42\125\x54\106\55\x38\42\77\x3e" . "\74\163\x61\x6d\x6c\160\72\x4c\x6f\x67\x6f\x75\164\x52\x65\163\160\x6f\156\x73\145\40\x78\155\154\156\163\72\x73\x61\155\154\160\x3d\x22\165\x72\156\72\157\x61\163\151\x73\x3a\x6e\141\155\x65\x73\x3a\164\143\x3a\123\101\115\114\x3a\62\56\x30\72\160\x72\157\164\x6f\x63\x6f\154\x22\x20\x78\155\x6c\156\163\72\163\x61\x6d\154\x3d\42\165\x72\x6e\x3a\x6f\141\163\x69\x73\72\156\141\x6d\145\163\72\164\x63\x3a\x53\101\115\x4c\72\x32\x2e\60\x3a\141\x73\x73\145\x72\164\x69\157\x6e\42\40" . "\x49\104\x3d\42" . self::generateID() . "\x22\x20" . "\x56\x65\x72\163\x69\x6f\x6e\75\42\x32\56\60\42\x20\x49\163\163\x75\x65\x49\156\163\x74\x61\x6e\x74\75\x22" . self::generateTimestamp() . "\x22\40" . "\104\145\163\x74\x69\x6e\141\164\151\x6f\156\75\42" . $NE . "\42\x20" . "\x49\156\122\145\x73\x70\x6f\x6e\x73\x65\124\x6f\75\x22" . $I0 . "\x22\x3e" . "\74\x73\141\155\154\72\x49\x73\163\165\145\x72\x20\170\x6d\x6c\x6e\163\x3a\163\x61\155\x6c\x3d\x22\x75\x72\x6e\x3a\157\x61\x73\x69\163\72\156\x61\155\145\163\72\164\143\72\x53\x41\x4d\x4c\72\62\x2e\60\72\x61\163\x73\x65\162\x74\151\157\156\42\x3e" . $Ja . "\74\x2f\x73\141\x6d\154\72\x49\x73\163\x75\145\x72\x3e" . "\x3c\x73\x61\x6d\154\x70\x3a\123\x74\141\x74\165\163\x3e\74\163\x61\155\154\160\72\123\164\141\164\165\163\x43\x6f\144\145\x20\126\x61\154\x75\x65\75\x22\x75\162\156\72\157\x61\163\x69\163\x3a\x6e\x61\x6d\x65\163\72\164\x63\x3a\x53\x41\x4d\114\72\x32\x2e\x30\x3a\x73\164\x61\x74\x75\163\72\x53\165\x63\143\x65\163\163\x22\x2f\76\74\57\163\141\x6d\154\x70\72\x53\164\x61\x74\165\x73\76\74\x2f\x73\x61\155\x6c\x70\x3a\x4c\157\x67\157\x75\164\122\145\x73\160\x6f\156\x73\x65\76";
        if (!(empty($T3) || $T3 == "\110\x74\164\x70\122\145\144\151\162\x65\x63\x74")) {
            goto CQ;
        }
        $ir = gzdeflate($x3);
        $OQ = base64_encode($ir);
        $cu = urlencode($OQ);
        $x3 = $cu;
        CQ:
        return $x3;
    }
    public static function generateTimestamp($XX = NULL)
    {
        if (!($XX === NULL)) {
            goto yJ;
        }
        $XX = time();
        yJ:
        return gmdate("\131\x2d\x6d\x2d\144\134\124\x48\x3a\x69\72\x73\134\132", $XX);
    }
    public static function xpQuery(DOMNode $Ua, $R7)
    {
        static $KN = NULL;
        if ($Ua instanceof DOMDocument) {
            goto Qb;
        }
        $oL = $Ua->ownerDocument;
        goto C0;
        Qb:
        $oL = $Ua;
        C0:
        if (!($KN === NULL || !$KN->document->isSameNode($oL))) {
            goto kQ;
        }
        $KN = new DOMXPath($oL);
        $KN->registerNamespace("\163\x6f\141\160\x2d\145\156\166", "\150\164\x74\x70\x3a\x2f\57\x73\143\x68\145\155\141\163\x2e\x78\155\154\163\157\x61\160\56\x6f\x72\147\x2f\x73\x6f\141\x70\x2f\x65\x6e\x76\145\x6c\157\160\145\x2f");
        $KN->registerNamespace("\163\141\155\154\137\160\162\157\x74\157\143\157\154", "\165\162\x6e\x3a\157\141\163\x69\163\72\x6e\141\x6d\x65\x73\72\x74\143\x3a\123\101\115\114\72\x32\56\60\x3a\x70\162\x6f\164\157\x63\x6f\x6c");
        $KN->registerNamespace("\163\141\x6d\x6c\137\141\x73\x73\x65\x72\164\151\x6f\x6e", "\165\x72\x6e\72\157\x61\163\151\163\72\x6e\141\x6d\x65\163\x3a\x74\x63\72\123\x41\x4d\x4c\72\x32\x2e\60\72\x61\x73\163\145\162\164\151\157\x6e");
        $KN->registerNamespace("\163\x61\x6d\x6c\137\155\145\x74\x61\x64\x61\164\x61", "\165\x72\156\72\x6f\x61\x73\151\x73\x3a\x6e\x61\155\145\x73\x3a\164\x63\x3a\x53\x41\x4d\x4c\72\62\x2e\x30\x3a\155\x65\x74\141\144\141\164\141");
        $KN->registerNamespace("\144\x73", "\x68\164\164\x70\x3a\x2f\57\167\167\167\x2e\167\x33\56\x6f\x72\147\57\x32\60\60\x30\x2f\x30\x39\x2f\x78\x6d\x6c\x64\163\151\147\43");
        $KN->registerNamespace("\170\x65\156\x63", "\150\x74\164\x70\72\x2f\57\x77\x77\167\56\167\63\x2e\157\162\x67\x2f\62\x30\x30\x31\x2f\60\x34\x2f\170\155\x6c\145\156\x63\x23");
        kQ:
        $N9 = $KN->query($R7, $Ua);
        $a6 = array();
        $Qj = 0;
        pw:
        if (!($Qj < $N9->length)) {
            goto MQ;
        }
        $a6[$Qj] = $N9->item($Qj);
        ah:
        $Qj++;
        goto pw;
        MQ:
        return $a6;
    }
    public static function parseNameId(DOMElement $vw)
    {
        $a6 = array("\x56\141\154\165\x65" => trim($vw->textContent));
        foreach (array("\116\141\x6d\x65\x51\165\141\x6c\x69\146\151\x65\162", "\x53\x50\x4e\x61\155\145\121\x75\141\154\151\x66\151\145\x72", "\106\157\x72\x6d\141\x74") as $jw) {
            if (!$vw->hasAttribute($jw)) {
                goto YX;
            }
            $a6[$jw] = $vw->getAttribute($jw);
            YX:
            X_:
        }
        U1:
        return $a6;
    }
    public static function xsDateTimeToTimestamp($TX)
    {
        $vv = array();
        $TM = "\57\136\x28\x5c\144\134\x64\134\144\134\x64\51\x2d\x28\x5c\144\x5c\x64\x29\55\x28\134\x64\134\144\51\124\x28\x5c\144\134\144\x29\72\50\x5c\144\134\x64\51\72\50\x5c\144\x5c\x64\51\x28\x3f\72\134\x2e\134\144\x2b\x29\x3f\132\44\57\x44";
        if (!(preg_match($TM, $TX, $vv) == 0)) {
            goto HU;
        }
        echo sprintf("\x6e\x76\x61\x6c\x69\144\40\123\x41\x4d\x4c\x32\x20\164\151\x6d\x65\163\164\x61\155\160\40\160\x61\x73\x73\145\144\x20\164\157\x20\170\163\104\141\164\x65\124\151\155\145\x54\x6f\124\151\155\145\163\164\141\x6d\160\x3a\40" . $TX);
        die;
        HU:
        $N_ = intval($vv[1]);
        $FL = intval($vv[2]);
        $fx = intval($vv[3]);
        $ES = intval($vv[4]);
        $D5 = intval($vv[5]);
        $jX = intval($vv[6]);
        $aY = gmmktime($ES, $D5, $jX, $FL, $fx, $N_);
        return $aY;
    }
    public static function extractStrings(DOMElement $S6, $pb, $RF)
    {
        $a6 = array();
        $Ua = $S6->firstChild;
        Un:
        if (!($Ua !== NULL)) {
            goto r8;
        }
        if (!($Ua->namespaceURI !== $pb || $Ua->localName !== $RF)) {
            goto uC;
        }
        goto Sm;
        uC:
        $a6[] = trim($Ua->textContent);
        Sm:
        $Ua = $Ua->nextSibling;
        goto Un;
        r8:
        return $a6;
    }
    public static function validateElement(DOMElement $KQ)
    {
        $xp = new XMLSecurityDSig();
        $xp->idKeys[] = "\111\x44";
        $VT = self::xpQuery($KQ, "\x2e\57\x64\163\72\123\x69\147\156\141\164\165\x72\145");
        if (count($VT) === 0) {
            goto JD;
        }
        if (count($VT) > 1) {
            goto rB;
        }
        goto MJ;
        JD:
        return FALSE;
        goto MJ;
        rB:
        echo sprintf("\x58\x4d\114\123\x65\143\x3a\40\x6d\x6f\x72\x65\x20\x74\150\x61\156\x20\x6f\156\145\40\163\151\x67\x6e\141\164\165\x72\145\40\x65\154\145\x6d\x65\156\x74\40\x69\156\40\x72\157\157\x74\x2e");
        die;
        MJ:
        $VT = $VT[0];
        $xp->sigNode = $VT;
        $xp->canonicalizeSignedInfo();
        if ($xp->validateReference()) {
            goto N4;
        }
        echo sprintf("\130\x4d\x4c\x73\x65\x63\72\x20\x64\151\x67\145\163\164\x20\x76\x61\154\x69\x64\141\164\x69\157\156\40\146\x61\x69\154\x65\144");
        die;
        N4:
        $OT = FALSE;
        foreach ($xp->getValidatedNodes() as $hT) {
            if ($hT->isSameNode($KQ)) {
                goto G7;
            }
            if ($KQ->parentNode instanceof DOMDocument && $hT->isSameNode($KQ->ownerDocument)) {
                goto T5;
            }
            goto K4;
            G7:
            $OT = TRUE;
            goto c2;
            goto K4;
            T5:
            $OT = TRUE;
            goto c2;
            K4:
            Go:
        }
        c2:
        if ($OT) {
            goto N1;
        }
        echo sprintf("\x58\x4d\x4c\123\145\x63\x3a\40\124\x68\x65\x20\x72\x6f\x6f\x74\40\x65\x6c\145\x6d\x65\x6e\x74\40\x69\163\x20\x6e\157\x74\x20\x73\151\147\x6e\145\144\56");
        die;
        N1:
        $ZY = array();
        foreach (self::xpQuery($VT, "\56\x2f\144\x73\72\113\x65\x79\111\156\x66\x6f\x2f\x64\x73\x3a\x58\x35\x30\71\x44\141\x74\141\57\x64\x73\x3a\x58\x35\x30\x39\103\145\162\x74\151\x66\x69\x63\x61\x74\145") as $OG) {
            $bX = trim($OG->textContent);
            $bX = str_replace(array("\xd", "\12", "\11", "\x20"), '', $bX);
            $ZY[] = $bX;
            np:
        }
        vv:
        $a6 = array("\x53\151\x67\156\141\x74\x75\162\145" => $xp, "\x43\x65\162\x74\x69\x66\x69\x63\141\164\x65\163" => $ZY);
        return $a6;
    }
    public static function validateSignature(array $Hy, XMLSecurityKey $nz)
    {
        $xp = $Hy["\x53\151\147\156\x61\x74\165\162\x65"];
        $Fk = self::xpQuery($xp->sigNode, "\x2e\57\144\x73\x3a\x53\151\147\156\145\144\x49\x6e\x66\157\57\144\163\72\123\x69\147\156\x61\x74\x75\162\145\x4d\x65\x74\150\x6f\144");
        if (!empty($Fk)) {
            goto FC;
        }
        echo sprintf("\x4d\x69\x73\x73\151\x6e\147\x20\123\x69\147\156\141\164\x75\162\145\x4d\145\164\x68\x6f\144\x20\x65\x6c\145\155\x65\x6e\164");
        die;
        FC:
        $Fk = $Fk[0];
        if ($Fk->hasAttribute("\x41\154\x67\x6f\162\x69\164\x68\155")) {
            goto Fx;
        }
        echo sprintf("\x4d\x69\x73\x73\x69\156\147\x20\101\154\x67\x6f\x72\x69\x74\x68\x6d\55\x61\164\x74\x72\151\x62\x75\164\x65\x20\x6f\156\40\123\x69\x67\156\141\164\165\162\145\x4d\145\164\150\157\x64\40\145\x6c\x65\155\145\x6e\x74\x2e");
        die;
        Fx:
        $Zc = $Fk->getAttribute("\101\x6c\147\157\x72\151\x74\150\155");
        if (!($nz->type === XMLSecurityKey::RSA_SHA1 && $Zc !== $nz->type)) {
            goto rU;
        }
        $nz = self::castKey($nz, $Zc);
        rU:
        if ($xp->verify($nz)) {
            goto G0;
        }
        echo sprintf("\125\156\141\142\x6c\145\x20\x74\x6f\x20\166\x61\x6c\151\x64\x61\x74\x65\40\x53\x69\147\x6e\141\x74\165\x72\x65");
        die;
        G0:
    }
    public static function castKey(XMLSecurityKey $nz, $GC, $Dr = "\160\165\x62\x6c\x69\x63")
    {
        if (!($nz->type === $GC)) {
            goto zs;
        }
        return $nz;
        zs:
        $Z9 = openssl_pkey_get_details($nz->key);
        if (!($Z9 === FALSE)) {
            goto Fl;
        }
        echo sprintf("\x55\156\141\x62\154\x65\x20\x74\157\x20\x67\145\164\x20\x6b\145\171\x20\x64\x65\x74\141\151\x6c\163\40\146\x72\x6f\155\x20\x58\115\x4c\x53\x65\143\x75\162\x69\164\171\113\x65\171\56");
        die;
        Fl:
        if (isset($Z9["\x6b\145\x79"])) {
            goto Ti;
        }
        echo sprintf("\x4d\x69\x73\x73\151\x6e\147\40\153\145\171\40\x69\156\x20\x70\165\x62\154\151\x63\x20\x6b\x65\x79\40\x64\145\x74\x61\151\154\163\x2e");
        die;
        Ti:
        $O7 = new XMLSecurityKey($GC, array("\x74\x79\160\145" => $Dr));
        $O7->loadKey($Z9["\153\x65\171"]);
        return $O7;
    }
    public static function processResponse($YF, $Zs, $QZ, SAML2SPResponse $HS, $Ah, $mE)
    {
        $U1 = current($HS->getAssertions());
        $cc = $U1->getNotBefore();
        if (!($cc !== NULL && $cc > time() + 60)) {
            goto m7;
        }
        wp_die("\122\x65\143\145\151\x76\145\144\x20\x61\x6e\x20\141\x73\163\145\x72\x74\151\x6f\156\x20\x74\x68\141\x74\40\x69\x73\40\166\141\x6c\151\144\x20\x69\x6e\40\x74\x68\x65\x20\146\165\x74\x75\162\x65\56\40\103\150\145\143\x6b\40\x63\154\x6f\143\153\x20\163\x79\x6e\x63\x68\x72\157\x6e\x69\x7a\x61\x74\151\157\x6e\x20\157\x6e\40\x49\144\120\x20\x61\x6e\144\x20\123\120\x2e");
        m7:
        $zn = $U1->getNotOnOrAfter();
        if (!($zn !== NULL && $zn <= time() - 60)) {
            goto ES;
        }
        wp_die("\x52\145\143\x65\x69\166\x65\x64\40\141\156\40\141\x73\163\x65\162\164\x69\157\156\40\164\x68\x61\164\x20\x68\141\163\x20\x65\x78\160\151\162\x65\144\x2e\40\103\150\145\x63\x6b\40\143\154\157\143\153\x20\x73\171\156\x63\150\162\157\156\x69\172\141\164\x69\157\x6e\40\x6f\x6e\x20\x49\x64\x50\x20\x61\x6e\144\40\x53\120\56");
        ES:
        $Hx = $U1->getSessionNotOnOrAfter();
        if (!($Hx !== NULL && $Hx <= time() - 60)) {
            goto SW;
        }
        wp_die("\122\x65\x63\145\151\166\x65\x64\x20\141\156\x20\x61\163\163\x65\162\164\151\157\156\x20\167\x69\164\x68\x20\x61\x20\x73\145\163\163\151\x6f\x6e\40\164\150\x61\164\x20\x68\141\x73\40\145\x78\x70\151\x72\x65\x64\56\x20\103\150\145\x63\153\x20\x63\154\x6f\143\x6b\x20\x73\171\x6e\x63\x68\x72\157\x6e\x69\x7a\x61\x74\x69\157\156\40\x6f\156\x20\x49\x64\x50\x20\x61\156\x64\x20\123\x50\x2e");
        SW:
        $wg = $HS->getDestination();
        if (!(substr($wg, -1) == "\x2f")) {
            goto JG;
        }
        $wg = substr($wg, 0, -1);
        JG:
        if (!(substr($YF, -1) == "\57")) {
            goto lg;
        }
        $YF = substr($YF, 0, -1);
        lg:
        if (!($wg !== NULL && $wg !== $YF)) {
            goto wb;
        }
        echo "\x44\x65\x73\164\x69\156\141\x74\x69\157\x6e\40\151\156\40\162\145\x73\160\157\x6e\x73\145\x20\x64\x6f\145\x73\156\x27\164\x20\x6d\141\164\143\x68\40\164\x68\145\40\143\165\x72\162\145\156\164\40\125\122\x4c\x2e\x20\x44\x65\x73\164\x69\x6e\x61\x74\x69\x6f\x6e\40\151\163\x20\x22" . $wg . "\x22\x2c\x20\x63\x75\162\x72\145\156\164\40\x55\x52\114\x20\x69\x73\40\x22" . $YF . "\x22\56";
        die;
        wb:
        $fF = self::checkSign($Zs, $QZ, $Ah, $mE);
        return $fF;
    }
    public static function checkSign($Zs, $QZ, $Ah, $mE)
    {
        $ZY = $QZ["\x43\145\162\x74\151\146\151\143\141\x74\145\163"];
        if (count($ZY) === 0) {
            goto jI;
        }
        $T0 = array();
        $T0[] = $Zs;
        $R5 = self::findCertificate($T0, $ZY, $mE);
        if (!($R5 == false)) {
            goto hP;
        }
        return false;
        hP:
        goto zj;
        jI:
        $aS = maybe_unserialize(get_option("\x73\x61\x6d\154\x5f\170\65\60\x39\137\143\x65\x72\164\x69\146\x69\x63\x61\x74\145"));
        $R5 = $aS[$Ah];
        zj:
        $S2 = NULL;
        $nz = new XMLSecurityKey(XMLSecurityKey::RSA_SHA1, array("\164\x79\x70\x65" => "\160\x75\142\x6c\x69\143"));
        $nz->loadKey($R5);
        try {
            self::validateSignature($QZ, $nz);
            return TRUE;
        } catch (Exception $El) {
            $S2 = $El;
        }
        if ($S2 !== NULL) {
            goto iI;
        }
        return FALSE;
        goto qs;
        iI:
        throw $S2;
        qs:
    }
    public static function validateIssuerAndAudience($yg, $kp, $Df, $mE)
    {
        $Ja = current($yg->getAssertions())->getIssuer();
        $U1 = current($yg->getAssertions());
        $ls = $U1->getValidAudiences();
        if (strcmp($Df, $Ja) === 0) {
            goto QN;
        }
        if ($mE == "\164\x65\163\164\126\x61\154\x69\x64\x61\x74\145") {
            goto D_;
        }
        wp_die("\x57\145\x20\x63\x6f\x75\x6c\144\40\x6e\157\164\40\163\151\147\x6e\40\171\x6f\165\x20\151\156\56\40\120\x6c\x65\141\163\145\40\143\x6f\156\x74\x61\x63\164\40\171\157\165\x72\x20\101\x64\155\151\x6e\151\x73\x74\162\141\x74\157\162", "\105\162\162\157\x72\x20\72\x49\163\x73\165\145\x72\40\143\x61\156\x6e\x6f\x74\x20\x62\x65\40\166\x65\x72\x69\x66\x69\x65\x64");
        goto Gf;
        D_:
        ob_end_clean();
        echo "\74\x64\x69\x76\x20\x73\x74\x79\x6c\x65\x3d\x22\146\157\x6e\164\55\146\x61\155\151\154\x79\x3a\103\x61\154\x69\x62\x72\151\x3b\160\x61\144\144\x69\156\147\72\60\40\x33\x25\x3b\42\76";
        echo "\74\144\x69\x76\40\163\x74\171\154\145\75\42\x63\x6f\154\x6f\x72\72\40\x23\x61\x39\64\x34\x34\62\73\142\141\x63\153\x67\x72\x6f\165\156\x64\55\x63\x6f\x6c\x6f\162\x3a\40\43\x66\x32\144\x65\x64\x65\x3b\160\x61\144\x64\x69\156\x67\72\x20\x31\65\x70\170\x3b\x6d\141\x72\x67\151\156\55\x62\157\x74\x74\157\x6d\72\x20\62\x30\160\x78\x3b\x74\x65\170\164\x2d\x61\154\151\147\x6e\x3a\x63\145\156\164\x65\x72\73\142\x6f\x72\144\x65\x72\x3a\61\x70\x78\x20\x73\157\x6c\x69\x64\x20\x23\105\66\x42\x33\102\62\73\x66\x6f\x6e\x74\x2d\163\x69\172\145\72\x31\x38\x70\x74\x3b\42\76\x20\105\x52\122\117\x52\74\57\x64\151\x76\x3e\xa\x9\11\11\x20\74\x64\151\166\40\x73\x74\x79\154\x65\75\42\143\157\x6c\157\x72\x3a\x20\43\141\71\64\64\64\62\73\146\157\156\164\55\163\151\172\x65\72\61\x34\160\164\73\40\x6d\x61\162\x67\151\156\x2d\142\x6f\164\164\x6f\x6d\x3a\62\60\x70\170\x3b\x22\x3e\x3c\x70\76\x3c\x73\x74\x72\x6f\156\147\x3e\105\162\162\x6f\x72\72\40\74\57\x73\x74\x72\x6f\x6e\147\76\x49\x73\x73\x75\145\162\40\x63\141\x6e\x6e\x6f\x74\40\142\145\x20\166\145\x72\151\146\151\x65\x64\56\74\x2f\160\76\12\11\x9\11\x20\x3c\160\76\x50\x6c\x65\x61\x73\x65\40\143\x6f\x6e\x74\141\x63\164\x20\x79\x6f\165\162\x20\x61\144\x6d\x69\156\151\163\x74\162\141\x74\157\162\x20\x61\x6e\144\x20\162\145\x70\157\x72\164\40\164\150\x65\40\x66\x6f\154\154\157\167\151\156\147\x20\145\162\162\x6f\x72\72\74\57\160\x3e\12\x9\x9\11\40\x3c\160\x3e\74\x73\164\x72\157\156\147\x3e\120\x6f\x73\x73\x69\142\154\145\x20\x43\x61\165\163\145\72\x20\x3c\57\163\x74\162\x6f\156\147\76\x49\x64\x50\x20\x45\x6e\164\x69\164\x79\40\111\x44\x20\143\157\156\x66\x69\147\x75\x72\x65\x64\40\x69\156\x20\x74\150\145\40\x70\154\165\147\151\x6e\x20\x69\x73\x20\151\156\143\157\162\162\145\x63\164\74\57\160\x3e\xa\x9\x9\x9\40\74\x70\x3e\x3c\163\164\x72\157\156\147\76\x45\156\164\x69\164\x79\40\x49\x44\40\x69\x6e\40\x53\101\115\114\40\x52\x65\x73\160\x6f\156\x73\145\72\x20\x3c\x2f\163\164\x72\157\156\x67\76" . $Ja . "\x3c\x70\76\12\x9\11\x9\40\x3c\160\76\x3c\x73\x74\x72\157\x6e\x67\x3e\x45\x6e\164\x69\164\171\x20\x49\104\x20\143\157\x6e\x66\x69\x67\x75\162\145\144\x20\x69\x6e\40\x74\150\x65\40\160\x6c\x75\147\151\156\x3a\x20\x3c\x2f\163\164\162\x6f\x6e\147\x3e" . $Df . "\74\57\x70\76\12\x9\11\11\x20\x3c\x2f\x64\151\166\76\xa\x9\x9\x9\40\74\144\x69\x76\40\x73\164\171\x6c\x65\75\42\155\141\x72\147\151\x6e\72\x33\x25\x3b\144\151\163\x70\x6c\141\x79\72\142\154\x6f\x63\153\x3b\x74\x65\x78\164\x2d\141\154\151\147\156\x3a\143\x65\x6e\164\145\x72\x3b\42\x3e\xa\11\11\11\x20\74\x64\151\166\40\x73\x74\171\154\x65\x3d\42\x6d\x61\162\147\x69\x6e\x3a\x33\45\x3b\144\x69\163\x70\154\141\x79\72\142\154\x6f\143\153\73\164\x65\x78\x74\x2d\x61\154\151\147\x6e\72\x63\145\156\164\145\162\x3b\42\x3e\74\x69\x6e\160\165\164\x20\x73\x74\171\x6c\145\x3d\42\x70\141\144\144\x69\156\x67\72\x31\45\x3b\x77\151\144\164\150\x3a\61\60\60\160\170\x3b\x62\141\143\x6b\147\x72\157\165\x6e\x64\x3a\40\x23\60\x30\x39\x31\x43\x44\x20\x6e\x6f\x6e\145\40\162\145\x70\145\141\164\x20\163\x63\x72\157\x6c\x6c\40\60\x25\x20\60\x25\x3b\143\165\x72\x73\x6f\x72\x3a\x20\160\x6f\x69\x6e\164\145\x72\x3b\x66\157\156\164\55\163\151\172\x65\x3a\61\65\160\170\73\142\157\162\144\145\x72\55\x77\x69\x64\x74\x68\72\40\61\160\x78\x3b\x62\157\x72\x64\145\x72\x2d\x73\x74\x79\x6c\145\72\x20\x73\x6f\x6c\x69\x64\73\x62\x6f\162\144\x65\162\x2d\x72\x61\x64\151\165\163\72\40\x33\160\170\73\x77\x68\x69\x74\145\55\x73\x70\141\x63\x65\72\40\x6e\x6f\x77\x72\x61\160\x3b\x62\157\170\55\x73\x69\x7a\x69\156\x67\72\x20\142\157\162\144\145\162\x2d\x62\157\170\x3b\142\x6f\x72\144\145\162\55\x63\157\154\x6f\x72\72\40\x23\60\x30\x37\63\101\x41\73\x62\x6f\170\x2d\x73\x68\141\x64\x6f\x77\x3a\x20\60\x70\x78\x20\61\160\170\40\60\160\x78\x20\162\x67\x62\x61\x28\61\62\x30\54\40\62\60\60\54\40\62\63\x30\x2c\40\60\56\x36\51\40\x69\x6e\163\145\x74\x3b\x63\157\154\x6f\x72\x3a\x20\43\x46\x46\106\73\42\164\x79\160\x65\75\42\x62\165\x74\164\157\x6e\42\40\166\141\154\165\145\x3d\42\x44\x6f\x6e\145\42\40\x6f\x6e\103\154\151\143\153\75\42\x73\x65\154\146\56\143\154\x6f\x73\x65\x28\x29\73\42\x3e\x3c\x2f\x64\x69\x76\x3e";
        die;
        Gf:
        goto WZ;
        QN:
        if (empty($ls)) {
            goto ot;
        }
        if (in_array($kp, $ls, TRUE)) {
            goto mr;
        }
        if ($mE == "\164\145\x73\164\x56\141\x6c\x69\x64\x61\164\x65") {
            goto Br;
        }
        wp_die("\x57\145\40\143\x6f\165\154\x64\40\156\157\164\40\x73\x69\x67\156\40\171\x6f\x75\40\151\x6e\x2e\x20\x50\x6c\145\x61\163\145\x20\143\x6f\156\164\x61\x63\164\40\x79\x6f\x75\x72\40\101\144\x6d\151\x6e\151\163\164\x72\141\x74\x6f\x72", "\105\162\162\157\x72\40\x3a\x49\156\166\x61\x6c\x69\144\40\x41\x75\x64\151\x65\x6e\143\145\x20\125\x52\x49");
        goto hH;
        Br:
        ob_end_clean();
        echo "\x3c\144\151\x76\40\x73\164\171\154\145\x3d\42\x66\x6f\x6e\164\x2d\x66\141\x6d\x69\154\x79\x3a\x43\x61\x6c\151\x62\162\x69\x3b\160\141\144\x64\151\156\x67\x3a\60\40\63\45\x3b\x22\76";
        echo "\x3c\x64\x69\166\40\x73\x74\x79\x6c\x65\75\x22\143\x6f\x6c\x6f\162\72\40\x23\141\71\x34\x34\x34\62\73\x62\141\x63\153\147\162\x6f\165\x6e\x64\x2d\x63\157\x6c\x6f\162\72\40\43\x66\62\x64\x65\144\x65\x3b\160\141\x64\x64\x69\x6e\147\x3a\x20\x31\65\x70\170\73\155\141\x72\x67\151\x6e\x2d\x62\157\164\x74\x6f\155\72\x20\62\60\x70\x78\x3b\x74\x65\170\x74\x2d\x61\154\x69\147\156\72\x63\x65\156\164\x65\x72\x3b\x62\x6f\162\x64\145\162\x3a\x31\x70\170\x20\163\x6f\x6c\x69\x64\40\43\x45\x36\x42\63\x42\x32\73\x66\157\156\164\x2d\163\151\172\145\x3a\61\x38\160\164\73\42\x3e\x20\x45\122\122\x4f\122\x3c\x2f\x64\x69\x76\x3e\12\40\40\x20\x20\40\40\x20\x20\40\x20\x20\x20\40\x20\x20\x20\40\40\40\40\x3c\144\151\x76\40\163\164\171\154\x65\x3d\x22\x63\x6f\154\157\x72\72\40\43\141\x39\64\x34\x34\62\73\146\157\x6e\x74\x2d\x73\151\x7a\x65\72\x31\64\160\164\73\x20\155\x61\162\x67\x69\x6e\55\142\x6f\x74\164\157\155\72\x32\60\160\170\x3b\42\x3e\x3c\160\76\74\163\x74\x72\x6f\156\x67\76\x45\162\162\x6f\x72\72\40\74\x2f\x73\164\162\x6f\156\147\76\x49\x6e\166\141\154\x69\x64\x20\x41\165\x64\151\145\x6e\x63\145\x20\x55\x52\x49\x2e\74\x2f\x70\x3e\12\40\x20\x20\x20\x20\x20\x20\40\40\40\x20\40\x20\40\40\40\40\40\x20\x20\74\x70\76\120\x6c\x65\141\163\x65\40\143\157\156\164\x61\x63\x74\40\171\157\165\162\40\141\x64\x6d\151\x6e\x69\x73\164\x72\141\164\x6f\x72\x20\141\x6e\144\x20\x72\145\x70\x6f\162\164\40\x74\150\x65\x20\x66\x6f\154\154\157\x77\x69\156\147\x20\145\162\x72\x6f\x72\x3a\74\x2f\160\x3e\12\40\x20\40\40\40\x20\x20\x20\x20\x20\x20\x20\x20\40\x20\x20\40\x20\x20\x20\74\x70\x3e\x3c\163\x74\162\157\x6e\x67\76\120\x6f\163\163\x69\x62\154\145\40\x43\x61\165\163\x65\72\40\74\57\163\x74\x72\x6f\x6e\x67\x3e\124\150\x65\40\x76\141\154\x75\145\40\x6f\146\x20\x27\101\165\x64\x69\145\x6e\143\x65\x20\125\122\x49\x27\40\x66\151\x65\154\x64\x20\157\156\x20\x49\x64\145\156\x74\x69\x74\x79\40\120\x72\157\166\151\x64\x65\x72\x27\163\x20\163\x69\144\145\40\x69\163\40\151\156\143\x6f\162\x72\145\143\x74\x3c\x2f\160\76\12\40\40\x20\x20\x20\x20\40\40\40\40\x20\40\x20\40\x20\x20\40\40\40\40\74\x70\x3e\105\x78\160\x65\x63\164\145\144\40\157\x6e\x65\x20\157\x66\40\164\150\x65\x20\101\x75\144\x69\x65\x6e\x63\x65\163\40\x74\x6f\40\x62\x65\x3a\40" . $kp . "\x3c\x70\x3e\12\x20\40\x20\40\x20\x20\40\40\40\x20\40\x20\40\40\40\40\x20\40\x20\x20\74\x2f\144\x69\x76\x3e\xa\x20\40\40\40\x20\40\40\x20\x20\40\x20\x20\x20\x20\x20\40\40\40\40\x20\74\144\151\x76\x20\163\x74\x79\x6c\145\x3d\x22\155\x61\162\x67\151\x6e\x3a\x33\45\x3b\x64\151\163\160\154\141\x79\72\x62\x6c\157\x63\153\73\x74\145\x78\x74\x2d\x61\x6c\151\x67\156\x3a\x63\x65\156\164\145\162\73\x22\76\xa\40\40\x20\x20\x20\40\x20\40\x20\x20\x20\40\40\x20\x20\x20\x20\40\40\40\74\144\x69\166\x20\163\x74\x79\x6c\x65\x3d\x22\x6d\x61\x72\147\151\x6e\x3a\63\45\x3b\144\x69\x73\x70\x6c\x61\x79\x3a\142\x6c\157\x63\x6b\x3b\x74\145\170\164\55\x61\x6c\151\x67\x6e\x3a\x63\145\x6e\164\145\x72\73\x22\x3e\x3c\151\x6e\160\x75\164\x20\163\164\x79\x6c\145\75\x22\x70\x61\144\144\x69\156\147\72\61\x25\73\x77\151\144\x74\x68\x3a\x31\60\x30\x70\x78\73\142\141\x63\x6b\147\x72\157\x75\156\144\x3a\x20\x23\60\x30\x39\61\x43\104\x20\x6e\157\x6e\x65\40\x72\x65\x70\x65\x61\164\x20\x73\x63\162\x6f\x6c\154\x20\60\45\x20\60\45\x3b\x63\x75\162\x73\x6f\x72\72\x20\160\x6f\x69\x6e\x74\x65\162\x3b\146\157\156\164\55\x73\x69\172\145\72\x31\x35\160\x78\x3b\x62\157\162\144\x65\162\x2d\167\x69\x64\164\x68\72\40\61\160\170\73\x62\157\162\144\x65\x72\55\163\x74\171\x6c\145\72\40\x73\x6f\154\x69\144\x3b\142\157\x72\x64\145\162\55\162\x61\144\151\x75\x73\72\40\63\160\x78\73\x77\150\x69\164\145\x2d\163\x70\x61\143\145\x3a\x20\156\x6f\167\x72\x61\160\x3b\x62\x6f\x78\55\163\x69\x7a\151\x6e\147\72\x20\x62\157\x72\x64\145\x72\55\x62\x6f\x78\x3b\x62\157\162\144\x65\x72\55\143\157\x6c\157\x72\72\x20\x23\60\x30\67\x33\101\101\x3b\x62\157\x78\55\x73\x68\x61\144\157\x77\x3a\40\x30\160\x78\x20\x31\x70\x78\x20\60\x70\x78\x20\x72\x67\x62\141\x28\61\x32\x30\54\40\x32\x30\60\x2c\x20\x32\63\60\x2c\40\60\56\x36\51\40\x69\x6e\x73\145\x74\73\143\157\x6c\x6f\162\x3a\x20\x23\106\x46\106\73\x22\x74\x79\x70\145\x3d\x22\142\165\164\164\157\x6e\42\x20\x76\x61\x6c\x75\145\x3d\42\104\x6f\x6e\x65\x22\40\157\x6e\x43\154\x69\143\x6b\75\42\163\x65\x6c\x66\56\143\154\157\163\145\x28\51\73\42\x3e\74\x2f\144\x69\x76\76";
        die;
        hH:
        goto E0;
        mr:
        return TRUE;
        E0:
        ot:
        WZ:
    }
    private static function findCertificate(array $Ia, array $ZY, $mE)
    {
        $z3 = array();
        foreach ($ZY as $nM) {
            $Bv = strtolower(sha1(base64_decode($nM)));
            if (in_array($Bv, $Ia, TRUE)) {
                goto VK;
            }
            $z3[] = $Bv;
            return false;
            VK:
            $xC = "\55\55\x2d\x2d\55\x42\x45\x47\x49\x4e\x20\103\x45\122\124\x49\106\111\103\x41\x54\105\x2d\x2d\55\x2d\55\xa" . chunk_split($nM, 64) . "\x2d\55\x2d\x2d\55\105\116\x44\x20\x43\105\122\124\111\x46\111\x43\101\x54\105\x2d\x2d\55\x2d\x2d\xa";
            return $xC;
            Ff:
        }
        gE:
        if ($mE == "\164\x65\163\x74\x56\141\x6c\x69\x64\141\x74\145") {
            goto Mz;
        }
        wp_die("\x57\x65\x20\x63\x6f\165\154\x64\40\x6e\157\x74\x20\163\151\147\x6e\x20\171\157\165\x20\151\x6e\56\40\x50\154\x65\x61\163\145\x20\x63\157\156\x74\x61\143\x74\x20\171\x6f\165\x72\40\101\x64\x6d\151\156\x69\x73\164\162\x61\164\x6f\x72", "\105\162\162\x6f\x72\x20\x3a\103\x65\162\164\x69\146\151\143\141\x74\145\x20\156\x6f\164\x20\x66\157\165\x6e\144");
        goto Vw;
        Mz:
        $xC = "\x2d\x2d\55\55\x2d\102\105\107\x49\116\x20\103\x45\x52\124\x49\x46\x49\103\101\124\x45\55\55\55\x2d\x2d\74\x62\x72\x3e" . chunk_split($nM, 64) . "\74\x62\x72\76\55\55\55\55\x2d\105\116\104\x20\x43\105\x52\x54\x49\x46\x49\x43\x41\124\x45\55\55\x2d\x2d\55";
        echo "\74\144\x69\166\x20\163\164\x79\154\x65\x3d\42\x66\x6f\156\x74\x2d\x66\x61\155\x69\x6c\x79\72\103\141\154\x69\142\x72\151\x3b\x70\141\x64\x64\x69\x6e\x67\x3a\60\x20\x33\45\73\42\76";
        echo "\74\x64\151\166\x20\x73\x74\171\154\145\x3d\42\x63\157\154\x6f\x72\72\x20\x23\141\x39\x34\x34\x34\x32\x3b\x62\x61\143\x6b\x67\x72\157\165\156\x64\55\x63\157\154\157\162\x3a\x20\x23\146\62\144\145\x64\145\x3b\160\x61\x64\x64\151\156\x67\x3a\40\61\65\x70\170\73\155\141\x72\147\151\x6e\x2d\x62\x6f\164\164\x6f\155\72\40\62\60\x70\170\x3b\x74\145\x78\164\x2d\141\x6c\x69\147\156\72\143\145\156\164\x65\x72\x3b\142\157\x72\144\145\x72\x3a\61\160\170\40\163\x6f\154\x69\x64\40\43\x45\x36\102\63\x42\x32\73\x66\x6f\x6e\x74\55\x73\151\x7a\145\x3a\61\70\x70\x74\x3b\x22\76\40\x45\x52\x52\117\x52\74\x2f\144\x69\166\76\12\x9\x9\x9\x3c\144\151\166\40\x73\x74\x79\x6c\x65\x3d\x22\x63\x6f\154\157\x72\x3a\40\x23\x61\71\x34\x34\64\62\x3b\x66\157\x6e\x74\x2d\163\151\172\145\72\x31\64\160\x74\73\x20\155\x61\162\147\151\x6e\x2d\142\157\x74\x74\157\x6d\x3a\62\x30\160\x78\73\42\76\74\x70\76\x3c\163\x74\x72\157\x6e\147\x3e\105\162\162\x6f\162\x3a\40\x3c\x2f\x73\x74\x72\157\x6e\x67\76\125\156\x61\142\x6c\145\40\x74\x6f\x20\146\x69\156\144\40\141\x20\x63\145\162\x74\x69\x66\151\x63\x61\x74\145\x20\155\141\x74\143\150\x69\156\x67\x20\x74\x68\x65\40\x63\157\156\x66\151\147\x75\x72\145\144\40\x66\151\156\x67\145\x72\160\162\x69\x6e\x74\x2e\x3c\x2f\x70\x3e\xa\11\11\x9\74\160\x3e\x50\154\x65\141\x73\x65\x20\143\x6f\156\x74\141\x63\164\x20\x79\x6f\165\x72\x20\x61\144\155\x69\156\x69\x73\x74\x72\141\x74\x6f\162\40\141\156\144\40\162\145\160\157\162\164\40\x74\150\145\x20\x66\x6f\154\154\157\167\151\x6e\147\40\145\x72\162\x6f\162\72\74\x2f\160\x3e\xa\x9\11\11\x3c\x70\76\74\163\x74\162\157\156\147\x3e\x50\157\163\x73\151\x62\154\145\x20\x43\x61\165\x73\145\x3a\x20\74\57\163\164\162\x6f\x6e\x67\x3e\47\x58\56\x35\x30\71\40\x43\x65\162\x74\x69\146\151\143\141\x74\x65\x27\40\x66\x69\x65\x6c\144\x20\151\156\x20\160\x6c\165\147\151\156\40\144\157\145\x73\40\156\157\x74\40\x6d\141\x74\143\x68\40\x74\150\x65\40\143\145\x72\x74\x69\x66\151\x63\141\164\145\x20\x66\x6f\165\156\144\40\151\x6e\40\123\x41\115\114\40\122\145\163\x70\x6f\x6e\x73\x65\56\x3c\x2f\160\x3e\xa\x9\11\11\x3c\160\x3e\x3c\x73\x74\162\x6f\156\147\76\103\145\162\164\x69\146\151\x63\141\164\145\40\146\157\165\156\x64\40\151\x6e\x20\x53\x41\115\x4c\x20\122\x65\163\160\x6f\156\x73\145\72\x20\74\57\x73\164\x72\157\156\147\x3e\x3c\142\162\x3e\74\142\x72\76" . $xC . "\x3c\57\160\76\12\11\x9\11\x9\x9\74\57\144\x69\166\x3e\12\x9\11\11\11\x9\x3c\x64\x69\x76\40\x73\x74\x79\x6c\145\75\42\x6d\141\162\x67\x69\156\72\x33\x25\x3b\x64\x69\163\160\x6c\x61\x79\x3a\x62\x6c\157\143\x6b\x3b\164\x65\x78\x74\55\141\154\x69\x67\156\72\x63\145\x6e\x74\x65\x72\73\42\76\xa\x9\x9\x9\x9\x9\74\x66\157\162\155\x20\x61\x63\164\151\157\156\75\x22\151\156\x64\145\x78\x2e\x70\150\x70\x22\76\xa\11\x9\x9\11\11\74\144\x69\166\x20\163\164\171\154\x65\x3d\42\155\x61\162\147\151\x6e\x3a\63\x25\x3b\144\151\x73\x70\x6c\x61\x79\x3a\142\x6c\x6f\x63\x6b\73\164\145\170\x74\55\x61\x6c\x69\x67\156\x3a\x63\145\x6e\x74\x65\162\73\x22\x3e\74\x69\x6e\x70\x75\164\x20\163\164\171\154\x65\x3d\x22\160\x61\144\x64\151\x6e\147\x3a\x31\x25\73\x77\151\144\164\x68\x3a\61\x30\x30\x70\x78\73\x62\x61\x63\153\147\x72\x6f\165\156\x64\72\40\43\60\60\x39\61\103\104\40\156\157\156\145\40\162\x65\160\145\141\164\40\163\x63\162\x6f\154\x6c\40\60\45\x20\60\45\73\143\x75\162\x73\x6f\x72\72\40\160\x6f\151\156\x74\145\x72\x3b\x66\157\x6e\164\x2d\x73\151\172\145\72\61\65\160\x78\73\x62\157\162\x64\145\162\x2d\167\x69\x64\164\150\72\40\x31\x70\170\x3b\x62\x6f\x72\144\145\x72\x2d\163\x74\171\154\x65\72\40\x73\157\x6c\151\144\73\142\157\x72\x64\145\x72\55\x72\x61\144\151\165\163\72\40\x33\x70\x78\73\x77\150\x69\x74\145\55\163\160\141\143\145\x3a\x20\x6e\x6f\x77\x72\141\x70\73\x62\x6f\170\55\x73\x69\x7a\151\156\x67\x3a\40\142\157\162\144\x65\162\x2d\142\157\x78\x3b\142\157\x72\144\x65\162\x2d\143\x6f\x6c\157\162\x3a\x20\43\60\x30\x37\63\x41\101\x3b\142\x6f\170\55\x73\x68\x61\x64\x6f\x77\x3a\40\60\160\x78\x20\61\160\170\40\60\160\x78\x20\x72\x67\142\141\x28\61\62\60\x2c\40\x32\x30\60\x2c\40\x32\63\60\54\40\60\56\x36\51\x20\x69\156\x73\x65\x74\x3b\143\x6f\x6c\x6f\x72\x3a\x20\x23\x46\x46\x46\x3b\x22\x74\171\x70\x65\75\42\x62\165\x74\x74\x6f\156\x22\40\166\x61\x6c\x75\145\75\x22\x44\x6f\156\x65\42\40\157\156\x43\x6c\151\x63\x6b\75\x22\163\145\x6c\x66\56\143\154\x6f\x73\145\x28\51\x3b\42\76\x3c\x2f\144\151\166\76";
        die;
        Vw:
    }
    private static function doDecryptElement(DOMElement $D8, XMLSecurityKey $ur, array &$hO)
    {
        $Ds = new XMLSecEnc();
        $Ds->setNode($D8);
        $Ds->type = $D8->getAttribute("\x54\x79\x70\x65");
        $Rk = $Ds->locateKey($D8);
        if ($Rk) {
            goto OZ;
        }
        echo sprintf("\x43\x6f\x75\154\x64\x20\156\157\x74\40\x6c\x6f\143\x61\x74\x65\40\153\145\171\40\x61\x6c\147\x6f\162\151\164\x68\x6d\40\151\x6e\x20\x65\x6e\x63\x72\x79\160\164\x65\144\40\144\141\164\x61\56");
        die;
        OZ:
        $jt = $Ds->locateKeyInfo($Rk);
        if ($jt) {
            goto UV;
        }
        echo sprintf("\x43\157\x75\x6c\144\40\x6e\157\x74\x20\x6c\157\143\141\x74\145\40\74\144\x73\151\x67\x3a\113\x65\x79\x49\156\x66\x6f\76\40\146\157\x72\40\164\x68\145\x20\145\156\x63\162\171\x70\164\x65\144\x20\153\145\171\56");
        die;
        UV:
        $DA = $ur->getAlgorith();
        if ($jt->isEncrypted) {
            goto hg;
        }
        $ab = $Rk->getAlgorith();
        if (!($DA !== $ab)) {
            goto sd;
        }
        echo sprintf("\101\154\x67\157\162\151\x74\150\x6d\x20\155\x69\x73\x6d\141\164\x63\150\40\142\145\164\167\x65\x65\x6e\40\151\x6e\160\x75\164\40\x6b\145\171\40\x61\156\x64\x20\153\x65\x79\x20\151\156\40\155\x65\x73\x73\141\147\145\56\x20" . "\113\145\171\x20\167\x61\x73\x3a\x20" . var_export($DA, TRUE) . "\73\40\x6d\x65\163\163\141\147\x65\40\x77\141\163\x3a\40" . var_export($ab, TRUE));
        die;
        sd:
        $Rk = $ur;
        goto e1;
        hg:
        $aw = $jt->getAlgorith();
        if (!in_array($aw, $hO, TRUE)) {
            goto BL;
        }
        echo sprintf("\x41\x6c\147\x6f\x72\151\164\x68\155\40\x64\151\163\141\142\x6c\145\144\72\40" . var_export($aw, TRUE));
        die;
        BL:
        if (!($aw === XMLSecurityKey::RSA_OAEP_MGF1P && $DA === XMLSecurityKey::RSA_1_5)) {
            goto tG;
        }
        $DA = XMLSecurityKey::RSA_OAEP_MGF1P;
        tG:
        if (!($DA !== $aw)) {
            goto At;
        }
        echo sprintf("\101\x6c\x67\157\x72\151\164\150\x6d\40\x6d\x69\x73\155\141\164\143\x68\x20\142\x65\164\167\x65\x65\x6e\x20\151\156\160\165\164\x20\153\x65\x79\x20\141\156\144\40\x6b\x65\x79\40\x75\163\145\144\x20\164\157\x20\145\x6e\x63\x72\x79\x70\164\40" . "\x20\x74\150\x65\x20\163\x79\155\155\x65\164\x72\151\143\40\153\145\x79\x20\146\157\162\x20\164\150\x65\40\155\x65\163\x73\x61\x67\145\x2e\x20\x4b\x65\171\40\x77\x61\x73\x3a\x20" . var_export($DA, TRUE) . "\73\40\x6d\x65\x73\163\141\x67\x65\x20\x77\x61\x73\72\40" . var_export($aw, TRUE));
        die;
        At:
        $xX = $jt->encryptedCtx;
        $jt->key = $ur->key;
        $Bm = $Rk->getSymmetricKeySize();
        if (!($Bm === NULL)) {
            goto cV;
        }
        echo sprintf("\x55\156\x6b\156\157\167\156\x20\x6b\x65\171\40\x73\151\x7a\145\x20\x66\157\x72\40\145\156\143\162\171\x70\164\151\x6f\156\40\x61\x6c\x67\157\x72\x69\x74\x68\x6d\72\x20" . var_export($Rk->type, TRUE));
        die;
        cV:
        try {
            $nz = $xX->decryptKey($jt);
            if (!(strlen($nz) != $Bm)) {
                goto mc;
            }
            echo sprintf("\125\156\145\170\160\x65\143\164\x65\x64\40\153\x65\171\40\x73\x69\172\145\x20\50" . strlen($nz) * 8 . "\x62\x69\x74\163\x29\x20\x66\157\162\40\145\156\143\162\171\160\164\151\157\x6e\x20\x61\x6c\x67\x6f\162\x69\164\x68\155\72\x20" . var_export($Rk->type, TRUE));
            die;
            mc:
        } catch (Exception $El) {
            $Tj = $xX->getCipherValue();
            $r8 = openssl_pkey_get_details($jt->key);
            $r8 = sha1(serialize($r8), TRUE);
            $nz = sha1($Tj . $r8, TRUE);
            if (strlen($nz) > $Bm) {
                goto IF1;
            }
            if (strlen($nz) < $Bm) {
                goto vC;
            }
            goto dU;
            IF1:
            $nz = substr($nz, 0, $Bm);
            goto dU;
            vC:
            $nz = str_pad($nz, $Bm);
            dU:
        }
        $Rk->loadkey($nz);
        e1:
        $GC = $Rk->getAlgorith();
        if (!in_array($GC, $hO, TRUE)) {
            goto QY;
        }
        echo sprintf("\x41\x6c\147\x6f\162\151\164\150\x6d\40\x64\151\x73\x61\142\154\145\144\72\40" . var_export($GC, TRUE));
        die;
        QY:
        $Bc = $Ds->decryptNode($Rk, FALSE);
        $vw = "\x3c\x72\x6f\x6f\x74\40\170\155\154\156\163\x3a\163\141\155\x6c\x3d\42\x75\162\156\72\157\x61\x73\151\163\x3a\156\141\x6d\x65\163\72\164\143\72\x53\101\x4d\x4c\72\62\x2e\60\x3a\x61\x73\163\145\162\x74\151\157\156\x22\40" . "\170\x6d\154\156\163\x3a\170\163\x69\x3d\x22\150\164\x74\160\72\57\x2f\167\167\x77\56\167\63\56\157\x72\x67\57\x32\x30\x30\x31\x2f\130\x4d\114\x53\143\x68\x65\x6d\141\55\x69\x6e\x73\164\141\x6e\x63\x65\42\76" . $Bc . "\74\57\162\x6f\157\x74\76";
        $RV = new DOMDocument();
        if (@$RV->loadXML($vw)) {
            goto xG;
        }
        echo sprintf("\106\x61\x69\154\x65\144\40\x74\157\40\160\141\x72\163\145\40\x64\x65\x63\162\x79\160\x74\145\x64\40\x58\x4d\114\56\40\x4d\141\171\x62\145\40\x74\x68\x65\40\167\162\x6f\x6e\147\x20\x73\x68\x61\162\145\144\x6b\x65\171\x20\167\x61\163\40\165\163\145\144\x3f");
        throw new Exception("\106\141\x69\x6c\145\144\x20\164\x6f\x20\160\141\162\163\145\40\x64\145\143\x72\x79\x70\x74\x65\144\40\130\x4d\x4c\56\x20\115\x61\x79\x62\145\40\x74\x68\x65\x20\x77\162\157\x6e\x67\x20\163\150\141\162\145\x64\x6b\145\171\40\x77\141\163\40\x75\163\x65\144\x3f");
        xG:
        $b8 = $RV->firstChild->firstChild;
        if (!($b8 === NULL)) {
            goto Jv;
        }
        echo sprintf("\115\151\163\163\151\x6e\x67\40\145\156\143\162\x79\160\x74\145\x64\40\x65\x6c\x65\155\x65\x6e\x74\x2e");
        throw new Exception("\115\x69\163\x73\151\156\147\x20\145\156\143\162\x79\160\x74\145\x64\x20\145\x6c\x65\155\x65\x6e\x74\56");
        Jv:
        if ($b8 instanceof DOMElement) {
            goto FJ;
        }
        echo sprintf("\104\x65\x63\x72\x79\160\164\x65\x64\x20\x65\x6c\x65\155\x65\x6e\x74\40\167\x61\x73\40\x6e\x6f\164\40\x61\x63\164\x75\x61\154\x6c\x79\x20\141\40\104\117\x4d\105\x6c\x65\x6d\x65\x6e\164\x2e");
        FJ:
        return $b8;
    }
    public static function decryptElement(DOMElement $D8, XMLSecurityKey $ur, array $hO = array(), XMLSecurityKey $vV = NULL)
    {
        try {
            return self::doDecryptElement($D8, $ur, $hO);
        } catch (Exception $El) {
            try {
                return self::doDecryptElement($D8, $vV, $hO);
            } catch (Exception $GQ) {
            }
            echo sprintf("\x46\141\x69\x6c\x65\x64\40\x74\157\40\144\145\x63\162\x79\160\164\40\130\x4d\x4c\x20\145\x6c\x65\x6d\145\x6e\164\x2e");
            die;
        }
    }
    public static function get_mapped_groups($Ys, $BW)
    {
        $mP = array();
        if (empty($BW)) {
            goto x7;
        }
        $Sw = array();
        $Qj = 1;
        kn:
        if (!($Qj < 10)) {
            goto ap;
        }
        $lr = $Ys->get("\147\x72\x6f\165\160" . $Qj . "\137\155\x61\x70");
        $Sw[$Qj] = explode("\x3b", $lr);
        $Qj++;
        goto kn;
        ap:
        x7:
        foreach ($BW as $Et) {
            if (empty($Et)) {
                goto QG;
            }
            $Qj = 0;
            $nc = false;
            TX:
            if (!($Qj < 9 && !$nc)) {
                goto Xt;
            }
            if (!(!empty($Sw[$Qj]) && in_array($Et, $Sw[$Qj], TRUE))) {
                goto XV;
            }
            $mP[] = $Ys->get("\147\x72\x6f\165\x70" . $Qj);
            $nc = true;
            XV:
            $Qj++;
            goto TX;
            Xt:
            QG:
            Mb:
        }
        uY:
        return array_unique($mP);
    }
    public static function getEncryptionAlgorithm($lY)
    {
        switch ($lY) {
            case "\150\164\x74\160\72\x2f\57\167\x77\x77\x2e\167\63\56\157\x72\x67\x2f\x32\x30\x30\x31\57\x30\x34\57\x78\155\154\x65\156\143\x23\x74\162\151\x70\x6c\x65\x64\x65\x73\55\143\142\143":
                return XMLSecurityKey::TRIPLEDES_CBC;
                goto bw;
            case "\x68\x74\164\160\72\57\x2f\x77\x77\167\x2e\167\x33\56\x6f\162\x67\x2f\62\60\x30\61\57\x30\x34\x2f\170\155\154\x65\156\143\x23\x61\145\163\61\62\x38\55\143\142\x63":
                return XMLSecurityKey::AES128_CBC;
            case "\x68\164\x74\x70\72\57\x2f\x77\167\167\x2e\167\63\x2e\157\x72\x67\x2f\62\60\x30\61\x2f\x30\x34\x2f\x78\x6d\x6c\145\156\143\43\x61\x65\x73\x31\x39\62\x2d\x63\x62\143":
                return XMLSecurityKey::AES192_CBC;
                goto bw;
            case "\150\164\164\160\x3a\x2f\57\167\167\x77\56\167\x33\56\157\x72\x67\x2f\x32\60\60\x31\57\x30\64\57\x78\x6d\154\145\x6e\x63\43\141\x65\163\62\x35\66\x2d\x63\x62\143":
                return XMLSecurityKey::AES256_CBC;
                goto bw;
            case "\x68\x74\x74\160\72\57\57\x77\x77\x77\x2e\167\63\x2e\x6f\x72\x67\x2f\62\60\60\61\x2f\60\64\x2f\x78\x6d\x6c\145\156\x63\x23\x72\163\x61\x2d\x31\137\x35":
                return XMLSecurityKey::RSA_1_5;
                goto bw;
            case "\x68\x74\x74\x70\x3a\x2f\57\x77\167\x77\56\167\x33\56\157\162\147\57\62\60\x30\x31\57\x30\x34\57\170\155\154\x65\x6e\143\43\162\x73\x61\55\x6f\141\145\160\x2d\155\147\146\61\160":
                return XMLSecurityKey::RSA_OAEP_MGF1P;
                goto bw;
            case "\150\164\164\160\72\x2f\57\167\167\x77\x2e\167\x33\x2e\x6f\162\x67\57\x32\x30\x30\60\57\60\x39\57\x78\x6d\154\x64\163\x69\147\43\x64\163\141\x2d\x73\150\141\x31":
                return XMLSecurityKey::DSA_SHA1;
                goto bw;
            case "\150\x74\164\x70\72\57\57\167\x77\x77\x2e\x77\63\56\157\162\x67\57\x32\60\60\x30\57\x30\71\x2f\x78\x6d\154\x64\x73\x69\147\43\x72\163\141\x2d\x73\150\141\61":
                return XMLSecurityKey::RSA_SHA1;
                goto bw;
            case "\x68\164\x74\x70\x3a\x2f\57\167\x77\167\x2e\x77\x33\x2e\157\x72\147\57\62\x30\x30\x31\57\60\64\x2f\170\x6d\x6c\x64\163\151\147\x2d\x6d\x6f\x72\x65\43\162\163\x61\x2d\x73\150\141\62\65\x36":
                return XMLSecurityKey::RSA_SHA256;
                goto bw;
            case "\x68\164\x74\x70\72\57\57\167\167\167\56\x77\63\x2e\157\162\147\x2f\62\x30\x30\x31\x2f\x30\x34\57\170\x6d\154\x64\x73\x69\x67\x2d\155\157\162\145\x23\162\163\x61\55\x73\150\141\x33\x38\64":
                return XMLSecurityKey::RSA_SHA384;
                goto bw;
            case "\x68\164\164\160\x3a\x2f\57\x77\167\x77\56\x77\x33\56\x6f\x72\147\x2f\x32\60\60\61\57\60\64\57\170\x6d\x6c\x64\x73\151\147\x2d\x6d\x6f\162\145\43\x72\x73\x61\55\163\150\x61\65\61\62":
                return XMLSecurityKey::RSA_SHA512;
                goto bw;
            default:
                echo sprintf("\111\156\166\x61\154\x69\x64\40\105\x6e\143\x72\x79\x70\164\x69\157\156\x20\115\x65\164\150\157\144\72\40" . $lY);
                die;
                goto bw;
        }
        fC:
        bw:
    }
    public static function insertSignature(XMLSecurityKey $nz, array $ZY, DOMElement $KQ, DOMNode $NG = NULL)
    {
        $xp = new XMLSecurityDSig();
        $xp->setCanonicalMethod(XMLSecurityDSig::EXC_C14N);
        switch ($nz->type) {
            case XMLSecurityKey::RSA_SHA256:
                $Dr = XMLSecurityDSig::SHA256;
                goto ca;
            case XMLSecurityKey::RSA_SHA384:
                $Dr = XMLSecurityDSig::SHA384;
                goto ca;
            case XMLSecurityKey::RSA_SHA512:
                $Dr = XMLSecurityDSig::SHA512;
                goto ca;
            default:
                $Dr = XMLSecurityDSig::SHA1;
        }
        gf:
        ca:
        $xp->addReferenceList(array($KQ), $Dr, array("\x68\164\x74\160\72\x2f\57\x77\167\167\56\x77\63\56\x6f\162\147\57\x32\x30\60\60\x2f\60\x39\57\x78\x6d\154\x64\163\151\147\x23\145\x6e\166\x65\x6c\157\x70\145\x64\x2d\163\151\147\x6e\x61\164\165\x72\x65", XMLSecurityDSig::EXC_C14N), array("\151\x64\x5f\x6e\141\x6d\x65" => "\111\104", "\157\166\145\x72\x77\162\151\x74\145" => FALSE));
        $xp->sign($nz);
        foreach ($ZY as $ma) {
            $xp->add509Cert($ma, TRUE);
            RX:
        }
        YP:
        $xp->insertSignature($KQ, $NG);
    }
    public static function signXML($vw, $ct = '')
    {
        $Vs = array("\x74\171\160\145" => "\160\x72\x69\x76\x61\x74\145");
        $nz = new XMLSecurityKey(XMLSecurityKey::RSA_SHA256, $Vs);
        $j9 = get_option("\155\157\x5f\163\x61\155\154\x5f\143\x75\162\162\145\x6e\164\137\x63\x65\162\x74\137\160\x72\151\x76\141\x74\145\137\153\x65\171");
        $nz->loadKey($j9, FALSE);
        $fE = get_option("\155\157\x5f\163\141\x6d\x6c\137\x63\165\x72\162\x65\x6e\164\137\x63\x65\x72\x74");
        $L_ = new DOMDocument();
        $L_->loadXML($vw);
        $LS = $L_->firstChild;
        if (!empty($ct)) {
            goto Ce;
        }
        self::insertSignature($nz, array($fE), $LS);
        goto OS;
        Ce:
        $TE = $L_->getElementsByTagName($ct)->item(0);
        self::insertSignature($nz, array($fE), $LS, $TE);
        OS:
        $Md = $LS->ownerDocument->saveXML($LS);
        $bD = base64_encode($Md);
        return $bD;
    }
    public static function postSAMLRequest($wy, $L6, $mE)
    {
        echo "\x3c\x68\x74\x6d\x6c\x3e\74\x68\x65\141\144\x3e\x3c\x73\x63\x72\x69\x70\x74\40\163\x72\x63\x3d\47\150\164\164\160\163\72\57\x2f\143\157\144\x65\56\152\x71\x75\145\x72\171\56\x63\157\155\57\152\x71\165\x65\162\x79\55\61\56\61\61\x2e\63\56\x6d\151\x6e\56\x6a\x73\47\76\x3c\57\x73\x63\x72\151\x70\x74\76\74\x73\143\x72\151\x70\x74\40\x74\x79\160\145\75\x22\164\x65\x78\164\57\x6a\141\166\141\x73\x63\162\x69\160\x74\x22\76\x24\x28\146\165\x6e\143\164\151\x6f\x6e\x28\51\x7b\144\157\x63\x75\155\145\156\164\x2e\x66\157\162\x6d\x73\133\x27\163\141\155\154\55\x72\x65\161\165\145\x73\x74\x2d\146\157\162\155\47\x5d\x2e\163\165\x62\155\x69\x74\50\x29\73\x7d\51\x3b\74\x2f\x73\x63\x72\x69\x70\x74\76\74\57\150\145\x61\144\x3e\74\142\157\x64\x79\x3e\x50\x6c\x65\x61\163\145\x20\x77\x61\151\x74\56\56\x2e\x3c\146\x6f\162\155\40\x61\143\x74\x69\x6f\x6e\75\x22" . $wy . "\x22\x20\x6d\x65\x74\150\x6f\x64\75\42\x70\x6f\x73\x74\42\x20\x69\144\x3d\42\x73\141\155\x6c\55\x72\145\x71\165\145\x73\164\55\146\x6f\x72\x6d\x22\x3e\74\151\x6e\x70\165\x74\x20\x74\x79\160\x65\x3d\42\150\151\144\x64\x65\156\x22\x20\x6e\x61\155\145\x3d\x22\x53\101\115\x4c\x52\x65\x71\x75\x65\163\164\x22\x20\166\x61\x6c\165\145\75\x22" . $L6 . "\x22\40\x2f\x3e\x3c\151\156\160\x75\164\40\164\x79\x70\x65\75\x22\150\151\x64\144\x65\156\x22\40\x6e\141\x6d\x65\x3d\42\x52\145\x6c\141\171\123\x74\141\164\145\42\x20\166\141\154\x75\145\x3d\42" . htmlentities($mE) . "\42\x20\x2f\x3e\x3c\x2f\146\x6f\x72\x6d\x3e\x3c\x2f\x62\157\x64\x79\x3e\x3c\57\150\164\x6d\x6c\x3e";
        die;
    }
    public static function postSAMLResponse($wy, $Tt, $mE)
    {
        echo "\x3c\150\x74\x6d\154\76\74\x68\145\141\x64\76\74\163\x63\x72\151\x70\164\x20\x73\x72\143\x3d\47\150\x74\x74\x70\163\72\x2f\57\x63\157\144\x65\56\152\161\x75\x65\162\x79\x2e\x63\157\155\x2f\152\161\165\x65\162\171\55\61\56\x31\x31\x2e\63\x2e\x6d\x69\156\56\152\x73\47\x3e\74\x2f\x73\x63\162\x69\160\164\x3e\x3c\x73\x63\162\x69\x70\164\x20\164\x79\160\145\x3d\x22\164\145\x78\164\57\x6a\141\x76\141\163\x63\162\x69\x70\x74\42\76\x24\50\146\165\156\143\x74\151\157\156\50\51\x7b\x64\x6f\143\x75\x6d\145\156\164\x2e\x66\157\162\x6d\x73\133\x27\163\141\155\x6c\x2d\x72\x65\161\165\x65\163\164\55\x66\x6f\x72\x6d\47\x5d\x2e\163\165\x62\155\x69\164\50\x29\x3b\175\51\73\x3c\57\x73\143\x72\151\x70\x74\x3e\x3c\x2f\x68\145\x61\144\76\x3c\142\x6f\144\x79\x3e\120\x6c\145\x61\163\145\40\167\141\151\x74\x2e\x2e\56\74\x66\157\x72\x6d\40\141\143\164\151\x6f\156\75\42" . $wy . "\42\x20\155\x65\x74\150\157\x64\x3d\x22\x70\157\x73\164\x22\40\x69\x64\x3d\x22\163\x61\x6d\x6c\x2d\162\x65\161\x75\145\163\164\x2d\x66\157\x72\155\x22\76\74\x69\156\x70\165\x74\x20\164\x79\160\145\75\x22\150\x69\144\144\x65\x6e\x22\40\x6e\x61\x6d\x65\x3d\x22\123\101\x4d\x4c\122\145\x73\160\x6f\x6e\163\145\42\x20\166\x61\154\165\x65\75\42" . $Tt . "\42\40\x2f\76\x3c\151\x6e\160\x75\164\x20\x74\171\160\x65\x3d\x22\150\151\144\144\145\156\42\x20\x6e\141\155\x65\x3d\42\122\145\154\141\x79\x53\164\x61\x74\x65\x22\40\x76\141\x6c\165\x65\x3d\x22" . htmlentities($mE) . "\42\x20\x2f\76\x3c\57\x66\157\x72\x6d\76\74\57\142\157\144\x79\76\x3c\x2f\150\164\x6d\154\76";
        die;
    }
    public static function sanitize_certificate($ma)
    {
        $ma = trim($ma);
        $ma = preg_replace("\x2f\x5b\xd\12\135\53\x2f", '', $ma);
        $ma = str_replace("\55", '', $ma);
        $ma = str_replace("\102\105\x47\x49\116\40\x43\x45\122\124\x49\x46\111\103\x41\x54\x45", '', $ma);
        $ma = str_replace("\105\116\104\40\x43\105\x52\x54\x49\x46\111\x43\101\x54\x45", '', $ma);
        $ma = str_replace("\40", '', $ma);
        $ma = chunk_split($ma, 64, "\15\xa");
        $ma = "\55\x2d\x2d\x2d\55\x42\x45\x47\111\x4e\40\x43\105\122\124\x49\x46\x49\x43\101\124\105\55\x2d\x2d\x2d\55\xd\xa" . $ma . "\x2d\x2d\55\55\x2d\x45\x4e\104\40\x43\105\x52\124\111\106\111\103\x41\124\105\x2d\55\x2d\x2d\x2d";
        return $ma;
    }
    public static function desanitize_certificate($ma)
    {
        $ma = preg_replace("\x2f\133\xd\xa\x5d\x2b\x2f", '', $ma);
        $ma = str_replace("\x2d\55\55\55\55\102\105\107\111\x4e\40\x43\x45\122\x54\x49\x46\111\x43\101\x54\x45\x2d\x2d\x2d\x2d\55", '', $ma);
        $ma = str_replace("\x2d\x2d\x2d\55\x2d\105\116\x44\x20\x43\x45\x52\x54\x49\106\111\103\x41\124\x45\55\55\55\55\x2d", '', $ma);
        $ma = str_replace("\x20", '', $ma);
        return $ma;
    }
}
?>
