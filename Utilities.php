<?php


include_once "\x78\x6d\x6c\x73\145\x63\x6c\x69\x62\x73\x2e\160\150\x70";
use RobRichards\XMLSecLibs\XMLSecurityKey;
use RobRichards\XMLSecLibs\XMLSecurityDSig;
use RobRichards\XMLSecLibs\XMLSecEnc;
class SAMLSPUtilities
{
    public static function generateID()
    {
        return "\x5f" . self::stringToHex(self::generateRandomBytes(21));
    }
    public static function stringToHex($f1)
    {
        $oW = '';
        $gJ = 0;
        Lf:
        if (!($gJ < strlen($f1))) {
            goto l7;
        }
        $oW .= sprintf("\x25\60\x32\x78", ord($f1[$gJ]));
        GE:
        $gJ++;
        goto Lf;
        l7:
        return $oW;
    }
    public static function generateRandomBytes($TC, $Hk = TRUE)
    {
        return openssl_random_pseudo_bytes($TC);
    }
    public static function createAuthnRequest($Xj, $Vs, $C2, $NE = "\146\141\154\x73\x65", $OS = "\x48\164\164\160\122\x65\144\151\x72\x65\x63\x74", $iz = '')
    {
        $iz = "\165\x72\x6e\x3a\157\141\x73\x69\x73\x3a\x6e\x61\155\145\x73\x3a\164\143\72\x53\x41\115\114\x3a" . $iz;
        $UM = "\x3c\x3f\170\155\154\40\x76\145\162\163\x69\157\156\x3d\42\61\56\60\x22\x20\145\156\143\x6f\x64\x69\156\x67\75\42\x55\124\x46\x2d\x38\42\x3f\x3e" . "\x3c\x73\x61\155\x6c\x70\x3a\x41\x75\164\x68\x6e\122\145\x71\x75\145\x73\x74\40\x78\x6d\x6c\x6e\x73\72\x73\141\155\x6c\x70\75\x22\x75\x72\156\x3a\157\x61\163\x69\163\x3a\156\x61\x6d\145\163\x3a\x74\x63\x3a\123\101\115\x4c\x3a\x32\x2e\60\x3a\160\162\157\x74\157\143\157\154\x22\x20\x78\x6d\x6c\x6e\x73\x3d\x22\x75\x72\156\x3a\x6f\x61\x73\151\163\x3a\x6e\141\155\145\x73\x3a\x74\x63\x3a\x53\x41\115\x4c\72\x32\56\x30\x3a\141\x73\x73\x65\162\x74\151\157\156\42\x20\x49\104\75\42" . self::generateID() . "\x22\x20\126\145\x72\x73\151\x6f\156\x3d\x22\62\x2e\60\x22\40\x49\163\x73\165\x65\x49\156\163\x74\x61\156\x74\x3d\x22" . self::generateTimestamp() . "\42";
        if (!($NE == "\164\x72\165\145")) {
            goto uf;
        }
        $UM .= "\x20\106\157\162\143\145\101\x75\x74\150\x6e\75\x22\x74\162\x75\x65\42";
        uf:
        $UM .= "\x20\120\x72\x6f\x74\157\x63\x6f\154\x42\151\156\x64\x69\x6e\x67\x3d\42\x75\162\x6e\x3a\157\x61\x73\x69\163\x3a\x6e\141\x6d\x65\163\x3a\164\x63\x3a\x53\101\115\x4c\x3a\62\x2e\x30\x3a\x62\151\x6e\x64\151\x6e\x67\163\x3a\x48\x54\124\120\55\120\x4f\123\124\x22\40\x41\x73\x73\145\162\x74\x69\157\156\x43\157\156\163\165\x6d\145\x72\123\145\x72\x76\x69\x63\x65\125\x52\x4c\75\42" . $Xj . "\42\x20\x44\145\163\164\151\x6e\141\x74\x69\157\156\75\42" . $C2 . "\42\x3e\x3c\x73\x61\x6d\x6c\x3a\x49\x73\x73\165\x65\x72\x20\x78\x6d\x6c\x6e\x73\x3a\163\141\155\x6c\75\x22\x75\x72\156\x3a\x6f\x61\163\151\x73\72\x6e\x61\x6d\145\x73\x3a\164\143\72\x53\101\x4d\114\x3a\62\x2e\x30\72\141\x73\x73\145\x72\x74\151\x6f\x6e\42\76" . $Vs . "\x3c\57\163\141\x6d\x6c\x3a\x49\163\x73\x75\x65\x72\x3e\x3c\x73\x61\155\x6c\x70\x3a\x4e\141\155\x65\111\104\120\x6f\x6c\151\x63\171\x20\101\x6c\x6c\x6f\x77\103\162\145\141\164\145\x3d\42\x74\162\x75\145\x22\x20\x46\x6f\x72\x6d\141\164\75\42" . $iz . "\42\xd\12\40\40\40\40\40\40\x20\40\40\x20\40\40\40\x20\x20\x20\40\x20\40\x20\x20\40\x20\x20\57\x3e\x3c\x2f\x73\x61\x6d\154\160\x3a\101\x75\x74\150\156\x52\x65\161\x75\x65\x73\164\x3e";
        if (empty($OS) || $OS == "\110\x74\164\160\x52\x65\x64\151\162\x65\x63\164") {
            goto EQ;
        }
        $ht = gzdeflate($UM);
        $nC = base64_encode($ht);
        update_option("\x6d\157\137\x73\x61\155\154\x5f\162\145\161\x75\x65\x73\164", $nC);
        goto sr;
        EQ:
        $ht = gzdeflate($UM);
        $nC = base64_encode($ht);
        update_option("\x6d\157\137\163\x61\155\154\137\162\x65\x71\x75\x65\x73\x74", $nC);
        $bu = urlencode($nC);
        $UM = $bu;
        sr:
        return $UM;
    }
    public static function createLogoutRequest($Kt, $jO = '', $Vs, $C2, $ig = "\110\x74\164\160\122\145\144\x69\162\145\143\164")
    {
        $UM = "\x3c\x3f\x78\155\154\x20\x76\x65\x72\163\151\157\x6e\x3d\42\61\56\x30\x22\x20\x65\156\x63\x6f\144\x69\x6e\x67\75\42\125\124\106\x2d\70\42\x3f\76" . "\74\163\x61\155\154\x70\72\114\x6f\147\x6f\x75\164\x52\x65\x71\x75\x65\x73\x74\x20\x78\x6d\154\156\163\72\163\x61\155\154\160\75\42\x75\x72\156\x3a\157\x61\163\x69\163\72\156\x61\155\x65\163\x3a\x74\143\72\123\101\115\114\x3a\62\x2e\x30\x3a\x70\162\157\164\x6f\x63\x6f\154\42\x20\x78\x6d\x6c\x6e\163\72\163\x61\x6d\154\x3d\42\165\x72\x6e\72\x6f\x61\163\x69\163\x3a\x6e\x61\x6d\145\163\x3a\x74\143\x3a\123\101\x4d\x4c\72\x32\56\x30\x3a\141\x73\x73\145\x72\164\151\157\156\x22\40\x49\x44\x3d\42" . self::generateID() . "\x22\x20\111\163\x73\x75\145\111\156\163\164\x61\x6e\164\75\x22" . self::generateTimestamp() . "\42\40\126\145\162\x73\151\157\156\x3d\x22\x32\x2e\60\42\40\104\x65\x73\x74\151\x6e\x61\164\151\x6f\x6e\75\x22" . $C2 . "\x22\76\xd\xa\11\11\11\11\11\x9\74\x73\x61\x6d\x6c\72\x49\x73\x73\165\145\162\x20\170\155\154\x6e\163\x3a\x73\141\155\154\75\42\x75\162\156\72\x6f\x61\x73\151\163\72\x6e\141\155\145\x73\x3a\164\x63\x3a\123\x41\115\114\72\x32\56\x30\x3a\141\x73\x73\145\x72\x74\x69\157\x6e\x22\76" . $Vs . "\x3c\x2f\x73\x61\155\154\72\111\x73\x73\x75\145\x72\76\15\12\11\x9\11\x9\11\x9\74\163\141\x6d\x6c\x3a\116\141\155\145\x49\104\x20\170\155\154\156\x73\72\x73\141\155\x6c\x3d\x22\x75\162\x6e\72\x6f\141\163\151\x73\72\156\141\155\145\163\72\x74\143\72\123\x41\x4d\114\72\x32\56\60\72\x61\163\x73\145\x72\x74\151\x6f\156\x22\76" . $Kt[0] . "\x3c\57\x73\x61\x6d\x6c\72\116\141\x6d\x65\x49\x44\76";
        if (empty($jO)) {
            goto Ph;
        }
        $UM .= "\x3c\x73\x61\x6d\154\160\x3a\x53\145\x73\163\151\x6f\x6e\x49\156\x64\x65\170\x3e" . $jO[0] . "\74\x2f\x73\x61\x6d\x6c\x70\72\x53\x65\163\163\x69\157\156\111\156\144\145\170\76";
        Ph:
        $UM .= "\x3c\x2f\163\x61\x6d\154\x70\72\x4c\x6f\x67\x6f\x75\x74\122\145\x71\165\x65\163\164\x3e";
        if (!(empty($ig) || $ig == "\x48\164\164\x70\x52\x65\144\151\x72\145\143\164")) {
            goto s_;
        }
        $ht = gzdeflate($UM);
        $nC = base64_encode($ht);
        $bu = urlencode($nC);
        $UM = $bu;
        s_:
        return $UM;
    }
    public static function createLogoutResponse($Lc, $Vs, $C2, $ig = "\110\x74\x74\160\122\145\x64\151\162\145\x63\164")
    {
        $UM = "\74\x3f\x78\x6d\x6c\40\166\145\162\x73\151\157\x6e\x3d\42\x31\x2e\60\42\40\145\x6e\x63\157\144\x69\156\x67\75\x22\x55\124\106\55\x38\42\x3f\76" . "\74\163\x61\x6d\x6c\x70\x3a\114\157\x67\x6f\x75\164\122\145\163\x70\x6f\x6e\163\x65\40\x78\x6d\154\x6e\163\72\x73\x61\x6d\154\160\75\x22\165\162\x6e\72\157\x61\163\151\x73\x3a\x6e\x61\x6d\145\x73\x3a\x74\x63\72\123\x41\x4d\114\x3a\62\56\x30\72\x70\x72\x6f\x74\x6f\143\x6f\x6c\x22\x20\170\x6d\154\156\163\x3a\163\141\155\x6c\75\42\165\x72\x6e\x3a\157\141\163\x69\163\x3a\x6e\141\x6d\145\x73\72\x74\143\x3a\123\101\x4d\x4c\x3a\x32\x2e\x30\72\x61\x73\x73\145\162\x74\151\x6f\156\42\40" . "\x49\104\x3d\42" . self::generateID() . "\x22\x20" . "\126\x65\162\x73\x69\157\x6e\75\42\x32\56\x30\42\x20\x49\163\163\165\145\111\x6e\163\164\x61\x6e\x74\75\42" . self::generateTimestamp() . "\x22\40" . "\104\145\x73\164\151\156\141\x74\151\157\156\75\x22" . $C2 . "\42\40" . "\111\x6e\122\x65\x73\x70\157\x6e\x73\x65\124\157\75\42" . $Lc . "\x22\x3e" . "\x3c\x73\141\x6d\x6c\72\x49\x73\163\165\145\x72\x20\170\155\154\156\163\x3a\x73\141\x6d\x6c\x3d\x22\165\x72\x6e\x3a\157\141\163\151\163\x3a\156\141\x6d\145\163\x3a\x74\x63\x3a\x53\x41\x4d\114\72\62\56\x30\72\141\x73\163\145\x72\x74\151\157\x6e\x22\76" . $Vs . "\x3c\x2f\163\141\x6d\x6c\72\x49\x73\x73\x75\145\x72\76" . "\74\x73\x61\x6d\x6c\x70\x3a\123\164\x61\164\165\x73\76\x3c\163\141\x6d\x6c\160\72\123\x74\141\164\165\x73\x43\x6f\x64\x65\x20\126\141\154\x75\145\75\x22\x75\162\156\72\157\141\x73\x69\163\72\156\141\155\x65\x73\x3a\164\143\x3a\123\101\115\x4c\x3a\62\56\60\x3a\x73\x74\141\x74\165\x73\72\123\x75\x63\143\145\163\163\x22\57\x3e\x3c\x2f\x73\141\x6d\x6c\160\72\123\x74\141\x74\165\x73\x3e\x3c\57\x73\141\155\154\x70\x3a\114\157\147\157\x75\x74\122\145\163\x70\x6f\156\x73\x65\x3e";
        if (!(empty($ig) || $ig == "\110\164\x74\x70\x52\145\144\151\162\x65\143\x74")) {
            goto UN;
        }
        $ht = gzdeflate($UM);
        $nC = base64_encode($ht);
        $bu = urlencode($nC);
        $UM = $bu;
        UN:
        return $UM;
    }
    public static function generateTimestamp($wN = NULL)
    {
        if (!($wN === NULL)) {
            goto Fx;
        }
        $wN = time();
        Fx:
        return gmdate("\x59\x2d\155\x2d\x64\134\x54\x48\x3a\151\x3a\x73\x5c\x5a", $wN);
    }
    public static function xpQuery(DOMNode $e3, $IC)
    {
        static $pn = NULL;
        if ($e3 instanceof DOMDocument) {
            goto Xh;
        }
        $R0 = $e3->ownerDocument;
        goto kO;
        Xh:
        $R0 = $e3;
        kO:
        if (!($pn === NULL || !$pn->document->isSameNode($R0))) {
            goto kC;
        }
        $pn = new DOMXPath($R0);
        $pn->registerNamespace("\x73\157\141\160\55\145\x6e\166", "\x68\164\164\x70\x3a\57\x2f\163\143\150\145\x6d\x61\x73\x2e\x78\155\154\163\x6f\141\x70\56\157\162\x67\57\x73\157\141\x70\57\145\x6e\x76\145\x6c\157\x70\145\57");
        $pn->registerNamespace("\x73\x61\x6d\154\x5f\160\162\x6f\x74\157\x63\157\154", "\x75\x72\x6e\72\x6f\x61\163\151\163\x3a\x6e\x61\155\x65\x73\x3a\164\143\x3a\123\101\115\x4c\72\x32\x2e\60\x3a\160\162\x6f\x74\x6f\143\x6f\x6c");
        $pn->registerNamespace("\163\141\155\x6c\137\141\x73\163\145\x72\x74\x69\x6f\156", "\x75\x72\x6e\72\157\x61\163\x69\x73\72\x6e\x61\x6d\x65\163\72\x74\143\72\x53\101\115\114\x3a\x32\x2e\60\x3a\141\x73\163\x65\162\164\151\157\x6e");
        $pn->registerNamespace("\x73\x61\x6d\x6c\137\x6d\145\x74\141\x64\x61\x74\x61", "\165\x72\156\72\x6f\x61\x73\x69\x73\72\x6e\x61\155\x65\163\72\x74\143\72\123\101\x4d\114\72\62\x2e\60\72\x6d\145\164\x61\x64\141\x74\141");
        $pn->registerNamespace("\144\163", "\x68\164\164\160\x3a\x2f\57\167\x77\167\56\167\63\x2e\x6f\x72\x67\x2f\62\x30\60\x30\57\x30\x39\x2f\x78\x6d\x6c\x64\163\151\147\x23");
        $pn->registerNamespace("\170\145\x6e\x63", "\150\164\164\x70\x3a\x2f\x2f\167\167\167\56\167\x33\56\x6f\162\x67\57\x32\60\60\61\x2f\x30\x34\57\170\x6d\154\x65\x6e\143\x23");
        kC:
        $C4 = $pn->query($IC, $e3);
        $oW = array();
        $gJ = 0;
        s1:
        if (!($gJ < $C4->length)) {
            goto nZ;
        }
        $oW[$gJ] = $C4->item($gJ);
        g2:
        $gJ++;
        goto s1;
        nZ:
        return $oW;
    }
    public static function parseNameId(DOMElement $aX)
    {
        $oW = array("\x56\141\x6c\165\x65" => trim($aX->textContent));
        foreach (array("\116\x61\155\x65\121\x75\141\154\x69\x66\151\145\162", "\123\120\116\141\155\x65\x51\x75\141\x6c\x69\146\x69\145\162", "\x46\x6f\x72\155\x61\x74") as $XD) {
            if (!$aX->hasAttribute($XD)) {
                goto O5;
            }
            $oW[$XD] = $aX->getAttribute($XD);
            O5:
            l6:
        }
        J5:
        return $oW;
    }
    public static function xsDateTimeToTimestamp($EI)
    {
        $fc = array();
        $eX = "\57\x5e\50\134\x64\x5c\x64\134\144\x5c\144\51\x2d\x28\x5c\x64\134\144\x29\x2d\x28\134\144\x5c\144\51\124\50\x5c\144\134\144\x29\72\x28\x5c\x64\x5c\x64\51\72\50\134\x64\134\144\51\x28\77\x3a\134\56\x5c\x64\53\x29\77\132\44\57\x44";
        if (!(preg_match($eX, $EI, $fc) == 0)) {
            goto ZB;
        }
        echo sprintf("\x6e\166\x61\154\151\x64\40\123\x41\x4d\114\62\40\x74\151\x6d\x65\x73\x74\141\155\160\40\x70\141\x73\163\145\x64\40\164\157\40\x78\x73\x44\141\164\145\x54\151\155\145\x54\x6f\x54\151\x6d\145\x73\x74\141\155\160\72\x20" . $EI);
        die;
        ZB:
        $Ht = intval($fc[1]);
        $jL = intval($fc[2]);
        $I9 = intval($fc[3]);
        $GS = intval($fc[4]);
        $LH = intval($fc[5]);
        $nM = intval($fc[6]);
        $fE = gmmktime($GS, $LH, $nM, $jL, $I9, $Ht);
        return $fE;
    }
    public static function extractStrings(DOMElement $T5, $fO, $OQ)
    {
        $oW = array();
        $e3 = $T5->firstChild;
        aY:
        if (!($e3 !== NULL)) {
            goto Qs;
        }
        if (!($e3->namespaceURI !== $fO || $e3->localName !== $OQ)) {
            goto nY;
        }
        goto sN;
        nY:
        $oW[] = trim($e3->textContent);
        sN:
        $e3 = $e3->nextSibling;
        goto aY;
        Qs:
        return $oW;
    }
    public static function validateElement(DOMElement $z6)
    {
        $q6 = new XMLSecurityDSig();
        $q6->idKeys[] = "\x49\x44";
        $p5 = self::xpQuery($z6, "\x2e\x2f\144\163\72\123\x69\x67\156\x61\164\165\162\145");
        if (count($p5) === 0) {
            goto h5;
        }
        if (count($p5) > 1) {
            goto vx;
        }
        goto l1;
        h5:
        return FALSE;
        goto l1;
        vx:
        echo sprintf("\130\115\114\123\145\x63\x3a\40\x6d\x6f\x72\145\40\164\150\141\156\x20\157\x6e\145\x20\x73\151\147\156\x61\164\x75\x72\x65\40\x65\154\145\x6d\x65\156\164\x20\151\x6e\40\162\x6f\x6f\164\56");
        die;
        l1:
        $p5 = $p5[0];
        $q6->sigNode = $p5;
        $q6->canonicalizeSignedInfo();
        if ($q6->validateReference()) {
            goto k4;
        }
        echo sprintf("\130\115\x4c\163\x65\x63\x3a\40\144\151\147\x65\163\x74\x20\x76\141\154\x69\144\x61\164\x69\x6f\x6e\x20\x66\x61\151\x6c\x65\144");
        die;
        k4:
        $JM = FALSE;
        foreach ($q6->getValidatedNodes() as $CE) {
            if ($CE->isSameNode($z6)) {
                goto WY;
            }
            if ($z6->parentNode instanceof DOMDocument && $CE->isSameNode($z6->ownerDocument)) {
                goto R3;
            }
            goto wr;
            WY:
            $JM = TRUE;
            goto m5;
            goto wr;
            R3:
            $JM = TRUE;
            goto m5;
            wr:
            SL:
        }
        m5:
        if ($JM) {
            goto EH;
        }
        echo sprintf("\130\115\x4c\123\145\143\72\40\x54\x68\145\x20\x72\157\x6f\164\x20\145\x6c\145\x6d\145\x6e\164\40\x69\163\x20\x6e\x6f\164\40\x73\151\x67\x6e\145\144\x2e");
        die;
        EH:
        $AQ = array();
        foreach (self::xpQuery($p5, "\56\57\144\163\x3a\x4b\145\171\111\x6e\x66\157\57\x64\163\x3a\x58\x35\60\x39\x44\141\x74\x61\x2f\x64\x73\x3a\x58\x35\60\x39\103\x65\x72\x74\x69\x66\x69\x63\x61\x74\145") as $F3) {
            $xv = trim($F3->textContent);
            $xv = str_replace(array("\xd", "\12", "\11", "\40"), '', $xv);
            $AQ[] = $xv;
            Wi:
        }
        MY:
        $oW = array("\123\151\147\x6e\141\164\x75\162\145" => $q6, "\103\x65\162\x74\x69\x66\x69\x63\141\x74\x65\163" => $AQ);
        return $oW;
    }
    public static function validateSignature(array $YX, XMLSecurityKey $ES)
    {
        $q6 = $YX["\x53\151\147\156\x61\x74\165\162\x65"];
        $HZ = self::xpQuery($q6->sigNode, "\56\57\144\163\72\x53\151\x67\x6e\145\x64\111\156\x66\x6f\x2f\144\x73\72\123\x69\147\156\141\x74\x75\162\145\x4d\x65\164\150\157\x64");
        if (!empty($HZ)) {
            goto gH;
        }
        echo sprintf("\115\151\x73\163\x69\x6e\147\40\123\151\x67\156\141\164\165\162\145\115\x65\x74\x68\157\144\40\145\154\145\x6d\145\x6e\164");
        die;
        gH:
        $HZ = $HZ[0];
        if ($HZ->hasAttribute("\101\x6c\x67\157\x72\x69\x74\x68\x6d")) {
            goto bY;
        }
        echo sprintf("\x4d\x69\163\x73\x69\156\x67\40\x41\154\x67\157\x72\151\x74\150\155\55\x61\x74\164\x72\151\x62\x75\x74\x65\x20\157\156\x20\x53\x69\x67\x6e\x61\164\x75\162\145\x4d\x65\164\150\157\x64\40\145\x6c\145\x6d\145\156\164\x2e");
        die;
        bY:
        $P6 = $HZ->getAttribute("\x41\154\147\x6f\162\151\164\150\155");
        if (!($ES->type === XMLSecurityKey::RSA_SHA1 && $P6 !== $ES->type)) {
            goto QP;
        }
        $ES = self::castKey($ES, $P6);
        QP:
        if ($q6->verify($ES)) {
            goto VM;
        }
        echo sprintf("\125\x6e\141\x62\154\145\x20\164\x6f\x20\166\141\154\151\x64\141\164\145\40\123\x69\x67\x6e\x61\164\165\x72\145");
        die;
        VM:
    }
    public static function castKey(XMLSecurityKey $ES, $gZ, $VL = "\x70\165\142\154\151\x63")
    {
        if (!($ES->type === $gZ)) {
            goto Ni;
        }
        return $ES;
        Ni:
        $au = openssl_pkey_get_details($ES->key);
        if (!($au === FALSE)) {
            goto zV;
        }
        echo sprintf("\x55\156\141\142\x6c\145\x20\x74\x6f\x20\147\x65\x74\40\153\x65\171\40\144\x65\164\x61\151\154\163\40\146\x72\157\155\40\x58\115\x4c\123\145\x63\165\x72\151\164\x79\x4b\x65\x79\56");
        die;
        zV:
        if (isset($au["\x6b\145\x79"])) {
            goto SF;
        }
        echo sprintf("\115\x69\163\x73\x69\x6e\147\40\x6b\145\171\40\151\156\40\x70\165\142\154\x69\x63\40\x6b\145\x79\x20\144\x65\x74\x61\x69\x6c\x73\56");
        die;
        SF:
        $Nt = new XMLSecurityKey($gZ, array("\x74\171\x70\x65" => $VL));
        $Nt->loadKey($au["\153\145\171"]);
        return $Nt;
    }
    public static function processResponse($Q3, $Fy, $pJ, SAML2SPResponse $l2, $sA, $pg)
    {
        $mG = current($l2->getAssertions());
        $X2 = $mG->getNotBefore();
        if (!($X2 !== NULL && $X2 > time() + 60)) {
            goto J2;
        }
        wp_die("\x52\x65\x63\145\151\x76\145\x64\x20\x61\x6e\x20\x61\163\163\145\x72\x74\151\x6f\x6e\40\x74\150\141\164\40\x69\x73\x20\x76\141\x6c\x69\x64\x20\151\156\40\x74\150\x65\40\x66\165\164\165\x72\145\56\x20\103\x68\145\143\x6b\40\x63\154\157\143\153\40\163\x79\x6e\x63\150\x72\x6f\156\151\x7a\141\164\x69\157\156\40\x6f\156\40\111\144\x50\x20\x61\156\144\x20\x53\120\x2e");
        J2:
        $BL = $mG->getNotOnOrAfter();
        if (!($BL !== NULL && $BL <= time() - 60)) {
            goto EZ;
        }
        wp_die("\122\145\x63\x65\x69\166\145\x64\40\x61\x6e\40\x61\163\x73\145\x72\164\151\x6f\x6e\40\164\x68\x61\164\x20\150\141\x73\40\x65\x78\160\x69\162\145\144\56\x20\103\x68\145\143\x6b\x20\143\154\x6f\x63\x6b\40\x73\x79\156\x63\150\162\157\x6e\x69\172\x61\x74\x69\x6f\x6e\x20\157\156\x20\x49\144\x50\40\x61\156\144\40\123\120\x2e");
        EZ:
        $wC = $mG->getSessionNotOnOrAfter();
        if (!($wC !== NULL && $wC <= time() - 60)) {
            goto K3;
        }
        wp_die("\x52\145\143\145\x69\x76\x65\x64\x20\141\156\40\x61\x73\x73\x65\x72\164\x69\157\156\40\x77\x69\x74\150\x20\x61\40\x73\x65\163\x73\x69\157\156\40\164\150\x61\x74\40\150\141\x73\x20\x65\x78\x70\x69\x72\x65\144\x2e\x20\x43\150\x65\x63\x6b\x20\x63\x6c\157\143\153\40\163\171\x6e\143\x68\162\157\x6e\151\x7a\x61\x74\151\x6f\x6e\40\157\x6e\x20\111\x64\120\40\141\156\144\x20\x53\120\x2e");
        K3:
        $VC = $l2->getDestination();
        if (!(substr($VC, -1) == "\57")) {
            goto Zy;
        }
        $VC = substr($VC, 0, -1);
        Zy:
        if (!(substr($Q3, -1) == "\x2f")) {
            goto hs;
        }
        $Q3 = substr($Q3, 0, -1);
        hs:
        if (!($VC !== NULL && $VC !== $Q3)) {
            goto C6;
        }
        echo "\104\x65\x73\164\x69\x6e\141\164\151\x6f\x6e\x20\x69\x6e\x20\x72\145\x73\x70\157\x6e\163\x65\40\x64\157\145\x73\156\x27\x74\40\x6d\x61\164\143\150\x20\x74\150\145\x20\143\x75\162\x72\x65\156\164\40\125\x52\114\56\x20\104\x65\163\164\x69\x6e\x61\164\x69\157\x6e\40\x69\x73\40\42" . htmlspecialchars($VC) . "\x22\x2c\x20\143\x75\162\162\x65\x6e\164\40\x55\x52\114\x20\x69\x73\x20\42" . htmlspecialchars($Q3) . "\x22\x2e";
        die;
        C6:
        $ez = self::checkSign($Fy, $pJ, $sA, $pg);
        return $ez;
    }
    public static function checkSign($Fy, $pJ, $sA, $pg)
    {
        $AQ = $pJ["\103\x65\x72\164\x69\x66\x69\143\x61\x74\x65\x73"];
        if (count($AQ) === 0) {
            goto Hi;
        }
        $uE = array();
        $uE[] = $Fy;
        $FM = self::findCertificate($uE, $AQ, $pg);
        if (!($FM == false)) {
            goto j7;
        }
        return false;
        j7:
        goto q1;
        Hi:
        $eO = maybe_unserialize(get_option("\x73\141\155\x6c\x5f\x78\x35\x30\71\137\x63\145\x72\164\151\x66\151\143\141\x74\145"));
        $FM = $eO[$sA];
        q1:
        $n6 = NULL;
        $ES = new XMLSecurityKey(XMLSecurityKey::RSA_SHA1, array("\x74\x79\160\x65" => "\x70\165\x62\154\x69\x63"));
        $ES->loadKey($FM);
        try {
            self::validateSignature($pJ, $ES);
            return TRUE;
        } catch (Exception $XE) {
            $n6 = $XE;
        }
        if ($n6 !== NULL) {
            goto Ss;
        }
        return FALSE;
        goto vO;
        Ss:
        throw $n6;
        vO:
    }
    public static function validateIssuerAndAudience($zv, $R4, $RM, $pg)
    {
        $Vs = current($zv->getAssertions())->getIssuer();
        $mG = current($zv->getAssertions());
        $OF = $mG->getValidAudiences();
        if (strcmp($RM, $Vs) === 0) {
            goto dB;
        }
        if ($pg == "\x74\145\x73\x74\x56\x61\x6c\151\144\x61\x74\145" or $pg == "\164\145\163\x74\116\x65\x77\x43\x65\x72\164\151\x66\x69\143\141\x74\145") {
            goto d9;
        }
        wp_die("\x57\x65\40\x63\x6f\x75\154\144\40\156\x6f\x74\x20\x73\151\x67\x6e\40\171\x6f\x75\x20\x69\156\56\x20\120\x6c\145\141\x73\145\x20\143\157\x6e\x74\141\143\x74\x20\x79\x6f\x75\162\x20\x41\x64\x6d\151\156\151\163\164\162\x61\x74\157\x72", "\x45\x72\x72\x6f\162\40\x3a\111\163\x73\165\145\162\x20\143\141\156\x6e\x6f\164\x20\x62\x65\x20\166\145\x72\151\146\151\145\144");
        goto E7;
        d9:
        ob_end_clean();
        $WK = mo_options_error_constants::Error_issuer_not_verfied;
        $Wc = mo_options_error_constants::Cause_issuer_not_verfied;
        echo "\x3c\144\x69\166\x20\163\x74\x79\x6c\145\x3d\x22\146\x6f\x6e\x74\55\146\141\155\151\x6c\171\x3a\x43\141\154\151\x62\x72\151\73\x70\x61\x64\x64\151\x6e\x67\72\60\40\63\45\73\x22\x3e";
        echo "\x3c\x64\x69\166\40\x73\x74\x79\154\145\x3d\42\143\x6f\154\157\162\72\40\43\141\x39\x34\64\x34\x32\x3b\142\141\x63\153\x67\162\x6f\x75\x6e\x64\x2d\x63\x6f\154\157\x72\72\x20\x23\x66\x32\x64\145\144\145\73\x70\x61\x64\x64\x69\x6e\x67\x3a\40\x31\65\160\x78\x3b\155\141\162\147\x69\156\55\x62\157\164\164\x6f\x6d\72\40\x32\x30\160\x78\x3b\164\x65\x78\164\55\141\x6c\x69\147\156\x3a\x63\x65\156\164\145\162\x3b\x62\157\x72\144\145\x72\x3a\61\x70\170\40\163\157\x6c\x69\144\x20\43\x45\x36\x42\x33\x42\62\x3b\146\x6f\x6e\x74\x2d\x73\151\172\145\72\x31\70\x70\x74\x3b\x22\76\x20\x45\122\122\117\122\x3c\x2f\x64\x69\166\76\15\12\x9\x9\11\40\74\x64\x69\166\x20\x73\x74\x79\154\x65\x3d\42\143\157\154\157\x72\72\40\x23\x61\71\x34\64\64\62\x3b\146\157\156\164\x2d\163\151\x7a\x65\72\x31\64\x70\164\73\x20\x6d\x61\162\x67\x69\156\55\x62\x6f\x74\164\157\x6d\72\62\x30\160\170\73\x22\76\74\x70\x3e\x3c\163\164\162\157\x6e\x67\x3e\105\162\x72\x6f\x72\72\40\74\x2f\x73\x74\x72\157\x6e\147\76\x49\163\163\165\x65\x72\x20\x63\141\x6e\x6e\x6f\164\40\x62\x65\x20\166\145\x72\151\x66\151\x65\x64\x2e\x3c\x2f\x70\x3e\15\12\11\x9\x9\x20\x3c\x70\76\x50\x6c\x65\x61\163\x65\40\x63\157\156\x74\141\x63\164\x20\171\x6f\x75\162\x20\x61\144\155\151\156\151\x73\164\162\x61\164\x6f\162\40\x61\156\x64\x20\x72\x65\160\157\x72\164\x20\x74\150\145\40\146\157\x6c\x6c\157\167\x69\x6e\147\40\x65\162\x72\x6f\x72\72\74\57\x70\x3e\15\xa\11\x9\x9\40\x3c\x70\x3e\74\x73\164\162\157\156\x67\76\x50\157\163\163\x69\x62\154\145\x20\103\x61\x75\163\145\x3a\40\x3c\x2f\x73\x74\x72\157\156\x67\x3e\111\x64\x50\x20\105\x6e\x74\x69\x74\171\40\111\x44\40\x63\157\x6e\146\151\147\x75\162\145\144\x20\x69\x6e\x20\x74\150\x65\x20\160\154\x75\x67\x69\156\x20\151\163\x20\151\156\143\157\x72\162\x65\x63\164\x3c\57\160\x3e\xd\12\11\x9\11\40\x3c\160\x3e\74\163\x74\x72\157\156\147\x3e\105\x6e\164\151\164\171\x20\x49\x44\x20\x69\x6e\40\123\x41\x4d\114\x20\x52\145\163\x70\x6f\x6e\163\x65\x3a\40\x3c\x2f\x73\x74\162\157\x6e\x67\76" . $Vs . "\74\160\76\xd\12\11\11\11\40\x3c\x70\76\74\x73\164\162\x6f\156\x67\76\105\156\164\151\x74\x79\40\111\104\x20\143\x6f\x6e\146\x69\x67\x75\162\x65\144\40\x69\156\x20\x74\150\x65\x20\x70\154\x75\x67\x69\156\72\40\x3c\57\x73\x74\x72\157\x6e\147\x3e" . $RM . "\74\x2f\x70\76\15\xa\x9\x9\11\x20\x3c\160\76\74\163\164\x72\157\x6e\147\x3e\123\157\x6c\x75\x74\x69\157\156\x3a\74\57\163\164\162\157\156\147\x3e\74\x2f\160\x3e\15\xa\11\11\11\11\74\157\x6c\x3e\xd\xa\11\11\x9\11\11\x3c\x6c\151\x3e\x43\157\x70\171\x20\164\150\145\x20\105\x6e\x74\151\164\x79\40\x49\x44\40\157\x66\x20\x53\101\x4d\x4c\40\x52\x65\x73\x70\x6f\156\163\x65\x20\146\x72\157\x6d\40\x61\142\x6f\166\145\x20\x61\156\x64\x20\160\141\x73\x74\x65\x20\151\x74\40\151\156\x20\105\156\x74\151\x74\x79\40\111\x44\x20\x6f\x72\x20\x49\x73\x73\165\145\x72\40\x66\151\x65\x6c\144\40\x75\156\144\145\162\40\123\145\162\166\151\143\x65\40\x50\162\x6f\x76\x69\x64\145\162\40\x53\x65\164\165\160\40\x74\x61\x62\56\74\x2f\x6c\x69\76\15\12\11\x9\x9\x9\x3c\x2f\x6f\x6c\76\xd\12\x9\x9\11\40\74\57\x64\151\x76\76\xd\12\x9\11\x9\40\x3c\x64\151\x76\x20\163\x74\x79\x6c\x65\75\42\x6d\141\162\147\x69\156\72\x33\45\x3b\x64\151\x73\x70\x6c\141\x79\x3a\x62\154\x6f\x63\153\73\x74\145\170\164\x2d\141\x6c\x69\x67\156\x3a\143\145\x6e\x74\145\162\x3b\x22\x3e\15\12\x9\x9\11\x20\x3c\x64\151\166\x20\163\164\x79\154\x65\75\42\x6d\x61\162\147\151\x6e\72\x33\x25\x3b\x64\x69\163\x70\x6c\141\171\x3a\142\154\157\x63\153\x3b\x74\x65\170\x74\x2d\x61\154\151\x67\156\72\143\x65\156\x74\145\x72\73\x22\76\x3c\x69\x6e\x70\165\x74\x20\163\x74\171\154\145\x3d\x22\x70\141\x64\x64\151\x6e\147\x3a\61\45\x3b\167\x69\144\x74\150\72\x31\60\60\160\170\73\142\x61\143\153\x67\162\x6f\x75\x6e\x64\72\40\x23\60\x30\71\x31\103\104\40\156\x6f\x6e\x65\x20\x72\145\x70\145\x61\x74\40\x73\x63\162\157\x6c\154\40\60\45\x20\x30\45\73\x63\165\162\x73\x6f\x72\x3a\x20\x70\x6f\151\156\x74\145\162\73\146\157\x6e\x74\x2d\x73\151\172\145\x3a\61\65\x70\170\x3b\x62\x6f\x72\x64\145\x72\55\x77\x69\x64\x74\150\x3a\40\x31\x70\x78\x3b\142\x6f\162\x64\145\x72\x2d\163\164\171\154\x65\x3a\40\x73\x6f\x6c\151\x64\73\142\157\162\144\145\x72\55\x72\141\144\151\x75\163\72\40\x33\160\170\x3b\167\150\151\164\x65\x2d\x73\160\141\143\x65\72\40\156\x6f\167\162\141\160\73\x62\x6f\170\x2d\x73\151\x7a\151\x6e\x67\x3a\40\142\x6f\162\x64\145\162\55\142\x6f\x78\73\x62\x6f\162\x64\x65\162\x2d\x63\x6f\154\157\162\72\40\x23\60\60\x37\x33\101\101\73\142\x6f\170\55\163\x68\141\144\157\167\x3a\40\60\160\x78\40\61\160\170\40\60\x70\170\x20\162\x67\142\x61\x28\x31\x32\x30\54\40\x32\60\60\54\x20\x32\63\60\x2c\x20\60\56\66\51\40\x69\x6e\163\x65\164\73\x63\x6f\154\x6f\x72\x3a\40\43\106\x46\x46\73\42\164\171\x70\x65\75\x22\142\x75\164\x74\157\156\x22\x20\x76\x61\x6c\x75\145\x3d\42\104\x6f\x6e\145\x22\40\157\x6e\103\154\x69\143\153\x3d\x22\x73\x65\154\146\56\143\154\x6f\163\145\x28\51\73\42\76\x3c\x2f\x64\151\166\76";
        mo_saml_download_logs($WK, $Wc);
        die;
        E7:
        goto QF;
        dB:
        if (empty($OF)) {
            goto cb;
        }
        if (in_array($R4, $OF, TRUE)) {
            goto zz;
        }
        if ($pg == "\x74\145\163\164\x56\141\154\151\144\141\164\145" or $pg == "\164\145\x73\164\116\145\167\x43\145\x72\164\x69\x66\x69\x63\141\x74\x65") {
            goto PN;
        }
        wp_die("\127\x65\40\x63\x6f\165\154\144\x20\x6e\157\164\40\x73\x69\147\156\x20\x79\157\x75\x20\x69\156\56\x20\120\x6c\145\141\163\145\x20\x63\x6f\x6e\164\x61\143\x74\40\x79\x6f\165\162\x20\101\144\x6d\x69\x6e\x69\x73\x74\x72\141\x74\157\x72", "\105\162\162\x6f\162\x20\72\x49\156\x76\x61\x6c\x69\144\40\x41\x75\x64\151\x65\x6e\x63\145\40\125\122\x49");
        goto Qc;
        PN:
        $WK = mo_options_error_constants::Error_invalid_audience;
        $Wc = mo_options_error_constants::Cause_invalid_audience;
        ob_end_clean();
        echo "\x3c\x64\151\166\x20\x73\164\x79\x6c\x65\75\x22\x66\157\x6e\x74\x2d\x66\141\155\151\x6c\x79\72\x43\141\154\x69\x62\x72\x69\x3b\160\x61\x64\x64\151\156\x67\x3a\x30\x20\63\x25\73\42\76";
        echo "\x3c\x64\x69\166\x20\x73\x74\171\x6c\x65\75\42\143\x6f\x6c\157\x72\72\x20\43\141\x39\64\64\x34\62\73\x62\141\x63\153\x67\x72\157\x75\156\x64\x2d\143\157\x6c\x6f\x72\72\x20\43\x66\x32\144\x65\144\145\73\160\x61\x64\144\x69\x6e\x67\x3a\x20\61\65\x70\170\73\155\141\x72\147\151\156\55\142\x6f\164\164\x6f\155\72\40\62\60\x70\170\73\164\145\170\164\x2d\141\154\x69\x67\156\72\143\x65\156\x74\145\x72\73\x62\157\162\x64\x65\162\72\x31\160\x78\40\163\x6f\154\151\144\x20\x23\x45\66\102\63\102\x32\73\146\x6f\156\x74\55\163\151\x7a\145\x3a\61\x38\160\x74\x3b\x22\x3e\x20\x45\122\122\x4f\x52\x3c\57\144\x69\166\x3e\15\xa\x20\40\x20\x20\40\40\x20\x20\40\x20\40\40\40\x20\40\x20\40\40\x20\40\x3c\144\151\166\40\x73\164\171\x6c\x65\x3d\42\143\157\x6c\157\162\72\x20\43\141\71\x34\x34\64\62\73\146\x6f\x6e\164\x2d\163\x69\172\145\x3a\61\x34\160\x74\73\x20\155\x61\x72\147\x69\156\55\x62\x6f\x74\164\x6f\155\72\x32\x30\160\x78\73\42\x3e\x3c\x70\x3e\x3c\x73\164\162\157\156\x67\76\x45\x72\x72\157\x72\72\x20\74\57\163\x74\x72\x6f\156\x67\76\111\x6e\166\141\154\x69\144\40\101\x75\144\x69\145\x6e\x63\145\x20\125\122\111\x2e\74\57\160\x3e\15\xa\40\40\40\40\x20\x20\x20\x20\40\x20\x20\x20\x20\40\40\40\x20\40\40\40\74\x70\76\x50\x6c\145\x61\x73\x65\x20\143\157\156\x74\x61\143\x74\x20\x79\x6f\165\x72\x20\x61\144\155\151\x6e\151\x73\164\162\141\x74\x6f\162\x20\x61\156\144\x20\162\x65\160\x6f\x72\x74\40\x74\150\145\40\146\x6f\x6c\154\157\167\151\x6e\x67\x20\x65\162\162\x6f\162\x3a\x3c\57\160\76\xd\xa\40\x20\40\x20\40\40\x20\x20\40\x20\40\x20\40\x20\x20\x20\x20\x20\x20\x20\x3c\160\x3e\74\163\x74\x72\157\x6e\x67\x3e\x50\157\x73\x73\151\142\x6c\x65\x20\103\141\165\163\145\x3a\40\x3c\57\163\x74\162\157\156\x67\76\124\150\x65\x20\166\x61\x6c\165\145\x20\157\x66\40\47\x41\x75\144\x69\145\x6e\143\x65\40\x55\x52\111\x27\40\x66\x69\x65\x6c\144\40\x6f\156\x20\x49\x64\x65\x6e\164\x69\164\171\40\x50\162\x6f\x76\151\x64\x65\162\x27\x73\40\163\x69\x64\x65\40\x69\163\40\151\x6e\x63\x6f\162\x72\x65\143\164\74\57\160\76\15\xa\40\40\x20\x20\40\x20\40\x20\x20\x20\40\x20\40\40\x20\x20\40\40\40\40\74\160\76\105\x78\x70\145\x63\164\145\x64\40\x6f\156\145\40\x6f\x66\40\x74\x68\145\40\x41\x75\x64\x69\x65\156\x63\145\163\x20\x74\x6f\40\x62\145\72\x20" . $R4 . "\x3c\x70\76\xd\xa\11\11\11\11\11\74\x70\x3e\74\x73\164\x72\x6f\x6e\x67\76\123\x6f\x6c\x75\x74\x69\157\x6e\72\74\x2f\x73\164\162\157\156\x67\x3e\x3c\57\160\76\xd\xa\11\x9\x9\11\x9\x3c\157\154\x3e\xd\xa\11\11\x9\11\x9\11\74\154\x69\76\x43\x6f\160\171\40\164\x68\x65\x20\105\x78\x70\145\143\164\145\144\x20\101\165\144\151\x65\x6e\x63\x65\40\125\122\111\x20\146\x72\157\x6d\x20\141\x62\x6f\166\145\40\141\x6e\144\40\160\x61\163\x74\145\x20\151\164\x20\x69\156\x20\164\x68\145\x20\101\x75\x64\x69\x65\x6e\143\x65\x20\125\x52\111\40\x66\151\x65\154\144\x20\x61\164\x20\111\x64\145\x6e\x74\x69\164\x79\40\120\162\x6f\x76\151\144\x65\162\x20\163\x69\x64\145\56\74\57\x6c\151\x3e\15\xa\11\11\x9\x9\x9\x3c\57\157\154\x3e\15\xa\11\11\x9\x9\11\74\57\x64\x69\x76\x3e\xd\12\40\40\x20\x20\40\x20\40\x20\40\x20\40\x20\40\40\40\40\x20\40\40\40\74\144\151\x76\40\x73\164\171\154\x65\75\x22\155\141\x72\x67\x69\x6e\x3a\63\x25\x3b\x64\x69\163\160\x6c\x61\x79\x3a\x62\x6c\x6f\143\153\73\x74\145\x78\x74\55\x61\154\x69\x67\156\72\143\145\156\x74\x65\x72\x3b\42\76\xd\12\x20\x20\x20\x20\40\x20\x20\x20\x20\40\40\40\x20\x20\40\40\x20\x20\x20\40\x3c\x64\151\x76\40\x73\164\171\x6c\x65\75\42\155\141\x72\x67\x69\x6e\72\x33\45\73\144\151\163\x70\154\141\x79\x3a\x62\154\157\143\153\x3b\x74\x65\170\x74\x2d\141\154\x69\147\156\72\x63\145\156\x74\x65\x72\x3b\42\76\x3c\x69\x6e\x70\165\164\40\x73\x74\x79\x6c\145\x3d\42\160\x61\144\x64\151\x6e\x67\72\x31\x25\x3b\167\151\144\164\150\72\61\x30\60\x70\170\x3b\142\x61\x63\x6b\x67\x72\157\x75\x6e\144\72\x20\x23\x30\60\x39\x31\x43\x44\40\x6e\157\156\x65\x20\x72\x65\160\x65\141\x74\x20\x73\x63\x72\157\154\x6c\40\60\45\x20\x30\x25\x3b\143\165\x72\163\x6f\x72\x3a\x20\160\157\x69\x6e\x74\145\162\x3b\146\x6f\156\x74\x2d\x73\x69\x7a\145\x3a\x31\65\160\x78\73\142\x6f\x72\144\145\x72\x2d\x77\151\144\x74\150\72\x20\61\x70\x78\x3b\x62\x6f\162\144\145\x72\55\x73\164\171\154\145\72\x20\x73\157\154\x69\x64\73\142\x6f\x72\x64\145\x72\55\x72\x61\x64\x69\x75\163\72\40\63\160\x78\x3b\x77\x68\x69\164\x65\55\x73\160\x61\143\x65\x3a\x20\156\157\x77\x72\x61\x70\73\142\x6f\170\55\x73\x69\x7a\x69\x6e\147\72\x20\142\157\x72\144\x65\x72\55\142\157\x78\73\142\x6f\162\144\x65\x72\55\143\157\x6c\157\162\72\x20\x23\x30\x30\x37\x33\101\x41\73\142\157\170\x2d\x73\150\141\x64\157\x77\x3a\x20\x30\x70\x78\40\61\160\x78\40\60\160\170\40\162\x67\142\x61\50\x31\62\x30\x2c\40\x32\60\60\54\x20\62\63\x30\x2c\x20\60\x2e\66\51\x20\151\x6e\x73\145\164\x3b\x63\157\154\x6f\162\72\x20\43\x46\x46\106\x3b\x22\x74\x79\x70\145\75\x22\142\165\x74\x74\x6f\x6e\x22\x20\166\141\x6c\165\x65\75\x22\104\157\x6e\145\42\40\x6f\x6e\103\x6c\151\x63\153\x3d\x22\163\145\154\146\x2e\143\x6c\x6f\163\x65\50\x29\x3b\x22\76\x3c\x2f\x64\151\x76\76";
        die;
        mo_saml_download_logs($WK, $Wc);
        Qc:
        goto Oz;
        zz:
        return TRUE;
        Oz:
        cb:
        QF:
    }
    private static function findCertificate(array $KX, array $AQ, $pg)
    {
        $Hi = array();
        foreach ($AQ as $Va) {
            $xh = strtolower(sha1(base64_decode($Va)));
            if (in_array($xh, $KX, TRUE)) {
                goto ra;
            }
            $Hi[] = $xh;
            return false;
            ra:
            $JU = "\x2d\x2d\x2d\x2d\x2d\x42\x45\x47\x49\116\40\103\105\x52\x54\x49\106\x49\103\x41\x54\x45\x2d\55\x2d\55\55\xa" . chunk_split($Va, 64) . "\55\55\x2d\x2d\55\105\116\x44\40\103\x45\x52\x54\x49\106\111\103\101\124\105\x2d\x2d\55\x2d\x2d\xa";
            return $JU;
            lt:
        }
        pW:
        if ($pg == "\x74\145\x73\164\x56\141\x6c\x69\144\141\x74\x65" or $pg == "\164\x65\x73\164\116\145\167\103\145\x72\x74\151\x66\x69\x63\141\164\145") {
            goto YH;
        }
        wp_die("\127\x65\x20\x63\x6f\165\x6c\x64\x20\156\x6f\164\40\x73\x69\x67\156\x20\x79\157\165\40\151\156\56\x20\120\154\145\141\163\x65\x20\x63\x6f\x6e\164\x61\x63\x74\40\171\x6f\x75\162\x20\101\144\155\151\x6e\x69\x73\164\162\x61\164\157\162", "\x45\x72\x72\x6f\162\40\x3a\x43\x65\x72\164\x69\x66\151\143\141\164\x65\40\x6e\157\x74\x20\x66\x6f\165\156\x64");
        goto in;
        YH:
        $JU = "\55\x2d\55\55\55\x42\x45\x47\x49\x4e\40\x43\105\122\x54\111\x46\x49\x43\101\124\105\x2d\55\55\x2d\x2d\74\142\x72\x3e" . chunk_split($Va, 64) . "\74\142\162\76\55\x2d\x2d\x2d\x2d\105\x4e\104\40\103\105\x52\124\x49\106\111\x43\101\x54\105\x2d\55\55\x2d\x2d";
        echo "\74\x64\151\166\40\163\x74\x79\x6c\145\x3d\42\146\x6f\156\164\55\x66\x61\155\x69\154\x79\72\103\141\x6c\151\142\162\151\x3b\160\x61\x64\x64\x69\x6e\x67\72\60\x20\63\x25\x3b\42\76";
        echo "\x3c\144\151\166\40\x73\x74\x79\154\x65\75\x22\x63\x6f\154\x6f\x72\x3a\40\43\141\x39\x34\64\x34\62\73\142\141\143\x6b\x67\x72\x6f\165\156\x64\x2d\143\157\x6c\x6f\162\x3a\40\43\146\62\144\x65\x64\x65\73\160\x61\x64\144\151\156\x67\72\40\x31\x35\x70\170\73\x6d\141\162\147\x69\x6e\55\142\x6f\164\x74\157\x6d\x3a\40\x32\x30\160\170\73\x74\145\170\x74\55\141\154\x69\x67\x6e\72\x63\145\x6e\x74\x65\x72\x3b\x62\157\162\144\x65\162\72\x31\160\170\40\x73\157\x6c\x69\x64\40\x23\105\66\x42\x33\102\62\x3b\146\x6f\156\164\x2d\x73\x69\x7a\x65\72\x31\70\160\164\x3b\42\x3e\x20\x45\122\x52\117\x52\74\x2f\x64\151\166\x3e\xd\12\11\x9\11\x3c\x64\x69\x76\x20\x73\x74\x79\154\145\75\42\x63\157\154\157\162\72\40\x23\141\71\x34\64\x34\x32\73\146\x6f\156\164\x2d\163\x69\172\x65\72\61\x34\x70\x74\x3b\40\155\x61\x72\x67\151\x6e\x2d\x62\x6f\164\x74\x6f\x6d\72\x32\60\160\170\73\42\x3e\74\x70\x3e\x3c\x73\x74\162\x6f\156\x67\76\105\162\x72\x6f\162\x3a\40\74\57\163\x74\162\x6f\x6e\147\x3e\x55\156\141\x62\154\145\x20\x74\x6f\x20\146\151\x6e\144\40\141\x20\x63\x65\x72\x74\151\x66\x69\143\x61\164\145\x20\155\x61\164\143\x68\x69\156\x67\x20\164\150\145\40\x63\157\156\x66\151\147\x75\162\145\144\40\x66\x69\156\x67\x65\x72\x70\x72\x69\x6e\x74\x2e\x3c\57\x70\76\15\12\11\x9\x9\74\160\76\x50\x6c\145\x61\163\x65\x20\x63\x6f\x6e\x74\141\x63\164\x20\171\x6f\x75\x72\40\x61\144\x6d\x69\156\x69\x73\164\162\141\x74\x6f\162\x20\x61\x6e\x64\x20\x72\145\x70\157\162\x74\40\164\150\x65\x20\x66\x6f\x6c\154\x6f\x77\x69\156\147\40\x65\x72\162\157\x72\x3a\x3c\x2f\160\76\15\xa\11\x9\11\74\x70\x3e\x3c\163\164\x72\x6f\x6e\x67\76\x50\x6f\163\163\151\x62\154\x65\40\103\x61\165\x73\145\72\40\x3c\57\x73\x74\x72\157\x6e\x67\x3e\47\130\x2e\x35\x30\x39\x20\x43\x65\162\164\151\146\x69\143\x61\x74\x65\47\x20\146\x69\145\x6c\144\x20\151\156\x20\160\154\x75\x67\151\156\x20\144\x6f\145\x73\x20\156\157\x74\x20\155\141\x74\x63\x68\40\164\150\x65\x20\143\145\x72\x74\151\x66\151\143\x61\164\145\x20\x66\x6f\x75\156\x64\x20\x69\x6e\40\x53\x41\x4d\114\x20\122\x65\x73\x70\x6f\156\163\145\56\74\x2f\x70\76\15\12\x9\x9\x9\74\x70\76\x3c\x73\x74\x72\157\x6e\147\x3e\103\145\x72\164\151\146\x69\x63\141\x74\145\40\x66\157\165\x6e\144\40\x69\x6e\x20\123\x41\x4d\x4c\x20\122\x65\x73\160\157\156\163\x65\x3a\40\x3c\57\163\164\162\157\x6e\147\76\x3c\x62\162\76\x3c\142\162\76" . $JU . "\74\57\160\x3e\15\xa\x9\x9\11\x9\x9\x3c\x2f\x64\151\166\76\xd\xa\11\x9\x9\11\x9\x3c\144\151\x76\40\163\x74\x79\154\x65\x3d\x22\155\141\162\x67\x69\x6e\x3a\63\45\73\144\x69\163\x70\x6c\141\x79\72\142\x6c\x6f\143\153\73\x74\x65\170\x74\55\141\x6c\x69\x67\156\72\143\145\x6e\x74\145\162\x3b\42\x3e\15\xa\11\11\x9\11\x9\x3c\x64\151\x76\x20\x73\x74\171\x6c\145\75\x22\x6d\x61\x72\147\151\x6e\x3a\63\x25\x3b\x64\151\x73\160\x6c\141\x79\x3a\142\x6c\157\143\x6b\x3b\x74\x65\x78\164\55\141\x6c\151\147\156\72\143\145\156\x74\145\x72\73\x22\x3e\74\x69\x6e\x70\165\164\40\163\164\171\154\x65\75\x22\160\141\144\x64\151\156\x67\72\61\45\73\x77\x69\x64\x74\x68\x3a\61\60\60\160\170\73\x62\x61\143\153\x67\162\157\165\x6e\144\72\x20\x23\x30\x30\x39\x31\x43\x44\40\x6e\157\156\145\40\162\x65\160\x65\141\x74\x20\x73\x63\162\x6f\x6c\154\40\x30\x25\40\60\45\x3b\x63\165\x72\163\157\162\72\40\x70\x6f\151\x6e\164\145\162\x3b\x66\157\156\x74\55\x73\151\172\145\x3a\61\x35\x70\x78\73\x62\157\x72\x64\x65\x72\55\167\x69\144\x74\x68\x3a\40\x31\x70\x78\x3b\x62\x6f\x72\x64\x65\x72\x2d\163\x74\171\154\145\72\x20\163\157\154\x69\144\73\142\x6f\x72\144\x65\162\55\x72\141\x64\151\165\163\x3a\x20\x33\160\x78\73\x77\150\151\x74\145\55\163\x70\x61\143\x65\72\x20\156\157\167\162\141\x70\73\142\x6f\x78\x2d\163\151\172\151\x6e\147\72\x20\x62\157\162\x64\145\x72\55\142\157\x78\x3b\x62\x6f\x72\144\x65\162\x2d\x63\x6f\x6c\157\x72\72\x20\x23\x30\x30\67\x33\x41\101\73\x62\157\170\55\x73\x68\x61\x64\157\x77\x3a\40\60\x70\170\40\61\x70\x78\40\60\x70\x78\40\x72\x67\x62\x61\50\61\x32\x30\x2c\40\62\x30\60\x2c\x20\x32\63\60\54\x20\x30\56\x36\51\x20\x69\x6e\163\x65\164\73\143\x6f\154\157\162\72\40\x23\x46\106\x46\x3b\42\164\171\160\x65\x3d\x22\x62\x75\164\164\x6f\x6e\42\x20\166\141\x6c\x75\x65\75\42\x44\157\156\145\x22\40\x6f\x6e\x43\154\x69\x63\153\x3d\42\x73\x65\154\146\x2e\x63\154\157\x73\145\x28\51\x3b\42\76\74\57\144\151\x76\x3e";
        die;
        in:
    }
    private static function doDecryptElement(DOMElement $OT, XMLSecurityKey $cx, array &$Bn)
    {
        $e0 = new XMLSecEnc();
        $e0->setNode($OT);
        $e0->type = $OT->getAttribute("\x54\171\x70\x65");
        $L0 = $e0->locateKey($OT);
        if ($L0) {
            goto Xv;
        }
        echo sprintf("\103\x6f\165\154\144\x20\x6e\157\164\40\154\157\143\x61\x74\x65\x20\x6b\x65\x79\x20\141\x6c\x67\157\x72\151\164\x68\x6d\40\151\x6e\x20\145\156\143\x72\171\x70\164\x65\x64\x20\144\141\164\x61\x2e");
        die;
        Xv:
        $iX = $e0->locateKeyInfo($L0);
        if ($iX) {
            goto Ih;
        }
        echo sprintf("\x43\x6f\165\154\144\40\156\157\x74\40\154\157\x63\141\x74\145\40\x3c\x64\x73\x69\x67\x3a\x4b\145\x79\x49\156\146\x6f\x3e\40\x66\157\162\40\164\x68\x65\x20\145\156\143\162\171\160\164\145\144\40\x6b\x65\x79\56");
        die;
        Ih:
        $h3 = $cx->getAlgorith();
        if ($iX->isEncrypted) {
            goto Qr;
        }
        $nk = $L0->getAlgorith();
        if (!($h3 !== $nk)) {
            goto RS;
        }
        echo sprintf("\101\x6c\147\x6f\162\151\164\x68\155\40\x6d\151\x73\155\x61\x74\x63\150\x20\142\145\x74\167\145\145\156\40\x69\x6e\x70\x75\x74\x20\153\x65\171\40\x61\x6e\x64\x20\153\x65\x79\x20\x69\x6e\40\x6d\145\163\163\x61\147\x65\x2e\x20" . "\x4b\x65\x79\x20\x77\141\x73\72\40" . var_export($h3, TRUE) . "\x3b\40\x6d\145\x73\163\x61\147\x65\40\x77\x61\163\72\40" . var_export($nk, TRUE));
        die;
        RS:
        $L0 = $cx;
        goto zv;
        Qr:
        $F0 = $iX->getAlgorith();
        if (!in_array($F0, $Bn, TRUE)) {
            goto DK;
        }
        echo sprintf("\x41\154\x67\157\x72\151\x74\150\155\x20\144\151\163\x61\x62\x6c\145\144\72\x20" . var_export($F0, TRUE));
        die;
        DK:
        if (!($F0 === XMLSecurityKey::RSA_OAEP_MGF1P && $h3 === XMLSecurityKey::RSA_1_5)) {
            goto xO;
        }
        $h3 = XMLSecurityKey::RSA_OAEP_MGF1P;
        xO:
        if (!($h3 !== $F0)) {
            goto cV;
        }
        echo sprintf("\x41\154\147\157\x72\151\x74\150\x6d\x20\155\x69\163\155\x61\164\143\150\40\142\x65\164\167\145\x65\x6e\x20\x69\156\x70\165\x74\40\153\x65\171\x20\x61\x6e\144\40\153\145\x79\40\x75\163\145\x64\40\164\157\40\145\156\143\162\x79\160\x74\x20" . "\40\x74\150\x65\40\163\171\x6d\155\x65\x74\x72\x69\x63\40\153\145\x79\40\x66\x6f\x72\x20\164\x68\x65\x20\x6d\145\x73\163\x61\147\x65\x2e\x20\113\145\171\x20\x77\141\163\x3a\40" . var_export($h3, TRUE) . "\x3b\x20\x6d\x65\x73\x73\x61\x67\x65\40\167\x61\163\x3a\40" . var_export($F0, TRUE));
        die;
        cV:
        $b3 = $iX->encryptedCtx;
        $iX->key = $cx->key;
        $p8 = $L0->getSymmetricKeySize();
        if (!($p8 === NULL)) {
            goto UC;
        }
        echo sprintf("\x55\156\x6b\x6e\x6f\167\156\x20\x6b\x65\x79\x20\x73\151\172\145\x20\x66\x6f\x72\40\x65\156\x63\x72\x79\x70\164\151\x6f\156\x20\141\x6c\147\x6f\x72\x69\164\150\155\72\40" . var_export($L0->type, TRUE));
        die;
        UC:
        try {
            $ES = $b3->decryptKey($iX);
            if (!(strlen($ES) != $p8)) {
                goto W3;
            }
            echo sprintf("\125\156\145\170\160\145\143\164\145\144\40\x6b\145\171\40\x73\x69\172\x65\40\x28" . strlen($ES) * 8 . "\142\x69\x74\163\51\x20\146\x6f\x72\x20\145\x6e\x63\162\x79\x70\x74\151\x6f\156\x20\x61\154\147\x6f\162\x69\x74\150\155\x3a\40" . var_export($L0->type, TRUE));
            die;
            W3:
        } catch (Exception $XE) {
            $OJ = $b3->getCipherValue();
            $hn = openssl_pkey_get_details($iX->key);
            $hn = sha1(serialize($hn), TRUE);
            $ES = sha1($OJ . $hn, TRUE);
            if (strlen($ES) > $p8) {
                goto we;
            }
            if (strlen($ES) < $p8) {
                goto a2;
            }
            goto PM;
            we:
            $ES = substr($ES, 0, $p8);
            goto PM;
            a2:
            $ES = str_pad($ES, $p8);
            PM:
        }
        $L0->loadkey($ES);
        zv:
        $gZ = $L0->getAlgorith();
        if (!in_array($gZ, $Bn, TRUE)) {
            goto AX;
        }
        echo sprintf("\101\154\x67\x6f\x72\151\x74\150\x6d\x20\x64\x69\163\141\x62\x6c\145\144\x3a\x20" . var_export($gZ, TRUE));
        die;
        AX:
        $Aa = $e0->decryptNode($L0, FALSE);
        $aX = "\x3c\x72\x6f\157\164\40\x78\155\154\x6e\163\x3a\163\x61\155\x6c\75\x22\x75\162\156\x3a\x6f\x61\163\151\163\x3a\156\141\x6d\145\163\72\x74\143\x3a\x53\x41\x4d\114\72\x32\x2e\60\x3a\141\163\163\x65\162\164\151\x6f\x6e\x22\x20" . "\170\x6d\154\156\x73\x3a\x78\x73\x69\75\x22\150\x74\x74\160\x3a\x2f\x2f\167\167\167\x2e\x77\63\x2e\157\x72\147\57\x32\x30\60\61\57\130\x4d\x4c\x53\x63\x68\x65\155\x61\55\x69\156\163\x74\x61\x6e\x63\145\42\x3e" . $Aa . "\74\57\x72\x6f\157\164\76";
        $V0 = new DOMDocument();
        if (@$V0->loadXML($aX)) {
            goto ny;
        }
        throw new Exception("\106\141\x69\154\145\144\40\164\x6f\40\160\141\x72\163\145\40\x64\x65\143\162\171\x70\164\145\144\x20\x58\115\x4c\x2e\x20\115\141\x79\142\x65\x20\x74\150\145\40\x77\x72\157\x6e\x67\x20\163\150\x61\x72\x65\x64\x6b\x65\x79\40\167\141\163\40\165\163\145\x64\x3f");
        ny:
        $MY = $V0->firstChild->firstChild;
        if (!($MY === NULL)) {
            goto PS;
        }
        echo sprintf("\x4d\151\163\x73\x69\x6e\x67\x20\x65\156\x63\x72\171\x70\164\145\x64\40\145\154\x65\x6d\145\156\164\x2e");
        throw new Exception("\x4d\x69\x73\x73\151\156\x67\40\145\x6e\143\162\171\160\x74\145\x64\x20\145\154\145\x6d\x65\x6e\164\x2e");
        PS:
        if ($MY instanceof DOMElement) {
            goto Sq;
        }
        echo sprintf("\x44\145\x63\162\x79\160\x74\145\x64\x20\145\x6c\145\155\145\156\164\x20\x77\141\x73\x20\156\157\164\40\141\x63\x74\165\141\154\x6c\x79\40\x61\40\104\117\x4d\105\x6c\x65\x6d\145\156\x74\x2e");
        Sq:
        return $MY;
    }
    public static function decryptElement(DOMElement $OT, XMLSecurityKey $cx, array $Bn = array(), XMLSecurityKey $ti = NULL)
    {
        try {
            return self::doDecryptElement($OT, $cx, $Bn);
        } catch (Exception $XE) {
            try {
            } catch (Exception $Pr) {
            }
            echo "\74\x64\x69\166\x20\x73\164\171\154\x65\x3d\x22\x66\x6f\x6e\x74\55\146\x61\x6d\x69\154\171\x3a\103\x61\154\x69\142\162\151\x3b\160\141\x64\144\151\x6e\x67\72\60\x20\x33\x25\x3b\x22\76";
            echo "\x3c\144\151\166\x20\x73\164\x79\154\145\75\42\x63\157\x6c\157\162\x3a\x20\43\x61\x39\x34\64\x34\62\73\x62\141\143\153\x67\162\x6f\x75\156\144\55\143\x6f\154\x6f\x72\72\40\43\x66\62\144\145\144\x65\x3b\160\x61\144\x64\151\x6e\147\72\40\61\65\x70\170\x3b\x6d\141\162\147\x69\x6e\x2d\142\x6f\x74\x74\157\155\x3a\x20\x32\60\160\170\73\164\x65\x78\164\55\141\154\151\147\x6e\72\x63\145\156\164\x65\x72\73\x62\x6f\x72\x64\x65\x72\x3a\61\x70\x78\x20\163\157\x6c\151\x64\x20\x23\105\x36\102\x33\102\x32\x3b\x66\157\x6e\164\x2d\x73\x69\172\145\72\x31\70\160\x74\x3b\x22\x3e\40\x45\122\x52\117\122\74\57\144\x69\166\x3e\15\xa\40\x20\x20\40\x20\x20\40\40\x20\40\40\40\x20\40\x20\40\40\x20\40\x20\x3c\x64\151\166\x20\163\x74\x79\154\x65\x3d\42\143\x6f\x6c\157\162\72\x20\x23\141\x39\x34\64\x34\x32\73\146\x6f\156\x74\x2d\x73\x69\172\145\72\61\64\160\x74\73\x20\155\x61\x72\x67\151\156\x2d\x62\x6f\164\164\157\155\72\x32\60\x70\170\x3b\x22\76\74\160\76\x3c\x73\x74\x72\x6f\156\147\76\x45\162\162\x6f\x72\72\x20\x3c\x2f\163\x74\162\x6f\156\x67\76\x49\156\166\141\154\151\144\x20\x41\x75\144\x69\145\x6e\143\145\40\125\x52\111\56\x3c\57\160\x3e\xd\xa\40\40\40\40\40\40\40\x20\40\x20\x20\40\x20\x20\x20\x20\40\40\x20\40\74\x70\76\120\154\145\x61\163\x65\40\x63\157\156\164\x61\x63\x74\x20\171\x6f\x75\x72\40\141\x64\x6d\151\x6e\x69\163\x74\162\141\x74\157\162\x20\141\156\144\x20\x72\145\160\157\x72\164\x20\164\150\145\x20\146\x6f\x6c\154\157\167\x69\x6e\x67\40\x65\162\x72\x6f\x72\x3a\x3c\x2f\160\76\15\12\x20\40\40\x20\x20\x20\40\40\x20\40\x20\x20\x20\40\40\40\40\x20\x20\40\74\x70\76\74\163\164\162\x6f\x6e\147\x3e\120\x6f\163\163\151\x62\154\x65\x20\103\141\165\163\145\72\x20\x3c\x2f\x73\164\x72\x6f\156\x67\x3e\111\x6e\143\157\162\162\x65\143\x74\x20\143\145\162\164\151\x66\x69\143\141\164\x65\x20\x61\x64\144\145\x64\x20\157\156\x20\x74\x68\x65\40\x49\x64\x65\156\164\151\x74\x79\x20\x50\162\x6f\166\151\144\145\x72\40\x66\x6f\x72\40\x45\156\x63\162\171\160\x74\x69\x6f\156\x3c\57\160\x3e\15\xa\11\11\x9\x9\11\74\x70\x3e\74\163\x74\x72\157\x6e\x67\x3e\123\x6f\154\165\164\x69\x6f\156\x3a\x3c\x2f\x73\x74\162\x6f\156\147\76\x20\x50\154\145\141\163\145\40\143\x68\x65\x63\x6b\40\151\146\40\x74\150\145\40\143\x65\162\164\151\146\151\143\141\164\x65\x20\141\x64\x64\x65\x64\40\x69\x6e\40\111\x64\145\x6e\164\x69\x74\171\x20\x50\162\x6f\x76\151\144\145\162\40\x69\163\x20\x73\141\155\x65\x20\x61\x73\40\x74\150\145\x20\x63\145\x72\x74\151\x66\x69\x63\x61\x74\145\40\160\162\x6f\166\x69\x64\x65\x64\x20\151\156\40\x74\150\x65\40\120\x6c\x75\x67\x69\156\74\x2f\160\x3e\15\xa\11\11\11\11\11\74\57\144\151\166\x3e\15\12\40\x20\x20\x20\x20\40\40\x20\x20\x20\x20\40\x20\40\40\40\x20\x20\x20\40\74\144\x69\166\40\163\x74\x79\154\145\75\42\x6d\141\x72\147\x69\156\x3a\x33\45\73\x64\x69\163\160\154\x61\x79\x3a\142\154\157\143\153\73\x74\x65\x78\x74\x2d\x61\x6c\151\x67\x6e\72\x63\x65\156\164\145\x72\73\42\76\xd\xa\40\x20\40\40\40\x20\40\x20\x20\x20\40\x20\x20\x20\x20\40\x20\40\x20\x20\x3c\144\151\166\40\x73\x74\x79\154\x65\75\42\x6d\141\x72\147\x69\156\x3a\63\45\x3b\144\x69\163\160\154\141\x79\72\x62\x6c\157\x63\153\x3b\x74\145\170\x74\55\141\x6c\x69\147\x6e\72\143\145\156\164\x65\x72\73\42\76\74\x69\156\160\165\164\40\163\164\171\154\145\75\42\160\141\144\144\151\156\147\x3a\x31\x25\x3b\x77\x69\144\164\x68\72\x31\x30\60\x70\x78\x3b\x62\141\x63\153\x67\162\157\165\156\144\x3a\40\43\x30\x30\x39\61\x43\104\x20\x6e\x6f\x6e\x65\40\162\x65\x70\145\x61\164\x20\163\x63\x72\157\x6c\x6c\x20\60\45\40\x30\x25\x3b\143\x75\x72\163\x6f\162\x3a\x20\x70\x6f\x69\156\x74\x65\162\73\x66\157\156\164\x2d\163\151\172\x65\72\61\x35\x70\170\73\142\157\x72\x64\x65\x72\55\x77\151\144\x74\x68\72\x20\x31\160\170\73\x62\157\162\144\145\x72\55\x73\x74\x79\154\145\72\x20\x73\x6f\x6c\x69\x64\x3b\x62\157\162\144\x65\x72\x2d\x72\x61\144\151\x75\x73\x3a\x20\x33\x70\170\73\167\x68\151\164\145\55\163\x70\141\143\x65\x3a\40\156\157\x77\x72\x61\160\x3b\142\x6f\170\55\x73\x69\172\151\156\x67\72\x20\x62\x6f\x72\144\145\x72\55\142\x6f\x78\73\x62\157\162\144\145\162\55\x63\x6f\154\x6f\x72\x3a\40\43\x30\60\67\63\x41\101\73\x62\157\170\55\x73\150\x61\144\157\x77\72\40\60\x70\x78\40\61\x70\170\x20\x30\160\170\x20\162\147\x62\x61\50\61\62\60\x2c\40\62\x30\x30\x2c\x20\x32\x33\60\x2c\x20\60\56\66\51\x20\x69\x6e\163\x65\164\73\x63\157\x6c\x6f\162\72\x20\43\x46\106\x46\73\42\164\x79\x70\x65\75\42\x62\x75\x74\x74\x6f\156\x22\x20\x76\x61\x6c\x75\x65\x3d\x22\104\157\156\145\x22\x20\x6f\156\x43\x6c\x69\143\x6b\x3d\x22\163\145\154\146\x2e\x63\154\x6f\x73\145\x28\51\x3b\42\x3e\74\x2f\144\x69\166\76";
            die;
            die;
        }
    }
    public static function get_mapped_groups($uZ, $eF)
    {
        $YH = array();
        if (empty($eF)) {
            goto Xw;
        }
        $If = array();
        $gJ = 1;
        WM:
        if (!($gJ < 10)) {
            goto qD;
        }
        $i_ = $uZ->get("\x67\162\x6f\x75\160" . $gJ . "\x5f\155\x61\x70");
        $If[$gJ] = explode("\73", $i_);
        $gJ++;
        goto WM;
        qD:
        Xw:
        foreach ($eF as $Jc) {
            if (empty($Jc)) {
                goto i0;
            }
            $gJ = 0;
            $jx = false;
            X6:
            if (!($gJ < 9 && !$jx)) {
                goto Aw;
            }
            if (!(!empty($If[$gJ]) && in_array($Jc, $If[$gJ], TRUE))) {
                goto yC;
            }
            $YH[] = $uZ->get("\x67\x72\157\165\160" . $gJ);
            $jx = true;
            yC:
            $gJ++;
            goto X6;
            Aw:
            i0:
            ze:
        }
        WJ:
        return array_unique($YH);
    }
    public static function getEncryptionAlgorithm($XC)
    {
        switch ($XC) {
            case "\150\x74\x74\x70\x3a\x2f\57\x77\167\x77\x2e\x77\63\x2e\x6f\x72\x67\x2f\x32\x30\x30\x31\x2f\60\x34\x2f\170\155\154\x65\x6e\143\x23\x74\162\151\160\x6c\x65\144\145\163\x2d\x63\x62\143":
                return XMLSecurityKey::TRIPLEDES_CBC;
                goto Ec;
            case "\150\164\x74\x70\x3a\x2f\x2f\167\167\x77\56\x77\63\x2e\x6f\x72\x67\x2f\x32\60\x30\61\x2f\x30\x34\x2f\x78\x6d\x6c\x65\x6e\143\x23\x61\x65\x73\61\x32\70\x2d\x63\142\143":
                return XMLSecurityKey::AES128_CBC;
            case "\x68\x74\x74\x70\x3a\57\x2f\167\x77\167\x2e\x77\x33\x2e\x6f\x72\147\x2f\x32\60\x30\x31\x2f\x30\64\57\x78\x6d\x6c\145\x6e\143\x23\141\x65\163\61\x39\62\x2d\143\142\143":
                return XMLSecurityKey::AES192_CBC;
                goto Ec;
            case "\150\164\x74\x70\x3a\x2f\x2f\x77\167\167\x2e\167\63\56\x6f\x72\147\x2f\62\x30\60\x31\x2f\x30\x34\x2f\170\x6d\154\x65\x6e\x63\43\141\x65\x73\x32\x35\x36\x2d\143\142\x63":
                return XMLSecurityKey::AES256_CBC;
                goto Ec;
            case "\x68\164\x74\160\72\57\57\x77\167\167\56\167\x33\56\157\x72\x67\x2f\62\x30\60\61\57\x30\64\57\170\x6d\154\145\x6e\143\x23\162\163\141\55\x31\137\65":
                return XMLSecurityKey::RSA_1_5;
                goto Ec;
            case "\150\164\x74\160\x3a\57\57\x77\167\167\x2e\167\63\x2e\x6f\162\x67\x2f\x32\60\x30\61\x2f\60\64\57\170\x6d\x6c\x65\156\x63\x23\x72\163\x61\55\157\141\145\x70\55\x6d\147\x66\x31\160":
                return XMLSecurityKey::RSA_OAEP_MGF1P;
                goto Ec;
            case "\x68\164\164\x70\x3a\x2f\57\x77\x77\167\56\167\x33\x2e\157\162\147\57\62\60\x30\60\57\x30\x39\x2f\170\155\154\144\163\151\147\43\144\x73\141\x2d\x73\150\x61\61":
                return XMLSecurityKey::DSA_SHA1;
                goto Ec;
            case "\x68\x74\x74\160\x3a\x2f\x2f\167\167\167\56\x77\x33\x2e\x6f\x72\147\57\x32\60\60\x30\57\60\x39\x2f\170\155\154\144\x73\x69\147\x23\x72\163\x61\x2d\163\150\x61\61":
                return XMLSecurityKey::RSA_SHA1;
                goto Ec;
            case "\x68\164\164\160\72\57\57\x77\x77\167\x2e\167\x33\x2e\157\162\147\x2f\62\x30\x30\x31\57\60\x34\x2f\170\x6d\x6c\x64\x73\x69\x67\x2d\x6d\157\162\x65\x23\162\163\141\55\163\150\141\62\x35\x36":
                return XMLSecurityKey::RSA_SHA256;
                goto Ec;
            case "\x68\164\x74\x70\72\x2f\x2f\x77\x77\167\56\167\63\56\157\x72\x67\x2f\62\x30\x30\61\57\x30\x34\57\170\155\x6c\x64\x73\151\147\55\x6d\157\x72\145\43\x72\x73\141\55\163\x68\x61\63\x38\64":
                return XMLSecurityKey::RSA_SHA384;
                goto Ec;
            case "\150\x74\164\x70\x3a\57\57\x77\x77\x77\56\x77\x33\x2e\x6f\162\147\57\62\x30\60\x31\x2f\60\64\57\x78\x6d\154\x64\163\151\147\55\x6d\x6f\x72\x65\43\x72\163\141\x2d\x73\x68\x61\x35\x31\x32":
                return XMLSecurityKey::RSA_SHA512;
                goto Ec;
            default:
                echo sprintf("\x49\156\166\141\x6c\x69\x64\x20\105\x6e\143\162\171\160\x74\x69\157\156\40\x4d\x65\x74\150\x6f\144\x3a\x20" . $XC);
                die;
                goto Ec;
        }
        iF1:
        Ec:
    }
    public static function insertSignature(XMLSecurityKey $ES, array $AQ, DOMElement $z6, DOMNode $BF = NULL)
    {
        $q6 = new XMLSecurityDSig();
        $q6->setCanonicalMethod(XMLSecurityDSig::EXC_C14N);
        switch ($ES->type) {
            case XMLSecurityKey::RSA_SHA256:
                $VL = XMLSecurityDSig::SHA256;
                goto rh;
            case XMLSecurityKey::RSA_SHA384:
                $VL = XMLSecurityDSig::SHA384;
                goto rh;
            case XMLSecurityKey::RSA_SHA512:
                $VL = XMLSecurityDSig::SHA512;
                goto rh;
            default:
                $VL = XMLSecurityDSig::SHA1;
        }
        Y5:
        rh:
        $q6->addReferenceList(array($z6), $VL, array("\150\164\164\x70\72\57\57\167\x77\x77\x2e\167\x33\x2e\x6f\162\x67\x2f\62\60\60\60\57\x30\71\57\170\155\x6c\144\163\151\147\43\x65\x6e\x76\x65\154\x6f\160\145\144\55\163\151\x67\x6e\141\x74\165\x72\x65", XMLSecurityDSig::EXC_C14N), array("\x69\144\137\156\141\155\145" => "\x49\x44", "\157\166\145\162\167\162\x69\164\x65" => FALSE));
        $q6->sign($ES);
        foreach ($AQ as $xH) {
            $q6->add509Cert($xH, TRUE);
            kj:
        }
        ZE:
        $q6->insertSignature($z6, $BF);
    }
    public static function getRemainingDaysOfCurrentCertificate()
    {
        $xH = get_option("\155\157\137\163\141\x6d\154\137\143\x75\x72\x72\145\156\164\x5f\143\x65\162\164");
        $dT = openssl_x509_parse($xH);
        $z5 = $dT["\166\x61\154\151\144\124\157\x5f\164\x69\155\x65\x5f\164"];
        $Md = $z5 - time();
        return round($Md / (60 * 60 * 24));
    }
    public static function getExpiryDateOfCurrentCertificate()
    {
        $xH = get_option("\x6d\157\137\163\141\155\x6c\137\x63\165\x72\162\x65\156\x74\x5f\143\145\162\x74");
        $dT = openssl_x509_parse($xH);
        return $dT["\166\141\154\x69\x64\x54\x6f\137\x74\151\155\145\x5f\x74"];
    }
    public static function signXML($aX, $RK = '', $Y6 = false)
    {
        $gs = array("\164\x79\160\145" => "\160\x72\x69\166\x61\164\x65");
        $ES = new XMLSecurityKey(XMLSecurityKey::RSA_SHA256, $gs);
        if ($Y6) {
            goto hX;
        }
        $UJ = get_option("\x6d\x6f\137\x73\x61\x6d\154\137\143\165\x72\x72\x65\156\164\137\143\145\x72\x74\137\x70\x72\151\x76\x61\164\x65\137\x6b\x65\x79");
        $Lw = get_option("\x6d\x6f\x5f\x73\x61\155\x6c\x5f\x63\165\162\x72\x65\156\164\137\143\x65\x72\164");
        goto OU;
        hX:
        $UJ = file_get_contents(plugin_dir_path(__FILE__) . "\162\145\x73\x6f\165\x72\143\145\163" . DIRECTORY_SEPARATOR . "\x6d\x69\156\x69\x6f\x72\141\x6e\147\145\x5f\163\x70\x5f\x32\x30\x32\60\x5f\160\162\151\x76\56\x6b\x65\x79");
        $Lw = file_get_contents(plugin_dir_path(__FILE__) . "\x72\145\x73\x6f\x75\162\143\145\163" . DIRECTORY_SEPARATOR . "\x6d\151\x6e\151\157\x72\x61\x6e\x67\145\x5f\163\x70\137\x32\x30\62\60\x2e\143\x72\x74");
        OU:
        $ES->loadKey($UJ, FALSE);
        $qW = new DOMDocument();
        $qW->loadXML($aX);
        $Z9 = $qW->firstChild;
        if (!empty($RK)) {
            goto ig;
        }
        self::insertSignature($ES, array($Lw), $Z9);
        goto EN;
        ig:
        $UE = $qW->getElementsByTagName($RK)->item(0);
        self::insertSignature($ES, array($Lw), $Z9, $UE);
        EN:
        $c7 = $Z9->ownerDocument->saveXML($Z9);
        $hM = base64_encode($c7);
        return $hM;
    }
    public static function postSAMLRequest($SY, $MA, $pg)
    {
        echo "\x3c\150\164\155\154\76\x3c\150\145\x61\144\x3e\74\163\x63\x72\x69\x70\164\x20\163\x72\143\x3d\47\150\x74\164\x70\163\x3a\57\x2f\x63\157\144\x65\x2e\152\x71\x75\x65\x72\x79\56\143\x6f\x6d\x2f\x6a\161\x75\145\x72\x79\x2d\61\x2e\x31\x31\56\63\56\155\x69\x6e\x2e\x6a\x73\x27\x3e\74\x2f\x73\x63\x72\x69\160\164\x3e\74\163\x63\162\151\x70\164\x20\x74\171\160\x65\x3d\42\164\145\x78\x74\x2f\x6a\x61\166\141\x73\x63\x72\151\160\x74\42\x3e\44\x28\x66\165\156\x63\164\x69\157\156\x28\51\173\x64\x6f\x63\165\155\145\156\164\x2e\146\x6f\162\x6d\163\x5b\47\163\x61\x6d\154\55\162\145\161\x75\x65\x73\x74\55\x66\157\x72\155\x27\x5d\x2e\163\x75\142\x6d\151\164\50\x29\73\x7d\x29\73\x3c\x2f\x73\x63\162\x69\160\164\x3e\74\57\x68\145\141\144\76\74\x62\x6f\x64\171\x3e\x50\154\145\141\x73\x65\x20\167\x61\x69\164\56\56\56\74\x66\157\162\x6d\40\141\x63\x74\x69\157\x6e\x3d\42" . $SY . "\42\40\x6d\145\x74\150\157\x64\75\x22\160\x6f\163\x74\x22\40\x69\144\x3d\42\x73\x61\155\154\55\162\145\x71\165\145\163\164\55\x66\157\162\x6d\x22\76\74\151\156\x70\165\x74\40\x74\171\160\x65\75\42\150\x69\144\x64\x65\156\x22\40\156\x61\x6d\x65\75\42\123\101\x4d\114\x52\x65\161\x75\x65\163\164\x22\40\166\141\x6c\165\145\x3d\42" . $MA . "\42\40\57\x3e\x3c\151\156\160\x75\164\x20\x74\x79\x70\x65\75\42\150\x69\144\144\x65\156\42\x20\x6e\x61\155\145\x3d\42\x52\x65\x6c\141\171\x53\164\141\164\145\42\x20\166\x61\154\x75\145\75\42" . htmlentities($pg) . "\x22\x20\x2f\x3e\74\x2f\146\157\x72\155\76\74\x2f\142\x6f\144\x79\76\74\x2f\150\164\155\x6c\x3e";
        die;
    }
    public static function postSAMLResponse($SY, $EH, $pg)
    {
        echo "\x3c\x68\x74\x6d\154\x3e\74\x68\x65\141\144\76\x3c\163\143\162\x69\x70\164\40\163\162\143\75\47\x68\164\x74\x70\x73\72\57\57\143\x6f\x64\x65\56\152\161\x75\145\x72\x79\x2e\143\x6f\x6d\57\x6a\161\165\x65\162\x79\55\61\x2e\61\x31\x2e\63\x2e\155\x69\x6e\56\152\x73\47\76\x3c\x2f\163\143\x72\151\160\x74\76\x3c\163\143\x72\x69\x70\x74\40\164\171\160\145\75\42\x74\145\170\x74\x2f\152\141\166\x61\x73\143\162\x69\x70\164\x22\76\44\x28\146\x75\x6e\143\x74\151\x6f\156\x28\51\173\x64\x6f\x63\x75\x6d\x65\156\x74\56\x66\157\162\155\x73\x5b\x27\x73\x61\155\154\55\162\x65\x71\165\x65\163\164\55\146\157\162\x6d\x27\135\56\163\x75\142\155\151\x74\x28\x29\x3b\x7d\51\73\x3c\57\163\x63\x72\151\x70\164\76\x3c\57\150\145\x61\144\x3e\74\x62\x6f\144\171\x3e\120\x6c\x65\141\163\x65\x20\167\x61\151\x74\56\56\56\x3c\146\x6f\x72\x6d\x20\141\143\x74\x69\157\x6e\75\x22" . $SY . "\x22\40\x6d\x65\x74\150\x6f\144\x3d\42\x70\x6f\x73\164\42\40\151\144\75\42\163\x61\x6d\x6c\55\162\145\161\165\145\x73\x74\55\x66\x6f\162\155\42\x3e\x3c\151\156\x70\x75\164\40\x74\x79\x70\x65\x3d\42\150\151\x64\x64\x65\156\42\40\156\x61\155\145\75\42\x53\101\115\114\122\145\163\x70\x6f\156\163\145\x22\40\166\x61\154\165\x65\75\42" . $EH . "\x22\40\57\x3e\x3c\x69\156\x70\x75\x74\x20\164\x79\160\x65\75\42\150\151\144\144\145\x6e\x22\40\156\x61\x6d\145\75\x22\x52\x65\x6c\141\171\123\164\x61\x74\x65\x22\x20\166\141\154\165\145\x3d\42" . htmlentities($pg) . "\x22\x20\57\76\74\x2f\146\157\162\x6d\76\74\57\x62\157\x64\171\76\74\x2f\150\x74\x6d\154\76";
        die;
    }
    public static function sanitize_certificate($xH)
    {
        $xH = trim($xH);
        $xH = preg_replace("\x2f\133\xd\xa\135\53\x2f", '', $xH);
        $xH = str_replace("\55", '', $xH);
        $xH = str_replace("\x42\x45\107\111\116\x20\103\105\x52\x54\x49\x46\111\103\101\x54\x45", '', $xH);
        $xH = str_replace("\x45\116\104\40\x43\105\x52\124\111\106\x49\x43\x41\124\x45", '', $xH);
        $xH = str_replace("\x20", '', $xH);
        $xH = chunk_split($xH, 64, "\xd\12");
        $xH = "\x2d\55\x2d\x2d\55\102\105\107\x49\x4e\x20\x43\105\x52\124\111\x46\x49\103\x41\124\x45\55\x2d\x2d\x2d\55\xd\12" . $xH . "\55\55\55\x2d\55\105\116\x44\x20\x43\105\x52\124\x49\x46\x49\x43\x41\124\105\55\55\55\x2d\x2d";
        return $xH;
    }
    public static function desanitize_certificate($xH)
    {
        $xH = preg_replace("\57\133\xd\xa\x5d\53\57", '', $xH);
        $xH = str_replace("\x2d\55\x2d\55\55\102\x45\107\111\x4e\x20\x43\105\x52\124\111\x46\x49\x43\101\124\105\x2d\x2d\55\x2d\x2d", '', $xH);
        $xH = str_replace("\55\55\55\55\55\105\x4e\x44\40\x43\x45\122\x54\x49\106\111\x43\x41\124\105\x2d\x2d\55\x2d\x2d", '', $xH);
        $xH = str_replace("\x20", '', $xH);
        return $xH;
    }
    public static function mo_saml_wp_remote_call($SY, $Ib = array(), $EC = false)
    {
        if (!$EC) {
            goto lX;
        }
        $l2 = wp_remote_get($SY, $Ib);
        goto uS;
        lX:
        $l2 = wp_remote_post($SY, $Ib);
        uS:
        if (!is_wp_error($l2)) {
            goto xb;
        }
        $kg = new saml_mo_login();
        update_option("\x6d\x6f\137\163\141\x6d\154\137\155\x65\163\163\x61\x67\145", "\125\x6e\x61\142\154\x65\x20\x74\157\x20\143\157\x6e\156\x65\143\x74\40\x74\157\x20\x74\150\x65\40\x49\156\x74\145\162\x6e\x65\x74\x2e\x20\120\x6c\x65\x61\x73\x65\40\x74\x72\171\x20\141\x67\x61\x69\156\x2e");
        $kg->mo_saml_show_error_message();
        return false;
        goto Wt;
        xb:
        return $l2["\142\157\x64\171"];
        Wt:
    }
}
?>
